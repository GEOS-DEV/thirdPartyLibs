language: cpp

linuxBuild: &linuxBuild
  stage: build
  os: linux
  dist: bionic
  services: docker
  sudo: required
  install:
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - sudo apt-get update
    - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
    - cd ${TRAVIS_BUILD_DIR}
    - cd ..
    - cp ${TRAVIS_BUILD_DIR}/docker/$IMG/* .
  script: 
    - DOCKER_TAG=geosx/compiler:$IMG-"$(date +%F)"
    - echo $DOCKER_TAG
    - docker build --build-arg GEOSXCI_GITHUB_PAT=${GEOSXCI_GITHUB_PAT} --build-arg TRAVIS_COMMIT=${TRAVIS_COMMIT} --tag $DOCKER_TAG .
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_TAG

linuxDeploy: &linuxDeploy
  stage: deploy
  script:
#    - cd ${TRAVIS_BUILD_DIR}
#    - git clone --branch develop --depth 1 git@github.com:GEOSX/GEOSX.git
#    - cd GEOSX
#    - git submodule update --init --recursive src/coreComponents/cxx-utilities src/cmake/blt src/externalComponents/PVTPackage src/externalComponents/PAMELA src/externalComponents/GEOSX_PTP src/coreComponents/fileIO/coupling/hdf5_interface 
#    - cd ..
#    - docker run -v ${TRAVIS_BUILD_DIR}/GEOSX:/home/geosx/GEOSX_repo geosx/compiler:$IMG /bin/bash -c 'cd /home/geosx; mkdir GEOSX_build; cd GEOSX_build; cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_Fortran_COMPILER=${FC} -DENABLE_MPI=ON -DMPI_C_COMPILER=${MPICC} -DMPI_CXX_COMPILER=${MPICXX} -DMPI_Fortran_COMPILER=${MPIFC} -DMPIEXEC=${MPIEXEC} -DMPIEXEC_EXECUTABLE=${MPIEXEC} -DGEOSX_TPL_DIR:PATH=/home/geosx/thirdPartyLibs/install-default-release -DENABLE_SPHINX:BOOL=OFF -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} /home/geosx/GEOSX_repo/src ; make ; make test'





stages:
  - build

jobs:
  include:
    - stage: build
      os: osx
      osx_image: xcode10.2
      before_script:
      - brew install openmpi > /dev/null 2>&1
      - brew install git-lfs > /dev/null 2>&1
      - git lfs install
      - git lfs pull
      script: 
      - python ${TRAVIS_BUILD_DIR}/scripts/config-build.py -hc ${TRAVIS_BUILD_DIR}/host-configs/darwin-clang.cmake -bt Release -DNUM_PROC=2 -DENABLE_CALIPER:BOOL=OFF
      - cd build-darwin-clang-release
      - make
    - stage: deploy
      script:
      - echo DEPLOY OSX

    - <<: *linuxBuild
      compiler: gcc7-ubuntu18
      env:
      - IMG=gcc7-ubuntu18
      - CMAKE_BUILD_TYPE=Release
#    - <<: *linuxDeploy
#      compiler: gcc7-ubuntu18
#      env:
#      - IMG=gcc7-ubuntu18

    - <<: *linuxBuild    
      compiler: gcc8-ubuntu18
      env:
      - IMG=gcc8-ubuntu18
      - CMAKE_BUILD_TYPE=Release
#    - <<: *linuxDeploy
#      compiler: gcc8-ubuntu18
#      env:
#      - IMG=gcc8-ubuntu18

    - <<: *linuxBuild
      compiler: clang6-LC-toss3
      env:
      - IMG=clang6-LC-toss3
      - CMAKE_BUILD_TYPE=Release
#    - <<: *linuxDeploy
#      compiler: clang6-LC-toss3
#      env:
#      - IMG=clang6-LC-toss3

    - <<: *linuxBuild
      compiler: clang7-LC-toss3
      env:
      - IMG=clang7-LC-toss3  
      - CMAKE_BUILD_TYPE=Release
#    - <<: *linuxDeploy
#      compiler: clang7-LC-toss3
#      env:
#      - IMG=clang7-LC-toss3
  

    
