language: minimal

geosx_osx_build: &geosx_osx_build
  stage: build
  os: osx
  osx_image: xcode10.2
  install:
    # It is not immediate to get the version of open-mpi we want.
    # We use the specific revision of the openmpi 4.0.2 upgrade.
    # (The revision is identified through its git commit hash.)
  - BREW_HASH=1e1370e0fddf2970695ab2e3b12ed5f24eb71819
  - BREW_URL=https://raw.github.com/Homebrew/homebrew-core/${BREW_HASH}
  - brew install ${BREW_URL}/Formula/open-mpi.rb > /dev/null 2>&1
  - brew install ${BREW_URL}/Formula/git-lfs.rb > /dev/null 2>&1
  before_script:
  - git lfs install
  - git lfs pull
  script:
  - python scripts/config-build.py -hc ${TRAVIS_BUILD_DIR}/host-configs/darwin-clang.cmake -bt Release -DNUM_PROC=$(nproc) -DENABLE_CALIPER:BOOL=OFF -DENABLE_DOXYGEN:BOOL=OFF
  - cd build-darwin-clang-release
  - make
    # The deployment phase is done here because the `deploy` stage of travis does not work for PR.
    # And `after_success` does not fail the build in case of error.
  - pip install -q google-cloud-storage
  - cd ${TRAVIS_BUILD_DIR}
  - openssl aes-256-cbc -K $encrypted_5ac030ea614b_key -iv $encrypted_5ac030ea614b_iv -in geosx-key.json.enc -out geosx-key.json -d
  - python macosx_TPL_mngt.py install-darwin-clang-release geosx-key.json ${BREW_HASH}

geosx_linux_build: &geosx_linux_build
  stage: build
  os: linux
  services: docker
  script:
    # This script will build and push a DOCKER_REPOSITORY:DOCKER_TAG image build from DOCKERFILE with DOCKER_COMPILER_BUILD_ARG build arguments.
    # Unlike DOCKER_TAG, these variables shall be defined by the "yaml derived classes" in a stage prior to `script` stage.
  - DOCKER_TAG=${TRAVIS_PULL_REQUEST}-${TRAVIS_BUILD_NUMBER}
  - docker build
    --build-arg ${DOCKER_COMPILER_BUILD_ARG}
    --tag ${DOCKER_REPOSITORY}:${DOCKER_TAG}
    --file ${DOCKERFILE}
    --label "org.opencontainers.image.created=$(date --rfc-3339=seconds)"
    --label "org.opencontainers.image.source=https://github.com/GEOSX/thirdPartyLibs"    
    --label "org.opencontainers.image.revision=${TRAVIS_COMMIT}"
    --label "org.opencontainers.image.title=Building environment for GEOSX"
    .
    # The deployment phase is done here because the `deploy` stage of travis does not work for PR.
    # And `after_success` does not fail the build in case of error.
  - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
  - docker push ${DOCKER_REPOSITORY}:${DOCKER_TAG}

geosx_ubuntu_build: &geosx_ubuntu_build
  # The ubuntu_build relies on the GCC_MAJOR_VERSION env variable to select the compiler version.
  # It's the role of the so-called "yaml derived class" to define it.
  <<: *geosx_linux_build
  before_script:
    # We save memory for the docker context
  - echo .git > .dockerignore
  - echo "**/*.rpm" >> .dockerignore
    # Defining what we are going to build in the `script` stage.
  - DOCKER_REPOSITORY=geosx/ubuntu18.04-gcc${GCC_MAJOR_VERSION}
  - DOCKER_COMPILER_BUILD_ARG="GCC_MAJOR_VERSION=${GCC_MAJOR_VERSION}"
  - DOCKERFILE=docker/gcc-ubuntu1804/Dockerfile

geosx_centos_build: &geosx_centos_build
  <<: *geosx_linux_build
  before_script:
    # This .dockerignore can be slightly improved for rpms
  - echo .git > .dockerignore
    # Defining what we are going to build in the `script` stage.
  - DOCKER_REPOSITORY=geosx/centos7.5.1804-clang${CLANG_VERSION}
  - DOCKER_COMPILER_BUILD_ARG="CLANG_VERSION=${CLANG_VERSION}"
  - DOCKERFILE=docker/clang-LC-toss3/Dockerfile

geosx_clang_cuda_build: &geosx_clang_cuda_build
  <<: *geosx_linux_build
  before_script:
  - echo .git > .dockerignore
  - DOCKER_REPOSITORY=geosx/ubuntu18.04-clang8.0.0-cuda10.1.243
  - DOCKER_COMPILER_BUILD_ARG="CUDA_VERSION=${CUDA_VERSION}"
  - DOCKERFILE=docker/clang-cuda/Dockerfile

jobs:
  include:
  - <<: *geosx_osx_build
  - <<: *geosx_centos_build
    env: CLANG_VERSION=6.0.1
  - <<: *geosx_centos_build
    env: CLANG_VERSION=7.0.0
  - <<: *geosx_ubuntu_build
    env: GCC_MAJOR_VERSION=7
  - <<: *geosx_ubuntu_build
    env: GCC_MAJOR_VERSION=8
  - <<: *geosx_clang_cuda_build
    env: CUDA_VERSION=10.1.243
