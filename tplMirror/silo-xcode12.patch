Index: codec.h
===================================================================
--- codec.h	(revision 809)
+++ codec.h	(working copy)
@@ -16,13 +16,13 @@
 // identity map for integer arithmetic
 template <typename T, unsigned width>
 struct PCmap<T, width, T> {
-  typedef T DOMAIN;
-  typedef T RANGE;
+  typedef T FPZIP_Domain_t;
+  typedef T FPZIP_Range_t;
   static const unsigned bits = width;
   static const T        mask = ~T(0) >> (bitsizeof(T) - bits);
-  RANGE forward(DOMAIN d) const { return d & mask; }
-  DOMAIN inverse(RANGE r) const { return r & mask; }
-  DOMAIN identity(DOMAIN d) const { return d & mask; }
+  FPZIP_Range_t forward(FPZIP_Domain_t d) const { return d & mask; }
+  FPZIP_Domain_t inverse(FPZIP_Range_t r) const { return r & mask; }
+  FPZIP_Domain_t identity(FPZIP_Domain_t d) const { return d & mask; }
 };
 #endif
 
Index: pcdecoder.inl
===================================================================
--- pcdecoder.inl	(revision 809)
+++ pcdecoder.inl	(working copy)
@@ -19,7 +19,7 @@
 T PCdecoder<T, M, false>::decode(T pred, unsigned context)
 {
   // map type T to unsigned integer type
-  typedef typename M::RANGE U;
+  typedef typename M::FPZIP_Range_t U;
   U p = map.forward(pred);
   // entropy decode d = r - p
   U r = p + rd->decode(rm[context]) - bias;
@@ -46,7 +46,7 @@
 template <typename T, class M>
 T PCdecoder<T, M, true>::decode(T pred, unsigned context)
 {
-  typedef typename M::RANGE U;
+  typedef typename M::FPZIP_Range_t U;
   unsigned s = rd->decode(rm[context]);
   if (s > bias) {      // underprediction
     unsigned k = s - bias - 1;
Index: pcencoder.inl
===================================================================
--- pcencoder.inl	(revision 809)
+++ pcencoder.inl	(working copy)
@@ -18,7 +18,7 @@
 T PCencoder<T, M, false>::encode(T real, T pred, unsigned context)
 {
   // map type T to unsigned integer type
-  typedef typename M::RANGE U;
+  typedef typename M::FPZIP_Range_t U;
   U r = map.forward(real);
   U p = map.forward(pred);
   // entropy encode d = r - p
@@ -47,7 +47,7 @@
 T PCencoder<T, M, true>::encode(T real, T pred, unsigned context)
 {
   // map type T to unsigned integer type
-  typedef typename M::RANGE U;
+  typedef typename M::FPZIP_Range_t U;
   U r = map.forward(real);
   U p = map.forward(pred);
   // compute (-1)^s (2^k + m) = r - p, entropy code (s, k),
Index: pcmap.h
===================================================================
--- pcmap.h	(revision 809)
+++ pcmap.h	(working copy)
@@ -14,53 +14,53 @@
 // specialized for integer-to-integer map
 template <typename T, unsigned width>
 struct PCmap<T, width, void> {
-  typedef T DOMAIN;
-  typedef T RANGE;
-  static const unsigned bits = width;                    // RANGE bits
-  static const unsigned shift = bitsizeof(RANGE) - bits; // DOMAIN\RANGE bits
-  RANGE forward(DOMAIN d) const { return d >> shift; }
-  DOMAIN inverse(RANGE r) const { return r << shift; }
-  DOMAIN identity(DOMAIN d) const { return inverse(forward(d)); }
+  typedef T FPZIP_Domain_t;
+  typedef T FPZIP_Range_t;
+  static const unsigned bits = width;                    // FPZIP_Range_t bits
+  static const unsigned shift = bitsizeof(FPZIP_Range_t) - bits; // FPZIP_Domain_t\FPZIP_Range_t bits
+  FPZIP_Range_t forward(FPZIP_Domain_t d) const { return d >> shift; }
+  FPZIP_Domain_t inverse(FPZIP_Range_t r) const { return r << shift; }
+  FPZIP_Domain_t identity(FPZIP_Domain_t d) const { return inverse(forward(d)); }
 };
 
 // specialized for float type
 template <unsigned width>
 struct PCmap<float, width, void> {
-  typedef float    DOMAIN;
-  typedef unsigned RANGE;
+  typedef float    FPZIP_Domain_t;
+  typedef unsigned FPZIP_Range_t;
   union UNION {
-    UNION(DOMAIN d) : d(d) {}
-    UNION(RANGE r) : r(r) {}
-    DOMAIN d;
-    RANGE r;
+    UNION(FPZIP_Domain_t d) : d(d) {}
+    UNION(FPZIP_Range_t r) : r(r) {}
+    FPZIP_Domain_t d;
+    FPZIP_Range_t r;
   };
-  static const unsigned bits = width;                    // RANGE bits
-  static const unsigned shift = bitsizeof(RANGE) - bits; // DOMAIN\RANGE bits
-  RANGE fcast(DOMAIN d) const;
-  DOMAIN icast(RANGE r) const;
-  RANGE forward(DOMAIN d) const;
-  DOMAIN inverse(RANGE r) const;
-  DOMAIN identity(DOMAIN d) const;
+  static const unsigned bits = width;                    // FPZIP_Range_t bits
+  static const unsigned shift = bitsizeof(FPZIP_Range_t) - bits; // FPZIP_Domain_t\FPZIP_Range_t bits
+  FPZIP_Range_t fcast(FPZIP_Domain_t d) const;
+  FPZIP_Domain_t icast(FPZIP_Range_t r) const;
+  FPZIP_Range_t forward(FPZIP_Domain_t d) const;
+  FPZIP_Domain_t inverse(FPZIP_Range_t r) const;
+  FPZIP_Domain_t identity(FPZIP_Domain_t d) const;
 };
 
 // specialized for double type
 template <unsigned width>
 struct PCmap<double, width, void> {
-  typedef double             DOMAIN;
-  typedef unsigned long long RANGE;
+  typedef double             FPZIP_Domain_t;
+  typedef unsigned long long FPZIP_Range_t;
   union UNION {
-    UNION(DOMAIN d) : d(d) {}
-    UNION(RANGE r) : r(r) {}
-    DOMAIN d;
-    RANGE r;
+    UNION(FPZIP_Domain_t d) : d(d) {}
+    UNION(FPZIP_Range_t r) : r(r) {}
+    FPZIP_Domain_t d;
+    FPZIP_Range_t r;
   };
-  static const unsigned bits = width;                    // RANGE bits
-  static const unsigned shift = bitsizeof(RANGE) - bits; // DOMAIN\RANGE bits
-  RANGE fcast(DOMAIN d) const;
-  DOMAIN icast(RANGE r) const;
-  RANGE forward(DOMAIN d) const;
-  DOMAIN inverse(RANGE r) const;
-  DOMAIN identity(DOMAIN d) const;
+  static const unsigned bits = width;                    // FPZIP_Range_t bits
+  static const unsigned shift = bitsizeof(FPZIP_Range_t) - bits; // FPZIP_Domain_t\FPZIP_Range_t bits
+  FPZIP_Range_t fcast(FPZIP_Domain_t d) const;
+  FPZIP_Domain_t icast(FPZIP_Range_t r) const;
+  FPZIP_Range_t forward(FPZIP_Domain_t d) const;
+  FPZIP_Domain_t inverse(FPZIP_Range_t r) const;
+  FPZIP_Domain_t identity(FPZIP_Domain_t d) const;
 };
 
 #include "pcmap.inl"
Index: pcmap.inl
===================================================================
--- pcmap.inl	(revision 809)
+++ pcmap.inl	(working copy)
@@ -3,12 +3,12 @@
 PCmap<float, width, void>::fcast(float d) const
 {
 #ifdef WITH_REINTERPRET_CAST
-  return reinterpret_cast<const RANGE&>(d);
+  return reinterpret_cast<const FPZIP_Range_t&>(d);
 #elif defined WITH_UNION
   UNION shared(d);
   return shared.r;
 #else
-  RANGE r;
+  FPZIP_Range_t r;
   memcpy(&r, &d, sizeof(r));
   return r;
 #endif
@@ -19,12 +19,12 @@
 PCmap<float, width, void>::icast(unsigned r) const
 {
 #ifdef WITH_REINTERPRET_CAST
-  return reinterpret_cast<const DOMAIN&>(r);
+  return reinterpret_cast<const FPZIP_Domain_t&>(r);
 #elif defined WITH_UNION
   UNION shared(r);
   return shared.d;
 #else
-  DOMAIN d;
+  FPZIP_Domain_t d;
   memcpy(&d, &r, sizeof(d));
   return d;
 #endif
@@ -37,7 +37,7 @@
 unsigned
 PCmap<float, width, void>::forward(float d) const
 {
-  RANGE r = fcast(d);
+  FPZIP_Range_t r = fcast(d);
   r = ~r;
   r >>= shift;
   r ^= -(r >> (bits - 1)) >> (shift + 1);
@@ -61,7 +61,7 @@
 float
 PCmap<float, width, void>::identity(float d) const
 {
-  RANGE r = fcast(d);
+  FPZIP_Range_t r = fcast(d);
   r >>= shift;
   r <<= shift;
   return icast(r);
@@ -72,12 +72,12 @@
 PCmap<double, width, void>::fcast(double d) const
 {
 #ifdef WITH_REINTERPRET_CAST
-  return reinterpret_cast<const RANGE&>(d);
+  return reinterpret_cast<const FPZIP_Range_t&>(d);
 #elif defined WITH_UNION
   UNION shared(d);
   return shared.r;
 #else
-  RANGE r;
+  FPZIP_Range_t r;
   memcpy(&r, &d, sizeof(r));
   return r;
 #endif
@@ -88,12 +88,12 @@
 PCmap<double, width, void>::icast(unsigned long long r) const
 {
 #ifdef WITH_REINTERPRET_CAST
-  return reinterpret_cast<const DOMAIN&>(r);
+  return reinterpret_cast<const FPZIP_Domain_t&>(r);
 #elif defined WITH_UNION
   UNION shared(r);
   return shared.d;
 #else
-  DOMAIN d;
+  FPZIP_Domain_t d;
   memcpy(&d, &r, sizeof(d));
   return d;
 #endif
@@ -106,7 +106,7 @@
 unsigned long long
 PCmap<double, width, void>::forward(double d) const
 {
-  RANGE r = fcast(d);
+  FPZIP_Range_t r = fcast(d);
   r = ~r;
   r >>= shift;
   r ^= -(r >> (bits - 1)) >> (shift + 1);
@@ -130,7 +130,7 @@
 double
 PCmap<double, width, void>::identity(double d) const
 {
-  RANGE r = fcast(d);
+  FPZIP_Range_t r = fcast(d);
   r >>= shift;
   r <<= shift;
   return icast(r);
Index: read.cpp
===================================================================
--- read.cpp	(revision 809)
+++ read.cpp	(working copy)
@@ -103,7 +103,7 @@
 {
   // initialize decompressor
   typedef PCmap<T, bits> TMAP;
-  typedef typename TMAP::RANGE U;
+  typedef typename TMAP::FPZIP_Range_t U;
   typedef PCmap<U, bits, U> UMAP;
   RCmodel* rm = new RCqsmodel(false, PCdecoder<U, UMAP>::symbols);
   PCdecoder<U, UMAP>* fd = new PCdecoder<U, UMAP>(rd, &rm);
Index: write.cpp
===================================================================
--- write.cpp	(revision 809)
+++ write.cpp	(working copy)
@@ -103,7 +103,7 @@
 {
   // initialize compressor
   typedef PCmap<T, bits> TMAP;
-  typedef typename TMAP::RANGE U;
+  typedef typename TMAP::FPZIP_Range_t U;
   typedef PCmap<U, bits, U> UMAP;
   RCmodel* rm = new RCqsmodel(true, PCencoder<U, UMAP>::symbols);
   PCencoder<U, UMAP>* fe = new PCencoder<U, UMAP>(re, &rm);
