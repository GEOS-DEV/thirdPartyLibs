diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 765c490e9..647ba623d 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -82,7 +82,6 @@ set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeR
 
 # Set debug flags based on compiler
 if(CMAKE_BUILD_TYPE STREQUAL "Debug")
-  set(HYPRE_DEBUG ON CACHE INTERNAL "")
   if(CMAKE_C_COMPILER_ID MATCHES "Intel")
     target_compile_options(${PROJECT_NAME} PRIVATE
       $<$<COMPILE_LANGUAGE:C>:-O0 -Wall -Wremarks>
@@ -149,7 +148,6 @@ set_hypre_option(BASE HYPRE_ENABLE_LTO                  "Use Link-Time Optimizat
 set_hypre_option(BASE HYPRE_ENABLE_PRINT_ERRORS         "Print HYPRE errors" OFF)
 set_hypre_option(SKIP HYPRE_ENABLE_TIMING               "Use HYPRE timing routines" OFF)
 set_hypre_option(SKIP HYPRE_ENABLE_STRICT_CHECKING      "Use strict error checking (Sequential only)" OFF)
-set_hypre_option(SKIP HYPRE_ENABLE_MEMORY_TRACKER       "Use internal memory tracker (Debug only)" OFF)
 set_hypre_option(BASE HYPRE_ENABLE_TEST_USING_HOST      "Execute tests on host (CPU)" OFF)
 set_hypre_option(BASE HYPRE_ENABLE_HOST_MEMORY          "Use host memory" ON)
 set_hypre_option(BASE HYPRE_BUILD_EXAMPLES              "Build examples" OFF)
@@ -233,7 +231,6 @@ set_internal_hypre_option("" TEST_USING_HOST)
 set_internal_hypre_option("" PRINT_ERRORS)
 set_internal_hypre_option(USING HYPRE_BLAS)
 set_internal_hypre_option(USING HYPRE_LAPACK)
-set_internal_hypre_option(USING MEMORY_TRACKER)
 set_internal_hypre_option(USING HOPSCOTCH)
 set_internal_hypre_option(USING GPU_AWARE_MPI)
 set_internal_hypre_option(USING GPU_STREAMS)
diff --git a/src/IJ_mv/F90_HYPRE_IJMatrix.c b/src/IJ_mv/F90_HYPRE_IJMatrix.c
index f0c14efb6..d7c4ead23 100644
--- a/src/IJ_mv/F90_HYPRE_IJMatrix.c
+++ b/src/IJ_mv/F90_HYPRE_IJMatrix.c
@@ -294,8 +294,8 @@ hypre_F90_IFACE(hypre_ijmatrixgetglobalinfo, HYPRE_IJMATRIXGETGLOBALINFO)
   hypre_F90_BigInt *global_num_nonzeros,
   hypre_F90_Int *ierr    )
 {
-   *ierr = (hypre_F90_Int)
-           ( HYPRE_IJMatrixGetGlobalInfo(
+  *ierr = (hypre_F90_Int)
+          ( HYPRE_IJMatrixGetGlobalInfo(
                 hypre_F90_PassObj (HYPRE_IJMatrix, matrix),
                 hypre_F90_PassBigIntRef (global_num_rows),
                 hypre_F90_PassBigIntRef (global_num_cols),
diff --git a/src/IJ_mv/HYPRE_IJMatrix.c b/src/IJ_mv/HYPRE_IJMatrix.c
index 98389c005..3cc515358 100644
--- a/src/IJ_mv/HYPRE_IJMatrix.c
+++ b/src/IJ_mv/HYPRE_IJMatrix.c
@@ -1012,8 +1012,7 @@ HYPRE_IJMatrixGetValuesAndZeroOut( HYPRE_IJMatrix matrix,
    if (exec == HYPRE_EXEC_DEVICE)
    {
       /* TODO: add device implementation */
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC,
-                        "HYPRE_IJMatrixGetValuesAndZeroOut not implemented for GPUs!");
+      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "HYPRE_IJMatrixGetValuesAndZeroOut not implemented for GPUs!");
 
       if ( hypre_IJMatrixObjectType(ijmatrix) == HYPRE_PARCSR )
       {
diff --git a/src/IJ_mv/HYPRE_IJVector.c b/src/IJ_mv/HYPRE_IJVector.c
index 178f95650..a909596a9 100644
--- a/src/IJ_mv/HYPRE_IJVector.c
+++ b/src/IJ_mv/HYPRE_IJVector.c
@@ -242,36 +242,6 @@ HYPRE_IJVectorSetData(HYPRE_IJVector  vector,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * HYPRE_IJVectorSetTags
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_IJVectorSetTags(HYPRE_IJVector  vector,
-                      HYPRE_Int       owns_tags,
-                      HYPRE_Int       num_tags,
-                      HYPRE_Int      *tags)
-{
-   hypre_IJVector *vec = (hypre_IJVector *) vector;
-
-   if (!vec)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   if ( hypre_IJVectorObjectType(vec) == HYPRE_PARCSR )
-   {
-      hypre_IJVectorSetTagsPar(vec, owns_tags, num_tags, tags);
-   }
-   else
-   {
-      hypre_error_in_arg(1);
-   }
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * HYPRE_IJVectorInitialize
  *--------------------------------------------------------------------------*/
diff --git a/src/IJ_mv/HYPRE_IJ_mv.h b/src/IJ_mv/HYPRE_IJ_mv.h
index 9701c00e0..1295faf69 100644
--- a/src/IJ_mv/HYPRE_IJ_mv.h
+++ b/src/IJ_mv/HYPRE_IJ_mv.h
@@ -529,24 +529,6 @@ HYPRE_Int HYPRE_IJVectorInitializeShell(HYPRE_IJVector vector);
 HYPRE_Int HYPRE_IJVectorSetData(HYPRE_IJVector  vector,
                                 HYPRE_Complex  *data);
 
-/**
- * (Optional) Set an array of tags for the vector.
- *
- * @param vector The vector object.
- * @param owns_tags Whether the vector owns the tags.
- *         If true, vector will allocate and copy tags.
- *         If false, vector will just point to the input tags array.
- * @param num_tags The number of tags.
- * @param tags The tags array. Must reside in the same memory location as the
- *         vector data (e.g., if vector is on GPU, tags must also be on GPU).
- *
- * Not collective.
- **/
-HYPRE_Int HYPRE_IJVectorSetTags(HYPRE_IJVector  vector,
-                                HYPRE_Int       owns_tags,
-                                HYPRE_Int       num_tags,
-                                HYPRE_Int      *tags);
-
 /**
  * Prepare a vector object for setting coefficient values. This
  * routine will also re-initialize an already assembled vector,
diff --git a/src/IJ_mv/IJVector_parcsr.c b/src/IJ_mv/IJVector_parcsr.c
index 2ec22d824..13c4ff8c7 100644
--- a/src/IJ_mv/IJVector_parcsr.c
+++ b/src/IJ_mv/IJVector_parcsr.c
@@ -119,25 +119,6 @@ hypre_IJVectorSetParData(hypre_IJVector *vector,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * hypre_IJVectorSetTagsPar
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_IJVectorSetTagsPar(hypre_IJVector *vector,
-                         HYPRE_Int       owns_tags,
-                         HYPRE_Int       num_tags,
-                         HYPRE_Int      *tags)
-{
-   hypre_ParVector *par_vector = (hypre_ParVector*) hypre_IJVectorObject(vector);
-
-   hypre_ParVectorSetOwnsTags(par_vector, owns_tags);
-   hypre_ParVectorSetNumTags(par_vector, num_tags);
-   hypre_ParVectorSetTags(par_vector, hypre_IJVectorMemoryLocation(vector), tags);
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_IJVectorInitializePar
  *--------------------------------------------------------------------------*/
diff --git a/src/IJ_mv/_hypre_IJ_mv.h b/src/IJ_mv/_hypre_IJ_mv.h
index fc110dcf8..0846f14bd 100644
--- a/src/IJ_mv/_hypre_IJ_mv.h
+++ b/src/IJ_mv/_hypre_IJ_mv.h
@@ -526,8 +526,6 @@ HYPRE_Int hypre_IJVectorCreatePar ( hypre_IJVector *vector, HYPRE_BigInt *IJpart
 HYPRE_Int hypre_IJVectorDestroyPar ( hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorInitializeParShell (hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorSetParData( hypre_IJVector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_IJVectorSetTagsPar( hypre_IJVector *vector, HYPRE_Int owns_tags,
-                                    HYPRE_Int num_tags, HYPRE_Int *tags );
 HYPRE_Int hypre_IJVectorInitializePar ( hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorInitializePar_v2(hypre_IJVector *vector,
                                          HYPRE_MemoryLocation memory_location);
diff --git a/src/IJ_mv/protos.h b/src/IJ_mv/protos.h
index a206e45c1..c5e8ff4a8 100644
--- a/src/IJ_mv/protos.h
+++ b/src/IJ_mv/protos.h
@@ -154,8 +154,6 @@ HYPRE_Int hypre_IJVectorCreatePar ( hypre_IJVector *vector, HYPRE_BigInt *IJpart
 HYPRE_Int hypre_IJVectorDestroyPar ( hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorInitializeParShell (hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorSetParData( hypre_IJVector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_IJVectorSetTagsPar( hypre_IJVector *vector, HYPRE_Int owns_tags,
-                                    HYPRE_Int num_tags, HYPRE_Int *tags );
 HYPRE_Int hypre_IJVectorInitializePar ( hypre_IJVector *vector );
 HYPRE_Int hypre_IJVectorInitializePar_v2(hypre_IJVector *vector,
                                          HYPRE_MemoryLocation memory_location);
diff --git a/src/config/HYPRE_config.h.cmake.in b/src/config/HYPRE_config.h.cmake.in
index 1cec66669..af8ac492c 100644
--- a/src/config/HYPRE_config.h.cmake.in
+++ b/src/config/HYPRE_config.h.cmake.in
@@ -65,9 +65,6 @@
 /* Use internal LAPACK library */
 #cmakedefine HYPRE_USING_HYPRE_LAPACK 1
 
-/* Use internal memory tracker */
-#cmakedefine HYPRE_USING_MEMORY_TRACKER 1
-
 /* Print HYPRE errors */
 #cmakedefine HYPRE_PRINT_ERRORS 1
 
diff --git a/src/config/cmake/HYPRE_SetupHIPToolkit.cmake b/src/config/cmake/HYPRE_SetupHIPToolkit.cmake
index 656b5c8f5..6d8848642 100644
--- a/src/config/cmake/HYPRE_SetupHIPToolkit.cmake
+++ b/src/config/cmake/HYPRE_SetupHIPToolkit.cmake
@@ -144,27 +144,16 @@ find_and_add_rocm_library(rocrand)
 find_and_add_rocm_library(rocsolver)
 
 if(HYPRE_ENABLE_GPU_PROFILING)
-  set(HYPRE_USING_ROCTX ON CACHE BOOL "" FORCE)
+  set(HYPRE_USING_ROCTRACER ON CACHE BOOL "" FORCE)
   find_library(ROCTRACER_LIBRARY
      NAMES libroctracer64.so
      PATHS ${HIP_PATH}/lib ${HIP_PATH}/lib64
      NO_DEFAULT_PATH)
   if(ROCTRACER_LIBRARY)
-    message(STATUS "ROCTracer library found in ${ROCTRACER_LIBRARY}")
+    message(STATUS "ROCm tracer library found in ${ROCTRACER_LIBRARY}")
     list(APPEND ROCM_LIBS ${ROCTRACER_LIBRARY})
   else()
-    message(WARNING "ROCTracer library not found. GPU profiling may not work correctly.")
-  endif()
-
-  find_library(ROCTX_LIBRARY
-     NAMES libroctx64.so
-     PATHS ${HIP_PATH}/lib ${HIP_PATH}/lib64
-     NO_DEFAULT_PATH)
-  if(ROCTX_LIBRARY)
-    message(STATUS "ROC-TX library found in ${ROCTX_LIBRARY}")
-    list(APPEND ROCM_LIBS ${ROCTX_LIBRARY})
-  else()
-    message(WARNING "ROC-TX library not found. GPU profiling may not work correctly.")
+    message(WARNING "ROCm tracer library not found. GPU profiling may not work correctly.")
   endif()
 endif()
 
diff --git a/src/config/configure.in b/src/config/configure.in
index a87dd0af4..77c2a736d 100644
--- a/src/config/configure.in
+++ b/src/config/configure.in
@@ -586,7 +586,7 @@ fi
 
 AC_ARG_WITH(cxxstandard,
 AS_HELP_STRING([--with-cxxstandard=val],
-               [User specifies c++ standard in val.]),
+               [User specifies c++ starndard in val.]),
 [hypre_cxxstd=$withval]
 )
 
diff --git a/src/configure b/src/configure
index 70d4b64d4..c530daa72 100755
--- a/src/configure
+++ b/src/configure
@@ -1592,7 +1592,7 @@ Optional Features:
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
-  --with-cxxstandard=val  User specifies c++ standard in val.
+  --with-cxxstandard=val  User specifies c++ starndard in val.
   --with-LD=ARG           Set linker to ARG. The environment variable 'LD'
                           will be overridden.
   --with-LDFLAGS=ARG      User can manually set linker flags. The 'LDFLAGS'
diff --git a/src/krylov/HYPRE_gmres.c b/src/krylov/HYPRE_gmres.c
index c596c638c..9612e466e 100644
--- a/src/krylov/HYPRE_gmres.c
+++ b/src/krylov/HYPRE_gmres.c
@@ -50,24 +50,6 @@ HYPRE_GMRESSolve( HYPRE_Solver solver,
    return ( hypre_GMRESSolve( solver, A, b, x ) );
 }
 
-/*--------------------------------------------------------------------------
- * HYPRE_GMRESSetRefSolution, HYPRE_GMRESSetRefSolution
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_GMRESSetRefSolution( HYPRE_Solver solver,
-                           HYPRE_Vector xref )
-{
-   return ( hypre_GMRESSetRefSolution( (void *) solver, (void *) xref ) );
-}
-
-HYPRE_Int
-HYPRE_GMRESGetRefSolution( HYPRE_Solver  solver,
-                           HYPRE_Vector *xref )
-{
-   return ( hypre_GMRESGetRefSolution( (void *) solver, (void **) xref ) );
-}
-
 /*--------------------------------------------------------------------------
  * HYPRE_GMRESSetKDim, HYPRE_GMRESGetKDim
  *--------------------------------------------------------------------------*/
@@ -335,3 +317,4 @@ HYPRE_Int HYPRE_GMRESGetResidual( HYPRE_Solver solver, void *residual )
    /* returns a pointer to the residual vector */
    return hypre_GMRESGetResidual( (void *) solver, (void **) residual );
 }
+
diff --git a/src/krylov/HYPRE_krylov.h b/src/krylov/HYPRE_krylov.h
index 8c9ce53e9..9b7cc3a2e 100644
--- a/src/krylov/HYPRE_krylov.h
+++ b/src/krylov/HYPRE_krylov.h
@@ -391,30 +391,6 @@ HYPRE_Int HYPRE_GMRESSetLogging(HYPRE_Solver solver,
 
 /**
  * (Optional) Set the amount of printing to do to the screen.
- *
- * @param solver The solver object
- * @param level The print level:
- *        - 0: no output
- *        - 1: print warnings
- *        - 2: print convergence history for the absolute and relative residual norms
- *        - 3: print absolute residual norms for each tag in multi-tag vectors
- *        - 4: print relative residual norms for each tag in multi-tag vectors,
- *             where each residual norm is divided by the norm of its corresponding
- *             tagged component of the right-hand side vector (RHS).
- *        - 5: print relative residual norms for each tag in multi-tag vectors,
- *             where the residual norm is divided by the norm of the original
- *             right-hand side vector (RHS).
- *        - 6: print convergence history for the absolute and relative error norms
- *        - 7: print absolute error norms for each tag in multi-tag vectors.
- *        - 8: print relative error norms for each tag in multi-tag vectors,
- *             where each residual norm is divided by the norm of its corresponding
- *             tagged component of the initial error vector.
- *        - 9: print relative error norms for each tag in multi-tag vectors,
- *             where the error norms are divided by the norm of the initial
- *             error vector.
- *
- *        Options 6-9 are mainly for debugging purposes as they require setting up
- *        a reference solution vector via \e HYPRE_GMRESSetRefSolution
  **/
 HYPRE_Int HYPRE_GMRESSetPrintLevel(HYPRE_Solver solver,
                                    HYPRE_Int    level);
@@ -505,18 +481,6 @@ HYPRE_Int HYPRE_GMRESGetPrintLevel(HYPRE_Solver  solver,
 HYPRE_Int HYPRE_GMRESGetConverged(HYPRE_Solver  solver,
                                   HYPRE_Int    *converged);
 
-/**
- * (Optional) Set a reference solution vector for error computation.
- **/
-HYPRE_Int HYPRE_GMRESSetRefSolution(HYPRE_Solver solver,
-                                    HYPRE_Vector xref);
-
-/**
- * Get the reference solution vector.
- **/
-HYPRE_Int HYPRE_GMRESGetRefSolution(HYPRE_Solver  solver,
-                                    HYPRE_Vector *xref);
-
 /**@}*/
 
 /*--------------------------------------------------------------------------
diff --git a/src/krylov/bicgstab.c b/src/krylov/bicgstab.c
index 8a62fc94b..42c5efc71 100644
--- a/src/krylov/bicgstab.c
+++ b/src/krylov/bicgstab.c
@@ -304,7 +304,7 @@ hypre_BiCGSTABSolve(void  *bicgstab_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
@@ -332,7 +332,7 @@ hypre_BiCGSTABSolve(void  *bicgstab_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/krylov/cgnr.c b/src/krylov/cgnr.c
index c54ade229..5fa53ffb1 100644
--- a/src/krylov/cgnr.c
+++ b/src/krylov/cgnr.c
@@ -246,7 +246,7 @@ hypre_CGNRSolve(void *cgnr_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
@@ -303,7 +303,7 @@ hypre_CGNRSolve(void *cgnr_vdata,
             for ieee_check self-equality works on all IEEE-compliant compilers/
             machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
             by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-            found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+            found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (logging > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
@@ -339,7 +339,7 @@ hypre_CGNRSolve(void *cgnr_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/krylov/cogmres.c b/src/krylov/cogmres.c
index 334bd2037..f4b12316c 100644
--- a/src/krylov/cogmres.c
+++ b/src/krylov/cogmres.c
@@ -382,7 +382,7 @@ hypre_COGMRESSolve(void  *cogmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
@@ -409,7 +409,7 @@ hypre_COGMRESSolve(void  *cogmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
diff --git a/src/krylov/flexgmres.c b/src/krylov/flexgmres.c
index 8a369da71..b8bad83c7 100644
--- a/src/krylov/flexgmres.c
+++ b/src/krylov/flexgmres.c
@@ -385,7 +385,7 @@ hypre_FlexGMRESSolve(void  *fgmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
@@ -412,7 +412,7 @@ hypre_FlexGMRESSolve(void  *fgmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
diff --git a/src/krylov/gmres.c b/src/krylov/gmres.c
index 63db8a0bb..dec837945 100644
--- a/src/krylov/gmres.c
+++ b/src/krylov/gmres.c
@@ -31,8 +31,7 @@ hypre_GMRESFunctionsCreate(
    HYPRE_Int    (*Matvec)        ( void *matvec_data, HYPRE_Complex alpha, void *A,
                                    void *x, HYPRE_Complex beta, void *y ),
    HYPRE_Int    (*MatvecDestroy) ( void *matvec_data ),
-   HYPRE_Int    (*InnerProd)     ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                   HYPRE_Complex **iprod_ptr ),
+   HYPRE_Real   (*InnerProd)     ( void *x, void *y ),
    HYPRE_Int    (*CopyVector)    ( void *x, void *y ),
    HYPRE_Int    (*ClearVector)   ( void *x ),
    HYPRE_Int    (*ScaleVector)   ( HYPRE_Complex alpha, void *x ),
@@ -99,8 +98,6 @@ hypre_GMRESCreate( hypre_GMRESFunctions *gmres_functions )
    (gmres_data -> r)              = NULL;
    (gmres_data -> w)              = NULL;
    (gmres_data -> w_2)            = NULL;
-   (gmres_data -> w_3)            = NULL;
-   (gmres_data -> xref)           = NULL;
    (gmres_data -> matvec_data)    = NULL;
    (gmres_data -> norms)          = NULL;
    (gmres_data -> log_file_name)  = NULL;
@@ -124,7 +121,7 @@ hypre_GMRESDestroy( void *gmres_vdata )
    if (gmres_data)
    {
       hypre_GMRESFunctions *gmres_functions = gmres_data->functions;
-      if ( (gmres_data -> logging > 0) || (gmres_data->print_level) > 0 )
+      if ( (gmres_data->logging > 0) || (gmres_data->print_level) > 0 )
       {
          if ( (gmres_data -> norms) != NULL )
          {
@@ -137,11 +134,19 @@ hypre_GMRESDestroy( void *gmres_vdata )
          (*(gmres_functions->MatvecDestroy))(gmres_data -> matvec_data);
       }
 
-      /* Destroy work vectors */
-      (*(gmres_functions->DestroyVector))(gmres_data -> r);
-      (*(gmres_functions->DestroyVector))(gmres_data -> w);
-      (*(gmres_functions->DestroyVector))(gmres_data -> w_2);
-      (*(gmres_functions->DestroyVector))(gmres_data -> w_3);
+      if ( (gmres_data -> r) != NULL )
+      {
+         (*(gmres_functions->DestroyVector))(gmres_data -> r);
+      }
+      if ( (gmres_data -> w) != NULL )
+      {
+         (*(gmres_functions->DestroyVector))(gmres_data -> w);
+      }
+      if ( (gmres_data -> w_2) != NULL )
+      {
+         (*(gmres_functions->DestroyVector))(gmres_data -> w_2);
+      }
+
 
       if ( (gmres_data -> p) != NULL )
       {
@@ -228,15 +233,6 @@ hypre_GMRESSetup( void *gmres_vdata,
       }
    }
 
-   /* Additional work vector for computing individual function (DOF) residuals */
-   if ((gmres_data -> print_level) > 2 || (gmres_data -> xref))
-   {
-      if ((gmres_data -> w_3) == NULL)
-      {
-         (gmres_data -> w_3) = (*(gmres_functions->CreateVector))(b);
-      }
-   }
-
    if ((gmres_data -> matvec_data) == NULL)
    {
       (gmres_data -> matvec_data) = (*(gmres_functions->MatvecCreate))(A, x);
@@ -295,14 +291,9 @@ hypre_GMRESSolve(void  *gmres_vdata,
    void                 *matvec_data        = (gmres_data -> matvec_data);
    void                 *r                  = (gmres_data -> r);
    void                 *w                  = (gmres_data -> w);
-   void                 *xref               = (gmres_data -> xref);
 
-   /* note:
-    *   - w_2 is only allocated if rel_change = 1
-    *   - w_3 is only allocated if print_level > 2 or when xref is provided
-    */
+   /* note: w_2 is only allocated if rel_change = 1 */
    void                 *w_2                = (gmres_data -> w_2);
-   void                 *w_3                = (gmres_data -> w_3);
    void                **p                  = (gmres_data -> p);
 
    HYPRE_Int           (*precond)(void*, void*, void*, void*) = (gmres_functions -> precond);
@@ -316,15 +307,11 @@ hypre_GMRESSolve(void  *gmres_vdata,
 
    HYPRE_Int             break_value = 0;
    HYPRE_Int             i, j, k;
-   HYPRE_Real           *rs, **hh, *c, *s, *rs_2 = NULL, *rs_3 = NULL;
-   HYPRE_Int             tag, num_tags;
-   HYPRE_Complex        *iprod = NULL;
-   HYPRE_Complex        *biprod = NULL;
-   HYPRE_Complex        *xiprod = NULL;
+   HYPRE_Real           *rs, **hh, *c, *s, *rs_2 = NULL;
    HYPRE_Int             iter;
    HYPRE_Int             my_id, num_procs;
-   HYPRE_Real            epsilon, gamma, t;
-   HYPRE_Real            r_norm, b_norm, den_norm, x_norm, e_norm, w_norm;
+   HYPRE_Real            epsilon, gamma, t, r_norm, b_norm, den_norm, x_norm;
+   HYPRE_Real            w_norm;
 
    HYPRE_Real            epsmac = 1.e-16;
    HYPRE_Real            ieee_check = 0.;
@@ -363,10 +350,6 @@ hypre_GMRESSolve(void  *gmres_vdata,
    {
       rs_2 = hypre_CTAllocF(HYPRE_Real, k_dim + 1, gmres_functions, HYPRE_MEMORY_HOST);
    }
-   if (print_level > 2)
-   {
-      rs_3 = hypre_CTAllocF(HYPRE_Real, k_dim + 1, gmres_functions, HYPRE_MEMORY_HOST);
-   }
    hh = hypre_CTAllocF(HYPRE_Real*, k_dim + 1, gmres_functions, HYPRE_MEMORY_HOST);
    for (i = 0; i < k_dim + 1; i++)
    {
@@ -375,22 +358,12 @@ hypre_GMRESSolve(void  *gmres_vdata,
 
    (*(gmres_functions->CopyVector))(b, p[0]);
 
-   /* Compute initial residual */
+   /* compute initial residual */
    (*(gmres_functions->Matvec))(matvec_data, -1.0, A, x, 1.0, p[0]);
 
-   (*(gmres_functions->InnerProd))(b, b, &num_tags, &biprod);
-   b_norm = hypre_sqrt(biprod[0]);
+   b_norm = hypre_sqrt((*(gmres_functions->InnerProd))(b, b));
    real_r_norm_old = b_norm;
 
-   /* Compute initial error when a reference solution is provided */
-   if (xref)
-   {
-      (*(gmres_functions->CopyVector))(x, w_3);
-      (*(gmres_functions->Axpy))(-1.0, xref, w_3);
-      (*(gmres_functions->InnerProd))(w_3, w_3, &num_tags, &xiprod);
-      e_norm = hypre_sqrt(xiprod[0]);
-   }
-
    /* Since it does not diminish performance, attempt to return an error flag
       and notify users when they supply bad input. */
    if (b_norm != 0.)
@@ -403,7 +376,7 @@ hypre_GMRESSolve(void  *gmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
@@ -418,8 +391,7 @@ hypre_GMRESSolve(void  *gmres_vdata,
       return hypre_error_flag;
    }
 
-   (*(gmres_functions->InnerProd))(p[0], p[0], &num_tags, &iprod);
-   r_norm = hypre_sqrt(iprod[0]);
+   r_norm = hypre_sqrt((*(gmres_functions->InnerProd))(p[0], p[0]));
    r_norm_0 = r_norm;
 
    /* Since it does not diminish performance, attempt to return an error flag
@@ -434,7 +406,7 @@ hypre_GMRESSolve(void  *gmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
@@ -449,47 +421,17 @@ hypre_GMRESSolve(void  *gmres_vdata,
       return hypre_error_flag;
    }
 
-   if (logging > 0 || print_level > 0)
+   if ( logging > 0 || print_level > 0)
    {
       norms[0] = r_norm;
-      if (!my_id && print_level > 0)
+      if ( print_level > 1 && my_id == 0 )
       {
          hypre_printf("L2 norm of b: %e\n", b_norm);
-         if (num_tags > 1)
-         {
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("L2 norm of b%*d: %e\n", hypre_ndigits(num_tags),
-                            tag, hypre_sqrt(biprod[tag + 1]));
-            }
-         }
          if (b_norm == 0.0)
          {
             hypre_printf("Rel_resid_norm actually contains the residual norm\n");
          }
-
          hypre_printf("Initial L2 norm of residual: %e\n", r_norm);
-         if (num_tags > 1)
-         {
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("Initial L2 norm of r%*d: %e\n", hypre_ndigits(num_tags),
-                            tag, hypre_sqrt(iprod[tag + 1]));
-            }
-         }
-
-         if (xref)
-         {
-            hypre_printf("Initial L2 norm of error: %e\n", e_norm);
-            if (num_tags > 1)
-            {
-               for (tag = 0; tag < num_tags; tag++)
-               {
-                  hypre_printf("Initial L2 norm of e%*d: %e\n", hypre_ndigits(num_tags),
-                               tag, hypre_sqrt(xiprod[tag + 1]));
-               }
-            }
-         }
       }
    }
    iter = 0;
@@ -505,6 +447,7 @@ hypre_GMRESSolve(void  *gmres_vdata,
       den_norm = r_norm;
    }
 
+
    /* convergence criteria: |r_i| <= max( a_tol, r_tol * den_norm)
       den_norm = |r_0| or |b|
       note: default for a_tol is 0.0, so relative residual criteria is used unless
@@ -515,93 +458,19 @@ hypre_GMRESSolve(void  *gmres_vdata,
 
    /* so now our stop criteria is |r_i| <= epsilon */
 
-   /* Print header for tag-wise residuals if this is the first iteration */
-   if (print_level > 1 && my_id == 0)
+   if ( print_level > 1 && my_id == 0 )
    {
-      hypre_printf("=============================================\n\n");
-      if (num_tags <= 1 || print_level == 2 || print_level > 9 || (!xref && print_level > 5))
+      if (b_norm > 0.0)
       {
-         if (b_norm > 0.0)
-         {
-            hypre_printf("Iters      resid.norm     conv.rate   rel.res.norm\n");
-            hypre_printf("-----    ------------    ----------   ------------\n");
-         }
-         else
-         {
-            hypre_printf("Iters      resid.norm     conv.rate\n");
-            hypre_printf("-----    ------------    ----------\n");
-         }
+         hypre_printf("=============================================\n\n");
+         hypre_printf("Iters     resid.norm     conv.rate  rel.res.norm\n");
+         hypre_printf("-----    ------------    ---------- ------------\n");
       }
-      else if (xref && (num_tags <= 1 || print_level == 6))
+      else
       {
-         if (e_norm > 0.0)
-         {
-            hypre_printf("Iters      error.norm     conv.rate   rel.err.norm\n");
-            hypre_printf("-----    ------------    ----------   ------------\n");
-         }
-         else
-         {
-            hypre_printf("Iters      error.norm     conv.rate\n");
-            hypre_printf("-----    ------------    ----------\n");
-         }
-      }
-      else if (num_tags > 1)
-      {
-         hypre_printf("  Iters ");
-         if (print_level == 3)
-         {
-            hypre_printf("            |r|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("           |r%d|_2", tag);
-            }
-         }
-         else if (print_level == 4)
-         {
-            hypre_printf("      |r|_2/|b|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("    |r%d|_2/|b%d|_2", tag, tag);
-            }
-         }
-         else if (print_level == 5)
-         {
-            hypre_printf("      |r|_2/|b|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("     |r%d|_2/|b|_2", tag);
-            }
-         }
-         else if (print_level == 7)
-         {
-            hypre_printf("            |e|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("           |e%d|_2", tag);
-            }
-         }
-         else if (print_level == 8)
-         {
-            hypre_printf("     |e|_2/|eI|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("   |e%d|_2/|eI%d|_2", tag, tag);
-            }
-         }
-         else if (print_level == 9)
-         {
-            hypre_printf("     |e|_2/|eI|_2");
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("    |e%d|_2/|eI|_2", tag);
-            }
-         }
-         hypre_printf("\n ------  ");
-         for (tag = 0; tag < num_tags + 1; tag++)
-         {
-            hypre_printf("   ------------- ");
-         }
-         hypre_printf("\n");
+         hypre_printf("=============================================\n\n");
+         hypre_printf("Iters     resid.norm     conv.rate\n");
+         hypre_printf("-----    ------------    ----------\n");
       }
    }
 
@@ -637,15 +506,19 @@ hypre_GMRESSolve(void  *gmres_vdata,
          {
             (*(gmres_functions->CopyVector))(b, r);
             (*(gmres_functions->Matvec))(matvec_data, -1.0, A, x, 1.0, r);
-            (*(gmres_functions->InnerProd))(r, r, &num_tags, &iprod);
-            r_norm = hypre_sqrt(iprod[0]);
-            if (r_norm <= epsilon)
+            r_norm = hypre_sqrt((*(gmres_functions->InnerProd))(r, r));
+            if (r_norm  <= epsilon)
             {
+               if ( print_level > 1 && my_id == 0)
+               {
+                  hypre_printf("\n\n");
+                  hypre_printf("Final L2 norm of residual: %e\n\n", r_norm);
+               }
                break;
             }
             else
             {
-               if (!my_id && print_level > 0)
+               if ( print_level > 0 && my_id == 0)
                {
                   hypre_printf("false convergence 1\n");
                }
@@ -665,23 +538,19 @@ hypre_GMRESSolve(void  *gmres_vdata,
          (*(gmres_functions->ClearVector))(r);
          precond(precond_data, A, p[i - 1], r);
          (*(gmres_functions->Matvec))(matvec_data, 1.0, A, r, 0.0, p[i]);
-
          /* modified Gram_Schmidt */
          for (j = 0; j < i; j++)
          {
-            (*(gmres_functions->InnerProd))(p[j], p[i], &num_tags, &iprod);
-            hh[j][i - 1] = iprod[0];
+            hh[j][i - 1] = (*(gmres_functions->InnerProd))(p[j], p[i]);
             (*(gmres_functions->Axpy))(-hh[j][i - 1], p[j], p[i]);
          }
-         (*(gmres_functions->InnerProd))(p[i], p[i], &num_tags, &iprod);
-         t = hypre_sqrt(iprod[0]);
+         t = hypre_sqrt((*(gmres_functions->InnerProd))(p[i], p[i]));
          hh[i][i - 1] = t;
          if (t != 0.0)
          {
             t = 1.0 / t;
             (*(gmres_functions->ScaleVector))(t, p[i]);
          }
-
          /* done with modified Gram_schmidt and Arnoldi step.
             update factorization of hh */
          for (j = 1; j < i; j++)
@@ -702,127 +571,30 @@ hypre_GMRESSolve(void  *gmres_vdata,
          rs[i] = -hh[i][i - 1] * rs[i - 1];
          rs[i] /=  gamma;
          rs[i - 1] = c[i - 1] * rs[i - 1];
-
          /* determine residual norm */
          hh[i - 1][i - 1] = s[i - 1] * hh[i][i - 1] + c[i - 1] * hh[i - 1][i - 1];
          r_norm = hypre_abs(rs[i]);
 
-         /* Print residual/error norms? */
-         if (print_level > 0)
+         /* print ? */
+         if ( print_level > 0 )
          {
             norms[iter] = r_norm;
-            if ((num_tags <= 1 && print_level > 1) || (print_level == 2) ||
-                (print_level > 9) || (!xref && print_level > 5))
+            if ( print_level > 1 && my_id == 0 )
             {
-               if (!my_id)
-               {
-                  if (b_norm > 0.0)
-                  {
-                     hypre_printf("%5d    %e      %f   %e\n", iter,
-                                  norms[iter], norms[iter] / norms[iter - 1],
-                                  norms[iter] / b_norm);
-                  }
-                  else
-                  {
-                     hypre_printf("%5d    %e      %f\n", iter, norms[iter],
-                                  norms[iter] / norms[iter - 1]);
-                  }
-               }
-            }
-            else if (num_tags > 1 && print_level > 2)
-            {
-               /* For each tag, we need to compute the residual norm based on the
-                  current GMRES state. The residual vector in GMRES is represented
-                  by rs[i] and the orthogonal basis vectors p[0...i] */
-
-               /* Copy rs values so we don't modify the original solution */
-               for (k = 0; k < i; k++)
-               {
-                  rs_3[k] = rs[k];
-               }
-
-               /* Solve the triangular system */
-               for (k = i - 1; k >= 0; k--)
-               {
-                  rs_3[k] = rs_3[k] / hh[k][k];
-                  for (j = 0; j < k; j++)
-                  {
-                     rs_3[j] -= hh[j][k] * rs_3[k];
-                  }
-               }
-
-               /* Compute the solution update vector w_3 = sum_{j=0}^{i-1} rs_3[j] p[j] */
-               (*(gmres_functions->CopyVector))(p[0], w_3);
-               (*(gmres_functions->ScaleVector))(rs_3[0], w_3);
-               for (j = 1; j < i; j++)
-               {
-                  (*(gmres_functions->Axpy))(rs_3[j], p[j], w_3);
-               }
-
-               /* Apply preconditioner to get the correction */
-               (*(gmres_functions->ClearVector))(w);
-               precond(precond_data, A, w_3, w);
-
-               /* Compute current approximate solution x_i = x_0 + correction */
-               (*(gmres_functions->CopyVector))(x, w_3);
-               (*(gmres_functions->Axpy))(1.0, w, w_3);
-
-               if (xref == NULL || print_level == 3 || print_level == 4 || print_level == 5)
+               if (b_norm > 0.0)
                {
-                  /* Now compute real residual r = b - A*x_i */
-                  (*(gmres_functions->CopyVector))(b, r);
-                  (*(gmres_functions->Matvec))(matvec_data, -1.0, A, w_3, 1.0, r);
-               }
-               else if (xref != NULL && (print_level == 6 || print_level == 7 || print_level == 8))
-               {
-                  /* Compute error e = x_ref - x_i */
-                  (*(gmres_functions->CopyVector))(xref, r);
-                  (*(gmres_functions->Axpy))(-1.0, w_3, r);
-               }
-
-               /* Compute tag-specific residual/error norms */
-               (*(gmres_functions->InnerProd))(r, r, &num_tags, &iprod);
-
-               /* Print tag-specific residual/error norms */
-               if (!my_id && print_level != 6)
-               {
-                  hypre_printf(" %6d  ", iter);
-                  for (tag = 0; tag < num_tags + 1; tag++)
-                  {
-                     hypre_printf("  %14.6e ",
-                                  print_level == 3 || print_level == 7 ?
-                                  hypre_sqrt(iprod[tag]) :
-                                  print_level == 4 ?
-                                  hypre_sqrt(iprod[tag]) / hypre_sqrt(biprod[tag]) :
-                                  print_level == 5 ?
-                                  hypre_sqrt(iprod[tag]) / hypre_sqrt(biprod[0]) :
-                                  print_level == 8 ?
-                                  hypre_sqrt(iprod[tag]) / hypre_sqrt(xiprod[tag]) :
-                                  print_level == 9 ?
-                                  hypre_sqrt(iprod[tag]) / hypre_sqrt(xiprod[0]) :
-                                  hypre_sqrt(iprod[tag]));
-                  }
-                  hypre_printf("\n");
+                  hypre_printf("% 5d    %e    %f   %e\n", iter,
+                               norms[iter], norms[iter] / norms[iter - 1],
+                               norms[iter] / b_norm);
                }
-               else if (!my_id && print_level == 6)
+               else
                {
-                  norms[iter] = hypre_sqrt(iprod[0]);
-                  if (e_norm > 0.0)
-                  {
-                     hypre_printf("%5d    %e      %f   %e\n", iter,
-                                  norms[iter], norms[iter] / norms[iter - 1],
-                                  norms[iter] / e_norm);
-                  }
-                  else
-                  {
-                     hypre_printf("%5d    %e    %f\n", iter, norms[iter],
-                                  norms[iter] / norms[iter - 1]);
-                  }
+                  hypre_printf("% 5d    %e    %f\n", iter, norms[iter],
+                               norms[iter] / norms[iter - 1]);
                }
             }
          }
-
-         /* convergence factor tolerance */
+         /*convergence factor tolerance */
          if (cf_tol > 0.0)
          {
             cf_ave_0 = cf_ave_1;
@@ -841,7 +613,6 @@ hypre_GMRESSolve(void  *gmres_vdata,
                break;
             }
          }
-
          /* should we exit the restart cycle? (conv. check) */
          if (r_norm <= epsilon && iter >= min_iter)
          {
@@ -895,14 +666,14 @@ hypre_GMRESSolve(void  *gmres_vdata,
                /* add the correction */
                (*(gmres_functions->Axpy))(1.0, r, w);
 
-               /* now w is the approx solution - get the norm */
-               (*(gmres_functions->InnerProd))(w, w, &num_tags, &iprod);
-               x_norm = hypre_sqrt(iprod[0]);
+               /* now w is the approx solution  - get the norm*/
+               x_norm = hypre_sqrt( (*(gmres_functions->InnerProd))(w, w) );
 
                if ( !(x_norm <= guard_zero_residual ))
                   /* don't divide by zero */
                {
-                  /* now get x_i - x_i-1 */
+                  /* now get  x_i - x_i-1 */
+
                   if (num_rel_change_check)
                   {
                      /* have already checked once so we can avoid another precond.
@@ -936,8 +707,7 @@ hypre_GMRESSolve(void  *gmres_vdata,
                      /* now r contains x_i - x_i-1 */
                   }
                   /* find the norm of x_i - x_i-1 */
-                  (*(gmres_functions->InnerProd))(r, r, &num_tags, &iprod);
-                  w_norm = hypre_sqrt(iprod[0]);
+                  w_norm = hypre_sqrt( (*(gmres_functions->InnerProd))(r, r) );
                   relative_error = w_norm / x_norm;
                   if (relative_error <= r_tol)
                   {
@@ -1005,16 +775,14 @@ hypre_GMRESSolve(void  *gmres_vdata,
          /* calculate actual residual norm*/
          (*(gmres_functions->CopyVector))(b, r);
          (*(gmres_functions->Matvec))(matvec_data, -1.0, A, x, 1.0, r);
-         (*(gmres_functions->InnerProd))(r, r, &num_tags, &iprod);
-         real_r_norm_new = r_norm = hypre_sqrt(iprod[0]);
+         real_r_norm_new = r_norm = hypre_sqrt( (*(gmres_functions->InnerProd))(r, r) );
 
          if (r_norm <= epsilon)
          {
             if (rel_change && !rel_change_passed) /* calculate the relative change */
             {
                /* calculate the norm of the solution */
-               (*(gmres_functions->InnerProd))(x, x, &num_tags, &iprod);
-               x_norm = hypre_sqrt(iprod[0]);
+               x_norm = hypre_sqrt( (*(gmres_functions->InnerProd))(x, x) );
 
                if ( !(x_norm <= guard_zero_residual ))
                   /* don't divide by zero */
@@ -1031,24 +799,38 @@ hypre_GMRESSolve(void  *gmres_vdata,
                   /* apply the preconditioner */
                   precond(precond_data, A, w, r);
                   /* find the norm of x_i - x_i-1 */
-                  (*(gmres_functions->InnerProd))(r, r, &num_tags, &iprod);
-                  w_norm = hypre_sqrt(iprod[0]);
-
+                  w_norm = hypre_sqrt( (*(gmres_functions->InnerProd))(r, r) );
                   relative_error = w_norm / x_norm;
-                  if (relative_error < r_tol)
+                  if ( relative_error < r_tol )
                   {
                      (gmres_data -> converged) = 1;
+                     if ( print_level > 1 && my_id == 0 )
+                     {
+                        hypre_printf("\n\n");
+                        hypre_printf("Final L2 norm of residual: %e\n\n", r_norm);
+                     }
                      break;
                   }
                }
                else
                {
                   (gmres_data -> converged) = 1;
+                  if ( print_level > 1 && my_id == 0 )
+                  {
+                     hypre_printf("\n\n");
+                     hypre_printf("Final L2 norm of residual: %e\n\n", r_norm);
+                  }
                   break;
                }
+
             }
             else /* don't need to check rel. change */
             {
+               if ( print_level > 1 && my_id == 0 )
+               {
+                  hypre_printf("\n\n");
+                  hypre_printf("Final L2 norm of residual: %e\n\n", r_norm);
+               }
                (gmres_data -> converged) = 1;
                break;
             }
@@ -1058,12 +840,17 @@ hypre_GMRESSolve(void  *gmres_vdata,
             /* exit if the real residual norm has not decreased */
             if (real_r_norm_new >= real_r_norm_old)
             {
+               if (print_level > 1 && my_id == 0)
+               {
+                  hypre_printf("\n\n");
+                  hypre_printf("Final L2 norm of residual: %e\n\n", r_norm);
+               }
                (gmres_data -> converged) = 1;
                break;
             }
 
             /* report discrepancy between real/GMRES residuals and restart */
-            if (!my_id && print_level > 0)
+            if ( print_level > 0 && my_id == 0)
             {
                hypre_printf("false convergence 2, L2 norm of residual: %e\n", r_norm);
             }
@@ -1093,47 +880,10 @@ hypre_GMRESSolve(void  *gmres_vdata,
       }
    } /* END of iteration while loop */
 
-   if (!my_id && print_level > 1)
-   {
-      hypre_printf("\n\n");
-   }
 
-   if (!my_id && print_level > 0)
+   if ( print_level > 1 && my_id == 0 )
    {
-      hypre_printf("Final L2 norm of residual: %e\n", r_norm);
-      if (num_tags > 1)
-      {
-         for (tag = 0; tag < num_tags; tag++)
-         {
-            hypre_printf("Final L2 norm of r%*d: %e\n", hypre_ndigits(num_tags),
-                         tag, hypre_sqrt(iprod[tag + 1]));
-         }
-      }
-   }
-
-   if (xref && print_level > 0)
-   {
-      (*(gmres_functions->CopyVector))(x, w_3);
-      (*(gmres_functions->Axpy))(-1.0, xref, w_3);
-      (*(gmres_functions->InnerProd))(w_3, w_3, &num_tags, &iprod);
-
-      if (!my_id)
-      {
-         hypre_printf("Final L2 norm of error: %e\n", hypre_sqrt(iprod[0]));
-         if (num_tags > 1)
-         {
-            for (tag = 0; tag < num_tags; tag++)
-            {
-               hypre_printf("Final L2 norm of e%*d: %e\n", hypre_ndigits(num_tags),
-                            tag, hypre_sqrt(iprod[tag + 1]));
-            }
-         }
-      }
-   }
-
-   if (!my_id && print_level > 0)
-   {
-      hypre_printf("\n");
+      hypre_printf("\n\n");
    }
 
    (gmres_data -> num_iterations) = iter;
@@ -1153,9 +903,6 @@ hypre_GMRESSolve(void  *gmres_vdata,
       hypre_error(HYPRE_ERROR_CONV);
    }
 
-   /* free up memory */
-   hypre_TFree(iprod, HYPRE_MEMORY_HOST);
-   hypre_TFree(biprod, HYPRE_MEMORY_HOST);
    hypre_TFreeF(c, gmres_functions);
    hypre_TFreeF(s, gmres_functions);
    hypre_TFreeF(rs, gmres_functions);
@@ -1165,11 +912,6 @@ hypre_GMRESSolve(void  *gmres_vdata,
       hypre_TFreeF(rs_2, gmres_functions);
    }
 
-   if (print_level > 2)
-   {
-      hypre_TFreeF(rs_3, gmres_functions);
-   }
-
    for (i = 0; i < k_dim + 1; i++)
    {
       hypre_TFreeF(hh[i], gmres_functions);
@@ -1582,33 +1324,3 @@ hypre_GMRESGetFinalRelativeResidualNorm( void       *gmres_vdata,
 
    return hypre_error_flag;
 }
-
-/*--------------------------------------------------------------------------
- * hypre_GMRESSetRefSolution
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_GMRESSetRefSolution( void  *gmres_vdata,
-                           void  *xref )
-{
-   hypre_GMRESData *gmres_data = (hypre_GMRESData *)gmres_vdata;
-
-   (gmres_data -> xref) = xref;
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_GMRESGetRefSolution
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_GMRESGetRefSolution( void   *gmres_vdata,
-                           void  **xref )
-{
-   hypre_GMRESData *gmres_data = (hypre_GMRESData *)gmres_vdata;
-
-   *xref = (gmres_data -> xref);
-
-   return hypre_error_flag;
-}
diff --git a/src/krylov/gmres.h b/src/krylov/gmres.h
index 41381d4e6..3a77eb440 100644
--- a/src/krylov/gmres.h
+++ b/src/krylov/gmres.h
@@ -59,8 +59,7 @@ typedef struct
    HYPRE_Int    (*Matvec)        ( void *matvec_data, HYPRE_Complex alpha, void *A,
                                    void *x, HYPRE_Complex beta, void *y );
    HYPRE_Int    (*MatvecDestroy) ( void *matvec_data );
-   HYPRE_Int    (*InnerProd)     ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                   HYPRE_Complex **iprod_ptr );
+   HYPRE_Real   (*InnerProd)     ( void *x, void *y );
    HYPRE_Int    (*CopyVector)    ( void *x, void *y );
    HYPRE_Int    (*ClearVector)   ( void *x );
    HYPRE_Int    (*ScaleVector)   ( HYPRE_Complex alpha, void *x );
@@ -94,9 +93,7 @@ typedef struct
    void  *r;
    void  *w;
    void  *w_2;
-   void  *w_3;
    void  **p;
-   void  *xref;   /* reference solution for error computation */
 
    void    *matvec_data;
    void    *precond_data;
@@ -143,8 +140,7 @@ hypre_GMRESFunctionsCreate(
    HYPRE_Int    (*Matvec)        ( void *matvec_data, HYPRE_Complex alpha, void *A,
                                    void *x, HYPRE_Complex beta, void *y ),
    HYPRE_Int    (*MatvecDestroy) ( void *matvec_data ),
-   HYPRE_Int    (*InnerProd)     ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                   HYPRE_Complex **iprod_ptr ),
+   HYPRE_Real   (*InnerProd)     ( void *x, void *y ),
    HYPRE_Int    (*CopyVector)    ( void *x, void *y ),
    HYPRE_Int    (*ClearVector)   ( void *x ),
    HYPRE_Int    (*ScaleVector)   ( HYPRE_Complex alpha, void *x ),
diff --git a/src/krylov/krylov.h b/src/krylov/krylov.h
index bb711370e..03eeb124c 100644
--- a/src/krylov/krylov.h
+++ b/src/krylov/krylov.h
@@ -406,8 +406,7 @@ typedef struct
    HYPRE_Int    (*Matvec)        ( void *matvec_data, HYPRE_Complex alpha, void *A,
                                    void *x, HYPRE_Complex beta, void *y );
    HYPRE_Int    (*MatvecDestroy) ( void *matvec_data );
-   HYPRE_Int    (*InnerProd)     ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                   HYPRE_Complex **iprod_ptr );
+   HYPRE_Real   (*InnerProd)     ( void *x, void *y );
    HYPRE_Int    (*CopyVector)    ( void *x, void *y );
    HYPRE_Int    (*ClearVector)   ( void *x );
    HYPRE_Int    (*ScaleVector)   ( HYPRE_Complex alpha, void *x );
@@ -441,9 +440,7 @@ typedef struct
    void  *r;
    void  *w;
    void  *w_2;
-   void  *w_3;
    void  **p;
-   void  *xref;   /* reference solution for error computation */
 
    void    *matvec_data;
    void    *precond_data;
@@ -492,8 +489,7 @@ extern "C" {
       HYPRE_Int    (*Matvec)        ( void *matvec_data, HYPRE_Complex alpha, void *A,
                                       void *x, HYPRE_Complex beta, void *y ),
       HYPRE_Int    (*MatvecDestroy) ( void *matvec_data ),
-      HYPRE_Int    (*InnerProd)     ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                      HYPRE_Complex **iprod_ptr ),
+      HYPRE_Real   (*InnerProd)     ( void *x, void *y ),
       HYPRE_Int    (*CopyVector)    ( void *x, void *y ),
       HYPRE_Int    (*ClearVector)   ( void *x ),
       HYPRE_Int    (*ScaleVector)   ( HYPRE_Complex alpha, void *x ),
@@ -1277,13 +1273,10 @@ HYPRE_Int hypre_GMRESSetSkipRealResidualCheck ( void *gmres_vdata, HYPRE_Int ski
 HYPRE_Int hypre_GMRESGetSkipRealResidualCheck ( void *gmres_vdata, HYPRE_Int *skip_real_r_check );
 HYPRE_Int hypre_GMRESSetStopCrit ( void *gmres_vdata, HYPRE_Int stop_crit );
 HYPRE_Int hypre_GMRESGetStopCrit ( void *gmres_vdata, HYPRE_Int *stop_crit );
-HYPRE_Int hypre_GMRESSetPrecond ( void *gmres_vdata,
-                                  HYPRE_Int (*precond )(void*, void*, void*, void*),
-                                  HYPRE_Int (*precond_setup )(void*, void*, void*, void*),
-                                  void *precond_data );
+HYPRE_Int hypre_GMRESSetPrecond ( void *gmres_vdata, HYPRE_Int (*precond )(void*, void*, void*,
+                                                                           void*),
+                                  HYPRE_Int (*precond_setup )(void*, void*, void*, void*), void *precond_data );
 HYPRE_Int hypre_GMRESGetPrecond ( void *gmres_vdata, HYPRE_Solver *precond_data_ptr );
-HYPRE_Int hypre_GMRESSetRefSolution ( void *gmres_vdata, void *xref );
-HYPRE_Int hypre_GMRESGetRefSolution ( void *gmres_vdata, void **xref );
 HYPRE_Int hypre_GMRESSetPrintLevel ( void *gmres_vdata, HYPRE_Int level );
 HYPRE_Int hypre_GMRESGetPrintLevel ( void *gmres_vdata, HYPRE_Int *level );
 HYPRE_Int hypre_GMRESSetLogging ( void *gmres_vdata, HYPRE_Int level );
diff --git a/src/krylov/lgmres.c b/src/krylov/lgmres.c
index 96e4b2434..3ae5fad4a 100644
--- a/src/krylov/lgmres.c
+++ b/src/krylov/lgmres.c
@@ -426,7 +426,7 @@ hypre_LGMRESSolve(void  *lgmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
@@ -453,7 +453,7 @@ hypre_LGMRESSolve(void  *lgmres_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (logging > 0 || print_level > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ... BEGIN\n");
diff --git a/src/krylov/pcg.c b/src/krylov/pcg.c
index 7a121c7df..37b59453e 100644
--- a/src/krylov/pcg.c
+++ b/src/krylov/pcg.c
@@ -429,7 +429,7 @@ hypre_PCGSolve( void *pcg_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (print_level > 0 || logging > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
@@ -507,7 +507,7 @@ hypre_PCGSolve( void *pcg_vdata,
          for ieee_check self-equality works on all IEEE-compliant compilers/
          machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
          by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-         found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+         found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
       if (print_level > 0 || logging > 0)
       {
          hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/parcsr_ls/HYPRE_parcsr_gmres.c b/src/parcsr_ls/HYPRE_parcsr_gmres.c
index 25aeeacae..dd7215e6d 100644
--- a/src/parcsr_ls/HYPRE_parcsr_gmres.c
+++ b/src/parcsr_ls/HYPRE_parcsr_gmres.c
@@ -34,7 +34,7 @@ HYPRE_ParCSRGMRESCreate( MPI_Comm comm, HYPRE_Solver *solver )
          hypre_ParKrylovMatvecCreate,
          hypre_ParKrylovMatvec,
          hypre_ParKrylovMatvecDestroy,
-         hypre_ParKrylovInnerProdTagged,
+         hypre_ParKrylovInnerProd,
          hypre_ParKrylovCopyVector,
          hypre_ParKrylovClearVector,
          hypre_ParKrylovScaleVector,
@@ -88,28 +88,6 @@ HYPRE_ParCSRGMRESSolve( HYPRE_Solver solver,
                               (HYPRE_Vector) x ) );
 }
 
-/*--------------------------------------------------------------------------
- * HYPRE_ParCSRGMRESSetRefSolution
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParCSRGMRESSetRefSolution(HYPRE_Solver    solver,
-                                HYPRE_ParVector ref_solution)
-{
-   return (HYPRE_GMRESSetRefSolution(solver, (HYPRE_Vector) ref_solution));
-}
-
-/*--------------------------------------------------------------------------
- * HYPRE_ParCSRGMRESGetRefSolution
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParCSRGMRESGetRefSolution(HYPRE_Solver     solver,
-                                HYPRE_ParVector *ref_solution)
-{
-   return (HYPRE_GMRESGetRefSolution(solver, (HYPRE_Vector *) ref_solution));
-}
-
 /*--------------------------------------------------------------------------
  * HYPRE_ParCSRGMRESSetKDim
  *--------------------------------------------------------------------------*/
diff --git a/src/parcsr_ls/HYPRE_parcsr_ls.h b/src/parcsr_ls/HYPRE_parcsr_ls.h
index 580fc2ac2..5f0d0620c 100644
--- a/src/parcsr_ls/HYPRE_parcsr_ls.h
+++ b/src/parcsr_ls/HYPRE_parcsr_ls.h
@@ -2888,12 +2888,6 @@ HYPRE_Int HYPRE_ParCSRGMRESSolve(HYPRE_Solver       solver,
                                  HYPRE_ParVector    b,
                                  HYPRE_ParVector    x);
 
-HYPRE_Int HYPRE_ParCSRGMRESSetRefSolution(HYPRE_Solver solver,
-                                          HYPRE_ParVector ref_solution);
-
-HYPRE_Int HYPRE_ParCSRGMRESGetRefSolution(HYPRE_Solver solver,
-                                          HYPRE_ParVector *ref_solution);
-
 HYPRE_Int HYPRE_ParCSRGMRESSetKDim(HYPRE_Solver solver,
                                    HYPRE_Int    k_dim);
 
diff --git a/src/parcsr_ls/_hypre_parcsr_ls.h b/src/parcsr_ls/_hypre_parcsr_ls.h
index ae8a0c591..08ed2f37a 100644
--- a/src/parcsr_ls/_hypre_parcsr_ls.h
+++ b/src/parcsr_ls/_hypre_parcsr_ls.h
@@ -2188,8 +2188,6 @@ HYPRE_Int HYPRE_ParCSRGMRESSetup ( HYPRE_Solver solver, HYPRE_ParCSRMatrix A, HY
                                    HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParCSRGMRESSolve ( HYPRE_Solver solver, HYPRE_ParCSRMatrix A, HYPRE_ParVector b,
                                    HYPRE_ParVector x );
-HYPRE_Int HYPRE_ParCSRGMRESSetRefSolution(HYPRE_Solver solver, HYPRE_ParVector ref_solution);
-HYPRE_Int HYPRE_ParCSRGMRESGetRefSolution(HYPRE_Solver solver, HYPRE_ParVector *ref_solution);
 HYPRE_Int HYPRE_ParCSRGMRESSetKDim ( HYPRE_Solver solver, HYPRE_Int k_dim );
 HYPRE_Int HYPRE_ParCSRGMRESSetTol ( HYPRE_Solver solver, HYPRE_Real tol );
 HYPRE_Int HYPRE_ParCSRGMRESSetAbsoluteTol ( HYPRE_Solver solver, HYPRE_Real a_tol );
@@ -3452,8 +3450,6 @@ HYPRE_Int hypre_ParKrylovMatvecT ( void *matvec_data, HYPRE_Complex alpha, void
                                    HYPRE_Complex beta, void *y );
 HYPRE_Int hypre_ParKrylovMatvecDestroy ( void *matvec_data );
 HYPRE_Real hypre_ParKrylovInnerProd ( void *x, void *y );
-HYPRE_Int hypre_ParKrylovInnerProdTagged( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                          HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_ParKrylovMassInnerProd ( void *x, void **y, HYPRE_Int k, HYPRE_Int unroll,
                                          void *result );
 HYPRE_Int hypre_ParKrylovMassDotpTwo ( void *x, void *y, void **z, HYPRE_Int k, HYPRE_Int unroll,
@@ -3789,8 +3785,6 @@ HYPRE_Int hypre_ParCSRMatrixBlockDiagMatrixDevice( hypre_ParCSRMatrix *A, HYPRE_
                                                    HYPRE_Int point_type, HYPRE_Int *CF_marker,
                                                    HYPRE_Int diag_type,
                                                    hypre_ParCSRMatrix **B_ptr );
-HYPRE_Int hypre_MGRBuildRFromWrDevice(hypre_IntArray *C_map, hypre_IntArray *F_map,
-                                      hypre_ParCSRMatrix *Wr, hypre_ParCSRMatrix *R);
 
 /* par_mgr_stats.c */
 HYPRE_Int hypre_MGRSetupStats( void *mgr_vdata );
diff --git a/src/parcsr_ls/amg_hybrid.c b/src/parcsr_ls/amg_hybrid.c
index 32443dd22..5c509cf37 100644
--- a/src/parcsr_ls/amg_hybrid.c
+++ b/src/parcsr_ls/amg_hybrid.c
@@ -1952,7 +1952,7 @@ hypre_AMGHybridSolve( void               *AMGhybrid_vdata,
                   hypre_ParKrylovDestroyVector, hypre_ParKrylovMatvecCreate,
                   hypre_ParKrylovMatvec,
                   hypre_ParKrylovMatvecDestroy,
-                  hypre_ParKrylovInnerProdTagged, hypre_ParKrylovCopyVector,
+                  hypre_ParKrylovInnerProd, hypre_ParKrylovCopyVector,
                   hypre_ParKrylovClearVector,
                   hypre_ParKrylovScaleVector, hypre_ParKrylovAxpy,
                   hypre_ParKrylovIdentitySetup, hypre_ParKrylovIdentity );
diff --git a/src/parcsr_ls/ams.c b/src/parcsr_ls/ams.c
index d3a09e743..e7eb6b3e1 100644
--- a/src/parcsr_ls/ams.c
+++ b/src/parcsr_ls/ams.c
@@ -1260,9 +1260,8 @@ HYPRE_Int hypre_AMSSetAlphaPoissonMatrix(void *solver,
    hypre_AMSData *ams_data = (hypre_AMSData *) solver;
    ams_data -> A_Pi = A_Pi;
 
-   /* Penalize the eliminated degrees of freedom.
-      We divide HYPRE_REAL_MAX by 1000 to avoid FPE errors. */
-   hypre_ParCSRMatrixSetDiagRows(A_Pi, HYPRE_REAL_MAX / 1000);
+   /* Penalize the eliminated degrees of freedom */
+   hypre_ParCSRMatrixSetDiagRows(A_Pi, HYPRE_REAL_MAX);
 
    /* Make sure that the first entry in each row is the diagonal one. */
    /* hypre_CSRMatrixReorder(hypre_ParCSRMatrixDiag(A_Pi)); */
@@ -1292,9 +1291,8 @@ HYPRE_Int hypre_AMSSetBetaPoissonMatrix(void *solver,
    }
    else
    {
-      /* Penalize the eliminated degrees of freedom.
-         We divide HYPRE_REAL_MAX by 1000 to avoid FPE errors. */
-      hypre_ParCSRMatrixSetDiagRows(A_G, HYPRE_REAL_MAX / 1000);
+      /* Penalize the eliminated degrees of freedom */
+      hypre_ParCSRMatrixSetDiagRows(A_G, HYPRE_REAL_MAX);
 
       /* Make sure that the first entry in each row is the diagonal one. */
       /* hypre_CSRMatrixReorder(hypre_ParCSRMatrixDiag(A_G)); */
@@ -3181,9 +3179,9 @@ hypre_AMSSetup(void *solver,
                                        A_num_cols_offd + B_num_cols_offd,
                                        A_num_nonzeros_diag + B_num_nonzeros_diag,
                                        A_num_nonzeros_offd + B_num_nonzeros_offd);
-         hypre_GenerateDiagAndOffd(C_local, C,
-                                   hypre_ParCSRMatrixFirstColDiag(A),
-                                   hypre_ParCSRMatrixLastColDiag(A));
+         GenerateDiagAndOffd(C_local, C,
+                             hypre_ParCSRMatrixFirstColDiag(A),
+                             hypre_ParCSRMatrixLastColDiag(A));
 
          hypre_CSRMatrixDestroy(A_local);
          hypre_CSRMatrixDestroy(B_local);
@@ -3678,9 +3676,9 @@ hypre_AMSSetup(void *solver,
                                                 A_num_cols_offd + B_num_cols_offd,
                                                 A_num_nonzeros_diag + B_num_nonzeros_diag,
                                                 A_num_nonzeros_offd + B_num_nonzeros_offd);
-                  hypre_GenerateDiagAndOffd(C_local, C,
-                                            hypre_ParCSRMatrixFirstColDiag(A),
-                                            hypre_ParCSRMatrixLastColDiag(A));
+                  GenerateDiagAndOffd(C_local, C,
+                                      hypre_ParCSRMatrixFirstColDiag(A),
+                                      hypre_ParCSRMatrixLastColDiag(A));
 
                   hypre_CSRMatrixDestroy(A_local);
                   hypre_CSRMatrixDestroy(B_local);
@@ -4317,9 +4315,10 @@ HYPRE_Int hypre_AMSConstructDiscreteGradient(hypre_ParCSRMatrix *A,
                                    hypre_ParVectorPartitioning(x_coord),
                                    0, 0, 0);
       hypre_CSRMatrixBigJtoJ(local);
-      hypre_GenerateDiagAndOffd(local, G,
-                                hypre_ParVectorFirstIndex(x_coord),
-                                hypre_ParVectorLastIndex(x_coord));
+      GenerateDiagAndOffd(local, G,
+                          hypre_ParVectorFirstIndex(x_coord),
+                          hypre_ParVectorLastIndex(x_coord));
+
 
       /* Account for empty rows in G. These may appear when A includes only
          the interior (non-Dirichlet b.c.) edges. */
@@ -4467,7 +4466,7 @@ hypre_AMSFEISetup(void *solver,
                                    vert_part,
                                    0, 0, 0);
       hypre_CSRMatrixBigJtoJ(local);
-      hypre_GenerateDiagAndOffd(local, G, vert_start, vert_end);
+      GenerateDiagAndOffd(local, G, vert_start, vert_end);
 
       //hypre_CSRMatrixJ(local) = NULL;
       hypre_CSRMatrixDestroy(local);
diff --git a/src/parcsr_ls/par_amg_solve.c b/src/parcsr_ls/par_amg_solve.c
index cc1adf7cd..2ac04b30a 100644
--- a/src/parcsr_ls/par_amg_solve.c
+++ b/src/parcsr_ls/par_amg_solve.c
@@ -51,7 +51,7 @@ hypre_BoomerAMGSolve( void               *amg_vdata,
    HYPRE_Int           j;
    HYPRE_Int           Solve_err_flag;
    HYPRE_Int           num_procs, my_id;
-   HYPRE_Int           num_vectors, num_rows_fine;
+   HYPRE_Int           num_vectors;
    HYPRE_Real          alpha = 1.0;
    HYPRE_Real          beta = -1.0;
    HYPRE_Real          cycle_op_count;
@@ -105,7 +105,6 @@ hypre_BoomerAMGSolve( void               *amg_vdata,
    Ptemp            = hypre_ParAMGDataPtemp(amg_data);
    Ztemp            = hypre_ParAMGDataZtemp(amg_data);
    num_vectors      = hypre_ParVectorNumVectors(f);
-   num_rows_fine    = hypre_ParCSRMatrixNumRows(A);
 
    A_array[0] = A;
    F_array[0] = f;
@@ -120,18 +119,18 @@ hypre_BoomerAMGSolve( void               *amg_vdata,
    }
 
    /* Update work vectors */
-   hypre_ParVectorResize(Vtemp, num_rows_fine, num_vectors);
-   hypre_ParVectorResize(Rtemp, num_rows_fine, num_vectors);
-   hypre_ParVectorResize(Ptemp, num_rows_fine, num_vectors);
-   hypre_ParVectorResize(Ztemp, num_rows_fine, num_vectors);
+   hypre_ParVectorResize(Vtemp, num_vectors);
+   hypre_ParVectorResize(Rtemp, num_vectors);
+   hypre_ParVectorResize(Ptemp, num_vectors);
+   hypre_ParVectorResize(Ztemp, num_vectors);
    if (amg_logging > 1)
    {
-      hypre_ParVectorResize(Residual, num_rows_fine, num_vectors);
+      hypre_ParVectorResize(Residual, num_vectors);
    }
    for (j = 1; j < num_levels; j++)
    {
-      hypre_ParVectorResize(F_array[j], hypre_ParVectorLocalSize(F_array[j]), num_vectors);
-      hypre_ParVectorResize(U_array[j], hypre_ParVectorLocalSize(U_array[j]), num_vectors);
+      hypre_ParVectorResize(F_array[j], num_vectors);
+      hypre_ParVectorResize(U_array[j], num_vectors);
    }
 
    /*-----------------------------------------------------------------------
@@ -202,7 +201,7 @@ hypre_BoomerAMGSolve( void               *amg_vdata,
             for ieee_check self-equality works on all IEEE-compliant compilers/
             machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
             by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-            found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+            found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (amg_print_level > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/parcsr_ls/par_amgdd_solve.c b/src/parcsr_ls/par_amgdd_solve.c
index 9679c7b13..cb5c5d092 100644
--- a/src/parcsr_ls/par_amgdd_solve.c
+++ b/src/parcsr_ls/par_amgdd_solve.c
@@ -148,7 +148,7 @@ hypre_BoomerAMGDDSolve( void               *amgdd_vdata,
             for ieee_check self-equality works on all IEEE-compliant compilers/
             machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
             by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-            found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+            found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (amg_print_level > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/parcsr_ls/par_ilu_setup.c b/src/parcsr_ls/par_ilu_setup.c
index ee58569c9..0742fb82f 100644
--- a/src/parcsr_ls/par_ilu_setup.c
+++ b/src/parcsr_ls/par_ilu_setup.c
@@ -522,7 +522,7 @@ hypre_ILUSetup( void               *ilu_vdata,
                       hypre_ParILUSchurGMRESMatvecDevice :
                       hypre_ParILUSchurGMRESMatvecJacIterDevice), //parCSR A -> ilu_data
                      hypre_ParKrylovMatvecDestroy, //parCSR A -- inactive
-                     hypre_ParKrylovInnerProdTagged,
+                     hypre_ParKrylovInnerProd,
                      hypre_ParKrylovCopyVector,
                      hypre_ParKrylovClearVector,
                      hypre_ParKrylovScaleVector,
@@ -839,7 +839,7 @@ hypre_ILUSetup( void               *ilu_vdata,
                   hypre_ParKrylovMatvecCreate, //parCSR A -- inactive
                   hypre_ParILURAPSchurGMRESMatvecDevice, //parCSR A -> ilu_data
                   hypre_ParKrylovMatvecDestroy, //parCSR A -- inactive
-                  hypre_ParKrylovInnerProdTagged,
+                  hypre_ParKrylovInnerProd,
                   hypre_ParKrylovCopyVector,
                   hypre_ParKrylovClearVector,
                   hypre_ParKrylovScaleVector,
@@ -963,7 +963,7 @@ hypre_ILUSetup( void               *ilu_vdata,
                      hypre_ParKrylovMatvecCreate, //parCSR A -- inactive
                      hypre_ParILURAPSchurGMRESMatvecHost, //parCSR A -> ilu_data
                      hypre_ParKrylovMatvecDestroy, //parCSR A -- inactive
-                     hypre_ParKrylovInnerProdTagged,
+                     hypre_ParKrylovInnerProd,
                      hypre_ParKrylovCopyVector,
                      hypre_ParKrylovClearVector,
                      hypre_ParKrylovScaleVector,
diff --git a/src/parcsr_ls/par_ilu_solve.c b/src/parcsr_ls/par_ilu_solve.c
index bd9546f9e..45b113fce 100644
--- a/src/parcsr_ls/par_ilu_solve.c
+++ b/src/parcsr_ls/par_ilu_solve.c
@@ -184,7 +184,7 @@ hypre_ILUSolve( void               *ilu_vdata,
             for ieee_check self-equality works on all IEEE-compliant compilers/
             machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
             by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-            found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+            found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (print_level > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
@@ -1680,7 +1680,7 @@ hypre_NSHSolve( void               *nsh_vdata,
             for ieee_check self-equality works on all IEEE-compliant compilers/
             machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
             by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-            found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+            found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (print_level > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/parcsr_ls/par_krylov_func.c b/src/parcsr_ls/par_krylov_func.c
index 95d166c22..4eb05cc8e 100644
--- a/src/parcsr_ls/par_krylov_func.c
+++ b/src/parcsr_ls/par_krylov_func.c
@@ -47,11 +47,7 @@ hypre_ParKrylovCreateVector( void *vvector )
                                             hypre_ParVectorGlobalSize(vector),
                                             hypre_ParVectorPartitioning(vector),
                                             hypre_ParVectorNumVectors(vector) );
-   hypre_ParVectorSetNumTags(new_vector, hypre_ParVectorNumTags(vector));
-   hypre_ParVectorSetOwnsTags(new_vector, 0);
-   hypre_ParVectorSetTags(new_vector,
-                          hypre_ParVectorMemoryLocation(vector),
-                          hypre_ParVectorTags(vector));
+
    hypre_ParVectorInitialize_v2(new_vector, hypre_ParVectorMemoryLocation(vector));
 
    return ( (void *) new_vector );
@@ -84,11 +80,6 @@ hypre_ParKrylovCreateVectorArray(HYPRE_Int n, void *vvector )
                                                   hypre_ParVectorGlobalSize(vector),
                                                   hypre_ParVectorPartitioning(vector),
                                                   hypre_ParVectorNumVectors(vector) );
-      hypre_ParVectorSetNumTags(new_vector[i], hypre_ParVectorNumTags(vector));
-      hypre_ParVectorSetOwnsTags(new_vector[i], 0);
-      hypre_ParVectorSetTags(new_vector[i],
-                             hypre_ParVectorMemoryLocation(vector),
-                             hypre_ParVectorTags(vector));
       hypre_VectorData(hypre_ParVectorLocalVector(new_vector[i])) = &array_data[i * size * num_vectors];
       hypre_ParVectorInitialize_v2(new_vector[i], memory_location);
       if (i)
@@ -197,22 +188,6 @@ hypre_ParKrylovInnerProd( void *x,
                                       (hypre_ParVector *) y ) );
 }
 
-/*--------------------------------------------------------------------------
- * hypre_ParKrylovInnerProdTagged
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParKrylovInnerProdTagged( void           *x,
-                                void           *y,
-                                HYPRE_Int      *num_tags_ptr,
-                                HYPRE_Complex **iprod_ptr )
-{
-   return ( hypre_ParVectorInnerProdTagged( (hypre_ParVector *) x,
-                                            (hypre_ParVector *) y,
-                                            num_tags_ptr,
-                                            iprod_ptr ) );
-}
-
 /*--------------------------------------------------------------------------
  * hypre_ParKrylovMassInnerProd
  *--------------------------------------------------------------------------*/
diff --git a/src/parcsr_ls/par_mgr.c b/src/parcsr_ls/par_mgr.c
index 5b92f48cf..b5bdeb691 100644
--- a/src/parcsr_ls/par_mgr.c
+++ b/src/parcsr_ls/par_mgr.c
@@ -247,20 +247,6 @@ hypre_MGRDestroy( void *data )
          hypre_ParVectorDestroy((mgr_data -> F_array)[i]);
          hypre_ParVectorDestroy((mgr_data -> U_array)[i]);
 
-         if ((mgr_data -> R_array)[i - 1] && (mgr_data -> RT_array)[i - 1] &&
-             ((mgr_data -> R_array)[i - 1] == (mgr_data -> RT_array)[i - 1]))
-         {
-            hypre_ParCSRMatrixDestroy((mgr_data -> R_array)[i - 1]);
-            (mgr_data -> R_array)[i - 1] = NULL;
-         }
-
-         if ((mgr_data -> P_array)[i - 1] && (mgr_data -> RT_array)[i - 1] &&
-             ((mgr_data -> P_array)[i - 1] == (mgr_data -> RT_array)[i - 1]))
-         {
-            hypre_ParCSRMatrixDestroy((mgr_data -> P_array)[i - 1]);
-            (mgr_data -> P_array)[i - 1] = NULL;
-         }
-
          if ((mgr_data -> P_array)[i - 1])
          {
             hypre_ParCSRMatrixDestroy((mgr_data -> P_array)[i - 1]);
@@ -381,7 +367,6 @@ hypre_MGRDestroy( void *data )
          hypre_TFree((mgr_data -> level_diaginv)[i], HYPRE_MEMORY_HOST);
       }
       hypre_TFree(mgr_data -> level_diaginv, HYPRE_MEMORY_HOST);
-      (mgr_data -> level_diaginv) = NULL;
    }
 
    if (mgr_data -> frelax_diaginv)
@@ -391,7 +376,6 @@ hypre_MGRDestroy( void *data )
          hypre_TFree((mgr_data -> frelax_diaginv)[i], HYPRE_MEMORY_HOST);
       }
       hypre_TFree(mgr_data -> frelax_diaginv, HYPRE_MEMORY_HOST);
-      (mgr_data -> frelax_diaginv) = NULL;
    }
    hypre_TFree((mgr_data -> F_array), HYPRE_MEMORY_HOST);
    hypre_TFree((mgr_data -> U_array), HYPRE_MEMORY_HOST);
diff --git a/src/parcsr_ls/par_mgr_device.c b/src/parcsr_ls/par_mgr_device.c
index dd91be490..8c18b6255 100644
--- a/src/parcsr_ls/par_mgr_device.c
+++ b/src/parcsr_ls/par_mgr_device.c
@@ -1004,121 +1004,4 @@ hypre_ParCSRMatrixBlockDiagMatrixDevice( hypre_ParCSRMatrix  *A,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * Constructs a classical restriction operator as R = [Wr I] on GPU.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_MGRBuildRFromWrDevice(hypre_IntArray      *C_map,
-                            hypre_IntArray      *F_map,
-                            hypre_ParCSRMatrix  *Wr,
-                            hypre_ParCSRMatrix  *R)
-{
-   /* Input matrix variables */
-   hypre_CSRMatrix       *Wr_diag          = hypre_ParCSRMatrixDiag(Wr);
-   HYPRE_Int             *Wr_diag_i        = hypre_CSRMatrixI(Wr_diag);
-   HYPRE_Int             *Wr_diag_j        = hypre_CSRMatrixJ(Wr_diag);
-   HYPRE_Complex         *Wr_diag_a        = hypre_CSRMatrixData(Wr_diag);
-   HYPRE_Int              Wr_diag_num_rows = hypre_CSRMatrixNumRows(Wr_diag);
-   HYPRE_Int             *C_map_data       = hypre_IntArrayData(C_map);
-   HYPRE_Int             *F_map_data       = hypre_IntArrayData(F_map);
-
-   /* Output matrix */
-   hypre_CSRMatrix       *R_diag           = hypre_ParCSRMatrixDiag(R);
-   HYPRE_Int             *R_diag_i         = hypre_CSRMatrixI(R_diag);
-   HYPRE_Int             *R_diag_j         = hypre_CSRMatrixJ(R_diag);
-   HYPRE_Complex         *R_diag_a         = hypre_CSRMatrixData(R_diag);
-
-   HYPRE_Int              nrows            = Wr_diag_num_rows;
-
-   /* 1. Compute row lengths: 1 (for I) + nnz in Wr row */
-   HYPRE_Int *row_lengths = hypre_TAlloc(HYPRE_Int, nrows, HYPRE_MEMORY_DEVICE);
-
-#if defined(HYPRE_USING_SYCL)
-   oneapi::dpl::counting_iterator<HYPRE_Int> row_begin(0);
-   HYPRE_ONEDPL_CALL(std::transform,
-                     row_begin, row_begin + nrows,
-                     row_lengths,
-                     [ = ](HYPRE_Int i)
-   {
-      return (1 + Wr_diag_i[i + 1] - Wr_diag_i[i]);
-   });
-#else
-   HYPRE_THRUST_CALL(transform,
-                     thrust::make_counting_iterator<HYPRE_Int>(0),
-                     thrust::make_counting_iterator<HYPRE_Int>(nrows),
-                     row_lengths,
-                     [ = ] __device__ (HYPRE_Int i)
-   {
-      return (1 + Wr_diag_i[i + 1] - Wr_diag_i[i]);
-   });
-#endif
-
-   /* 2. Inclusive scan to get R_diag_i */
-   HYPRE_Int zero = 0;
-   hypre_TMemcpy(R_diag_i, &zero, HYPRE_Int, 1, HYPRE_MEMORY_DEVICE, HYPRE_MEMORY_HOST);
-
-#if defined(HYPRE_USING_SYCL)
-   HYPRE_ONEDPL_CALL(std::inclusive_scan,
-                     row_lengths, row_lengths + nrows,
-                     R_diag_i + 1);
-#else
-   HYPRE_THRUST_CALL(inclusive_scan,
-                     row_lengths, row_lengths + nrows,
-                     R_diag_i + 1);
-#endif
-
-   // 3. Fill R_diag_j and R_diag_a in parallel, one row per thread
-#if defined(HYPRE_USING_SYCL)
-   HYPRE_ONEDPL_CALL(std::for_each,
-                     row_begin, row_begin + nrows,
-                     [ = ](HYPRE_Int i)
-   {
-      HYPRE_Int r_offset = R_diag_i[i];
-
-      /* I part */
-      R_diag_j[r_offset] = C_map_data[i];
-      R_diag_a[r_offset] = 1.0;
-      r_offset++;
-
-      /* Wr part */
-      for (HYPRE_Int jj = Wr_diag_i[i]; jj < Wr_diag_i[i + 1]; jj++)
-      {
-         R_diag_j[r_offset] = F_map_data[Wr_diag_j[jj]];
-         R_diag_a[r_offset] = Wr_diag_a[jj];
-         r_offset++;
-      }
-   });
-#else
-   HYPRE_THRUST_CALL(for_each,
-                     thrust::make_counting_iterator<HYPRE_Int>(0),
-                     thrust::make_counting_iterator<HYPRE_Int>(nrows),
-                     [ = ] __device__ (HYPRE_Int i)
-   {
-      HYPRE_Int r_offset = R_diag_i[i];
-
-      /* I part */
-      R_diag_j[r_offset] = C_map_data[i];
-      R_diag_a[r_offset] = 1.0;
-      r_offset++;
-
-      /* Wr part */
-      for (HYPRE_Int jj = Wr_diag_i[i]; jj < Wr_diag_i[i + 1]; jj++)
-      {
-         R_diag_j[r_offset] = F_map_data[Wr_diag_j[jj]];
-         R_diag_a[r_offset] = Wr_diag_a[jj];
-         r_offset++;
-      }
-   });
-#endif
-
-   /* 4. Free row_lengths */
-   hypre_TFree(row_lengths, HYPRE_MEMORY_DEVICE);
-
-   /* 5. Sync compute stream so that R_diag is ready for use */
-   hypre_SyncComputeStream();
-
-   return hypre_error_flag;
-}
-
 #endif
diff --git a/src/parcsr_ls/par_mgr_interp.c b/src/parcsr_ls/par_mgr_interp.c
index e2135b66e..83a4776bf 100644
--- a/src/parcsr_ls/par_mgr_interp.c
+++ b/src/parcsr_ls/par_mgr_interp.c
@@ -786,10 +786,10 @@ hypre_MGRBuildPHost( hypre_ParCSRMatrix   *A,
          // L1-Jacobi-type interpolation
          diag_FF = hypre_CTAlloc(HYPRE_Complex, num_rows_AFF, memory_location_P);
          hypre_CSRMatrixExtractDiagonalHost(hypre_ParCSRMatrixDiag(A_FF), diag, 0);
-         hypre_CSRMatrixComputeRowSum(A_FF_diag, NULL, NULL, diag_FF, 1, 1.0, "set");
-         hypre_CSRMatrixComputeRowSum(A_FC_diag, NULL, NULL, diag_FF, 1, 1.0, "add");
-         hypre_CSRMatrixComputeRowSum(A_FF_offd, NULL, NULL, diag_FF, 1, 1.0, "add");
-         hypre_CSRMatrixComputeRowSum(A_FC_offd, NULL, NULL, diag_FF, 1, 1.0, "add");
+         hypre_CSRMatrixComputeRowSumHost(A_FF_diag, NULL, NULL, diag_FF, 1, 1.0, "set");
+         hypre_CSRMatrixComputeRowSumHost(A_FC_diag, NULL, NULL, diag_FF, 1, 1.0, "add");
+         hypre_CSRMatrixComputeRowSumHost(A_FF_offd, NULL, NULL, diag_FF, 1, 1.0, "add");
+         hypre_CSRMatrixComputeRowSumHost(A_FC_offd, NULL, NULL, diag_FF, 1, 1.0, "add");
 
          for (i = 0; i < num_rows_AFF; i++)
          {
@@ -2405,7 +2405,14 @@ hypre_MGRBuildRFromWr(hypre_IntArray       *C_map,
 
    if (exec == HYPRE_EXEC_DEVICE)
    {
-      hypre_MGRBuildRFromWrDevice(C_map, F_map, Wr, R);
+      /* TODO (VPM): Implement hypre_MGRBuildRFromWrDevice */
+      hypre_ParCSRMatrixMigrate(Wr, HYPRE_MEMORY_HOST);
+      hypre_ParCSRMatrixMigrate(R, HYPRE_MEMORY_HOST);
+      hypre_IntArrayMigrate(C_map, HYPRE_MEMORY_HOST);
+      hypre_IntArrayMigrate(F_map, HYPRE_MEMORY_HOST);
+      hypre_MGRBuildRFromWrHost(C_map, F_map, Wr, R);
+      hypre_ParCSRMatrixMigrate(Wr, HYPRE_MEMORY_DEVICE);
+      hypre_ParCSRMatrixMigrate(R, HYPRE_MEMORY_DEVICE);
    }
    else
 #endif
@@ -2471,7 +2478,7 @@ hypre_MGRColLumpedRestrict(hypre_ParCSRMatrix  *A,
                                 hypre_ParCSRMatrixGlobalNumRows(A_CF),
                                 hypre_ParCSRMatrixRowStarts(A_CF));
    hypre_ParVectorInitialize_v2(r_CF, hypre_ParCSRMatrixMemoryLocation(A_CF));
-   hypre_ParVectorPointwiseDivpy(b_CF, b_FF, r_CF);
+   hypre_ParVectorElmdivpy(b_CF, b_FF, r_CF);
    hypre_ParVectorScale(-1.0, r_CF);
    Wr = hypre_ParCSRMatrixCreateFromParVector(r_CF,
                                               hypre_ParCSRMatrixGlobalNumRows(A_CF),
diff --git a/src/parcsr_ls/par_mgr_setup.c b/src/parcsr_ls/par_mgr_setup.c
index e3f46d7b1..ef484ea0a 100644
--- a/src/parcsr_ls/par_mgr_setup.c
+++ b/src/parcsr_ls/par_mgr_setup.c
@@ -74,8 +74,8 @@ hypre_MGRSetup( void               *mgr_vdata,
 #if defined(HYPRE_USING_GPU)
    hypre_ParCSRMatrix  **P_FF_array = (mgr_data -> P_FF_array);
 #endif
-   hypre_ParCSRMatrix  **P_array  = (mgr_data -> P_array);
-   hypre_ParCSRMatrix  **R_array  = (mgr_data -> R_array);
+   hypre_ParCSRMatrix  **P_array = (mgr_data -> P_array);
+   hypre_ParCSRMatrix  **R_array = (mgr_data -> RT_array);
    hypre_ParCSRMatrix  **RT_array = (mgr_data -> RT_array);
 
    hypre_ParCSRMatrix  *A_FF = NULL;
@@ -404,20 +404,6 @@ hypre_MGRSetup( void               *mgr_vdata,
             B_FF_array[j] = NULL;
          }
 
-         if (R_array[j] && RT_array[j] && (R_array[j] == RT_array[j]))
-         {
-            hypre_ParCSRMatrixDestroy(R_array[j]);
-            R_array[j]  = NULL;
-            RT_array[j] = NULL;
-         }
-
-         if (P_array[j] && RT_array[j] && (P_array[j] == RT_array[j]))
-         {
-            hypre_ParCSRMatrixDestroy(P_array[j]);
-            P_array[j]  = NULL;
-            RT_array[j] = NULL;
-         }
-
          if (P_array[j])
          {
             hypre_ParCSRMatrixDestroy(P_array[j]);
@@ -544,7 +530,6 @@ hypre_MGRSetup( void               *mgr_vdata,
          }
       }
       hypre_TFree((mgr_data -> l1_norms), HYPRE_MEMORY_HOST);
-      (mgr_data -> l1_norms) = l1_norms = NULL;
    }
 
    if ((mgr_data -> frelax_diaginv))
@@ -558,7 +543,6 @@ hypre_MGRSetup( void               *mgr_vdata,
          }
       }
       hypre_TFree((mgr_data -> frelax_diaginv), HYPRE_MEMORY_HOST);
-      (mgr_data -> frelax_diaginv) = frelax_diaginv = NULL;
    }
 
    if ((mgr_data -> level_diaginv))
@@ -572,7 +556,6 @@ hypre_MGRSetup( void               *mgr_vdata,
          }
       }
       hypre_TFree((mgr_data -> level_diaginv), HYPRE_MEMORY_HOST);
-      (mgr_data -> level_diaginv) = level_diaginv = NULL;
    }
 
    /* setup temporary storage */
@@ -603,7 +586,6 @@ hypre_MGRSetup( void               *mgr_vdata,
    }
    hypre_TFree((mgr_data -> rel_res_norms), HYPRE_MEMORY_HOST);
    hypre_TFree((mgr_data -> blk_size), HYPRE_MEMORY_HOST);
-   blk_size = NULL;
 
    Vtemp = hypre_ParVectorCreate(hypre_ParCSRMatrixComm(A),
                                  hypre_ParCSRMatrixGlobalNumRows(A),
diff --git a/src/parcsr_ls/par_mgr_solve.c b/src/parcsr_ls/par_mgr_solve.c
index 5769337ea..3d75cb343 100644
--- a/src/parcsr_ls/par_mgr_solve.c
+++ b/src/parcsr_ls/par_mgr_solve.c
@@ -139,7 +139,7 @@ hypre_MGRSolve( void               *mgr_vdata,
           * for ieee_check self-equality works on all IEEE-compliant compilers/
           * machines, c.f. page 8 of "Lecture Notes on the Status of IEEE 754"
           * by W. Kahan, May 31, 1996.  Currently (July 2002) this paper may be
-          * found at https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF */
+          * found at http://HTTP.CS.Berkeley.EDU/~wkahan/ieee754status/IEEE754.PDF */
          if (print_level > 0)
          {
             hypre_printf("\n\nERROR detected by Hypre ...  BEGIN\n");
diff --git a/src/parcsr_ls/par_mod_lr_interp.c b/src/parcsr_ls/par_mod_lr_interp.c
index a65f10ee2..235d38117 100644
--- a/src/parcsr_ls/par_mod_lr_interp.c
+++ b/src/parcsr_ls/par_mod_lr_interp.c
@@ -979,10 +979,7 @@ hypre_BoomerAMGBuildModExtPIInterpHost(hypre_ParCSRMatrix  *A,
                   break;
                }
             }
-            if (value != 0.0)
-            {
-               As_FF_diag_data[j] /= value;
-            }
+            As_FF_diag_data[j] /= value;
          }
          for (j = As_FF_offd_i[i]; j < As_FF_offd_i[i + 1]; j++)
          {
@@ -999,10 +996,7 @@ hypre_BoomerAMGBuildModExtPIInterpHost(hypre_ParCSRMatrix  *A,
                   break;
                }
             }
-            if (value != 0.0)
-            {
-               As_FF_offd_data[j] /= value;
-            }
+            As_FF_offd_data[j] /= value;
          }
          As_FF_diag_data[As_FF_diag_i[i]] = 1.0;
       }
diff --git a/src/parcsr_ls/par_relax.c b/src/parcsr_ls/par_relax.c
index c471a3a92..4b94bb544 100644
--- a/src/parcsr_ls/par_relax.c
+++ b/src/parcsr_ls/par_relax.c
@@ -1236,11 +1236,11 @@ hypre_BoomerAMGRelax7Jacobi( hypre_ParCSRMatrix *A,
     *-----------------------------------------------------------------*/
    if (relax_points)
    {
-      hypre_ParVectorPointwiseDivpyMarked(Vtemp, &l1_norms_parvec, u, cf_marker, relax_points);
+      hypre_ParVectorElmdivpyMarked(Vtemp, &l1_norms_parvec, u, cf_marker, relax_points);
    }
    else
    {
-      hypre_ParVectorPointwiseDivpy(Vtemp, &l1_norms_parvec, u);
+      hypre_ParVectorElmdivpy(Vtemp, &l1_norms_parvec, u);
    }
 
 #if defined(HYPRE_USING_GPU)
diff --git a/src/parcsr_ls/protos.h b/src/parcsr_ls/protos.h
index b8621b197..09642cc43 100644
--- a/src/parcsr_ls/protos.h
+++ b/src/parcsr_ls/protos.h
@@ -733,8 +733,6 @@ HYPRE_Int HYPRE_ParCSRGMRESSetup ( HYPRE_Solver solver, HYPRE_ParCSRMatrix A, HY
                                    HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParCSRGMRESSolve ( HYPRE_Solver solver, HYPRE_ParCSRMatrix A, HYPRE_ParVector b,
                                    HYPRE_ParVector x );
-HYPRE_Int HYPRE_ParCSRGMRESSetRefSolution(HYPRE_Solver solver, HYPRE_ParVector ref_solution);
-HYPRE_Int HYPRE_ParCSRGMRESGetRefSolution(HYPRE_Solver solver, HYPRE_ParVector *ref_solution);
 HYPRE_Int HYPRE_ParCSRGMRESSetKDim ( HYPRE_Solver solver, HYPRE_Int k_dim );
 HYPRE_Int HYPRE_ParCSRGMRESSetTol ( HYPRE_Solver solver, HYPRE_Real tol );
 HYPRE_Int HYPRE_ParCSRGMRESSetAbsoluteTol ( HYPRE_Solver solver, HYPRE_Real a_tol );
@@ -1997,8 +1995,6 @@ HYPRE_Int hypre_ParKrylovMatvecT ( void *matvec_data, HYPRE_Complex alpha, void
                                    HYPRE_Complex beta, void *y );
 HYPRE_Int hypre_ParKrylovMatvecDestroy ( void *matvec_data );
 HYPRE_Real hypre_ParKrylovInnerProd ( void *x, void *y );
-HYPRE_Int hypre_ParKrylovInnerProdTagged( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                          HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_ParKrylovMassInnerProd ( void *x, void **y, HYPRE_Int k, HYPRE_Int unroll,
                                          void *result );
 HYPRE_Int hypre_ParKrylovMassDotpTwo ( void *x, void *y, void **z, HYPRE_Int k, HYPRE_Int unroll,
@@ -2334,8 +2330,6 @@ HYPRE_Int hypre_ParCSRMatrixBlockDiagMatrixDevice( hypre_ParCSRMatrix *A, HYPRE_
                                                    HYPRE_Int point_type, HYPRE_Int *CF_marker,
                                                    HYPRE_Int diag_type,
                                                    hypre_ParCSRMatrix **B_ptr );
-HYPRE_Int hypre_MGRBuildRFromWrDevice(hypre_IntArray *C_map, hypre_IntArray *F_map,
-                                      hypre_ParCSRMatrix *Wr, hypre_ParCSRMatrix *R);
 
 /* par_mgr_stats.c */
 HYPRE_Int hypre_MGRSetupStats( void *mgr_vdata );
diff --git a/src/parcsr_mv/HYPRE_parcsr_matrix.c b/src/parcsr_mv/HYPRE_parcsr_matrix.c
index 044a1fe94..1595425db 100644
--- a/src/parcsr_mv/HYPRE_parcsr_matrix.c
+++ b/src/parcsr_mv/HYPRE_parcsr_matrix.c
@@ -408,43 +408,3 @@ HYPRE_ParCSRMatrixMatvecT( HYPRE_Complex      alpha,
                alpha, (hypre_ParCSRMatrix *) A,
                (hypre_ParVector *) x, beta, (hypre_ParVector *) y) );
 }
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParCSRMatrixDiagScale( HYPRE_ParCSRMatrix A,
-                             HYPRE_ParVector    left,
-                             HYPRE_ParVector    right )
-{
-   if (!A)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   return ( hypre_ParCSRMatrixDiagScale((hypre_ParCSRMatrix *) A,
-                                        (hypre_ParVector *) left,
-                                        (hypre_ParVector *) right) );
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParCSRMatrixCompScalingTagged(HYPRE_ParCSRMatrix   A,
-                                    HYPRE_Int            type,
-                                    HYPRE_Int            num_tags,
-                                    HYPRE_Int           *tags,
-                                    HYPRE_ParVector     *scaling_ptr)
-{
-   if (!A)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   return ( hypre_ParCSRMatrixCompScalingTagged((hypre_ParCSRMatrix *) A,
-                                                type, num_tags, tags,
-                                                (hypre_ParVector **) scaling_ptr) );
-}
diff --git a/src/parcsr_mv/HYPRE_parcsr_mv.h b/src/parcsr_mv/HYPRE_parcsr_mv.h
index d562ab0bb..807f81f0f 100644
--- a/src/parcsr_mv/HYPRE_parcsr_mv.h
+++ b/src/parcsr_mv/HYPRE_parcsr_mv.h
@@ -62,11 +62,6 @@ HYPRE_Int HYPRE_ParCSRMatrixMatvec( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A, H
                                     HYPRE_Complex beta, HYPRE_ParVector y );
 HYPRE_Int HYPRE_ParCSRMatrixMatvecT( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A, HYPRE_ParVector x,
                                      HYPRE_Complex beta, HYPRE_ParVector y );
-HYPRE_Int HYPRE_ParCSRMatrixDiagScale( HYPRE_ParCSRMatrix A, HYPRE_ParVector left,
-                                       HYPRE_ParVector right );
-HYPRE_Int HYPRE_ParCSRMatrixCompScalingTagged( HYPRE_ParCSRMatrix A, HYPRE_Int type,
-                                               HYPRE_Int num_tags,
-                                               HYPRE_Int *tags, HYPRE_ParVector *scaling_ptr );
 
 /* HYPRE_parcsr_vector.c */
 HYPRE_Int HYPRE_ParVectorCreate( MPI_Comm comm, HYPRE_BigInt global_size,
diff --git a/src/parcsr_mv/HYPRE_parcsr_vector.c b/src/parcsr_mv/HYPRE_parcsr_vector.c
index 9a5bcc004..083847cae 100644
--- a/src/parcsr_mv/HYPRE_parcsr_vector.c
+++ b/src/parcsr_mv/HYPRE_parcsr_vector.c
@@ -212,73 +212,6 @@ HYPRE_ParVectorInnerProd( HYPRE_ParVector x,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParVectorPointwiseDivision( HYPRE_ParVector  x,
-                                  HYPRE_ParVector  y,
-                                  HYPRE_ParVector *z_ptr )
-{
-   if (!x)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   if (!y)
-   {
-      hypre_error_in_arg(2);
-      return hypre_error_flag;
-   }
-
-   return hypre_ParVectorPointwiseDivision( (hypre_ParVector *) x,
-                                            (hypre_ParVector *) y,
-                                            (hypre_ParVector **) z_ptr );
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParVectorPointwiseProduct( HYPRE_ParVector  x,
-                                 HYPRE_ParVector  y,
-                                 HYPRE_ParVector *z_ptr )
-{
-   if (!x)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   if (!y)
-   {
-      hypre_error_in_arg(2);
-      return hypre_error_flag;
-   }
-
-   return hypre_ParVectorPointwiseProduct( (hypre_ParVector *) x,
-                                           (hypre_ParVector *) y,
-                                           (hypre_ParVector **) z_ptr );
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-HYPRE_ParVectorPointwiseInverse( HYPRE_ParVector  x,
-                                 HYPRE_ParVector *y_ptr )
-{
-   if (!x)
-   {
-      hypre_error_in_arg(1);
-      return hypre_error_flag;
-   }
-
-   return hypre_ParVectorPointwiseInverse( (hypre_ParVector *) x,
-                                           (hypre_ParVector **) y_ptr );
-}
-
 /*--------------------------------------------------------------------------
  * HYPRE_VectorToParVector
  *--------------------------------------------------------------------------*/
diff --git a/src/parcsr_mv/_hypre_parcsr_mv.h b/src/parcsr_mv/_hypre_parcsr_mv.h
index 249026188..b920dc4f0 100644
--- a/src/parcsr_mv/_hypre_parcsr_mv.h
+++ b/src/parcsr_mv/_hypre_parcsr_mv.h
@@ -273,9 +273,6 @@ typedef struct hypre_ParVector_struct
 #define hypre_ParVectorLocalData(vector)        ((vector) -> local_vector -> data)
 #define hypre_ParVectorLocalStorage(vector)     ((vector) -> local_vector -> multivec_storage_method)
 #define hypre_ParVectorNumVectors(vector)       ((vector) -> local_vector -> num_vectors)
-#define hypre_ParVectorNumTags(vector)          ((vector) -> local_vector -> num_tags)
-#define hypre_ParVectorOwnsTags(vector)         ((vector) -> local_vector -> owns_tags)
-#define hypre_ParVectorTags(vector)             ((vector) -> local_vector -> tags)
 #define hypre_ParVectorEntryI(vector, i)        (hypre_VectorEntryI((vector) -> local_vector, i))
 #define hypre_ParVectorEntryIJ(vector, i, j)    (hypre_VectorEntryIJ((vector) -> local_vector, i, j))
 
@@ -733,11 +730,6 @@ HYPRE_Int HYPRE_ParCSRMatrixMatvec ( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A,
                                      HYPRE_Complex beta, HYPRE_ParVector y );
 HYPRE_Int HYPRE_ParCSRMatrixMatvecT ( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A, HYPRE_ParVector x,
                                       HYPRE_Complex beta, HYPRE_ParVector y );
-HYPRE_Int HYPRE_ParCSRMatrixDiagScale ( HYPRE_ParCSRMatrix A, HYPRE_ParVector left,
-                                        HYPRE_ParVector right );
-HYPRE_Int HYPRE_ParCSRMatrixCompScalingTagged ( HYPRE_ParCSRMatrix A, HYPRE_Int type,
-                                                HYPRE_Int num_tags,
-                                                HYPRE_Int *tags, HYPRE_ParVector *scaling_ptr );
 
 /* HYPRE_parcsr_vector.c */
 HYPRE_Int HYPRE_ParVectorCreate ( MPI_Comm comm, HYPRE_BigInt global_size,
@@ -758,11 +750,6 @@ HYPRE_ParVector HYPRE_ParVectorCloneShallow ( HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParVectorScale ( HYPRE_Complex value, HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParVectorAxpy ( HYPRE_Complex alpha, HYPRE_ParVector x, HYPRE_ParVector y );
 HYPRE_Int HYPRE_ParVectorInnerProd ( HYPRE_ParVector x, HYPRE_ParVector y, HYPRE_Real *prod );
-HYPRE_Int HYPRE_ParVectorPointwiseDivision ( HYPRE_ParVector x, HYPRE_ParVector y,
-                                             HYPRE_ParVector *z_ptr );
-HYPRE_Int HYPRE_ParVectorPointwiseProduct ( HYPRE_ParVector x, HYPRE_ParVector y,
-                                            HYPRE_ParVector *z_ptr );
-HYPRE_Int HYPRE_ParVectorPointwiseInverse ( HYPRE_ParVector x, HYPRE_ParVector *y_ptr );
 HYPRE_Int HYPRE_VectorToParVector ( MPI_Comm comm, HYPRE_Vector b, HYPRE_BigInt *partitioning,
                                     HYPRE_ParVector *vector );
 HYPRE_Int HYPRE_ParVectorGetValues ( HYPRE_ParVector vector, HYPRE_Int num_values,
@@ -1037,7 +1024,6 @@ HYPRE_Int hypre_ParCSRDiagScaleVectorHost( hypre_ParCSRMatrix *par_A, hypre_ParV
                                            hypre_ParVector *par_x );
 HYPRE_Int hypre_ParCSRDiagScaleVectorDevice( hypre_ParCSRMatrix *par_A, hypre_ParVector *par_y,
                                              hypre_ParVector *par_x );
-HYPRE_Int hypre_ParCSRMatrixColSumDevice( hypre_ParCSRMatrix *A, hypre_ParVector *b );
 HYPRE_Int hypre_ParCSRMatrixDropSmallEntries( hypre_ParCSRMatrix *A, HYPRE_Real tol,
                                               HYPRE_Int type);
 HYPRE_Int hypre_ParCSRMatrixDropSmallEntriesHost( hypre_ParCSRMatrix *A, HYPRE_Real tol,
@@ -1091,9 +1077,6 @@ HYPRE_Int hypre_ParCSRMatrixBlockColSum( hypre_ParCSRMatrix *A, HYPRE_Int row_ma
                                          HYPRE_Int num_rows_block, HYPRE_Int num_cols_block,
                                          hypre_DenseBlockMatrix **B_ptr );
 HYPRE_Int hypre_ParCSRMatrixColSum( hypre_ParCSRMatrix *A, hypre_ParVector **B_ptr );
-HYPRE_Int hypre_ParCSRMatrixCompScalingTagged( hypre_ParCSRMatrix *A, HYPRE_Int type,
-                                               HYPRE_Int num_tags, HYPRE_Int *tags,
-                                               hypre_ParVector **scaling_ptr );
 
 /* par_csr_filter_device.c */
 HYPRE_Int hypre_ParCSRMatrixBlkFilterDevice(hypre_ParCSRMatrix *A, HYPRE_Int block_size,
@@ -1177,9 +1160,8 @@ HYPRE_Int hypre_ParCSRMatrixRestoreRow ( hypre_ParCSRMatrix *matrix, HYPRE_BigIn
                                          HYPRE_Int *size, HYPRE_BigInt **col_ind, HYPRE_Complex **values );
 hypre_ParCSRMatrix *hypre_CSRMatrixToParCSRMatrix ( MPI_Comm comm, hypre_CSRMatrix *A,
                                                     HYPRE_BigInt *row_starts, HYPRE_BigInt *col_starts );
-HYPRE_Int hypre_GenerateDiagAndOffd ( hypre_CSRMatrix *A, hypre_ParCSRMatrix *matrix,
-                                      HYPRE_BigInt first_col_diag, HYPRE_BigInt last_col_diag );
-#define GenerateDiagAndOffd hypre_GenerateDiagAndOffd // TODO (VPM): remove this macro in the next release
+HYPRE_Int GenerateDiagAndOffd ( hypre_CSRMatrix *A, hypre_ParCSRMatrix *matrix,
+                                HYPRE_BigInt first_col_diag, HYPRE_BigInt last_col_diag );
 hypre_CSRMatrix *hypre_MergeDiagAndOffd ( hypre_ParCSRMatrix *par_matrix );
 hypre_CSRMatrix *hypre_MergeDiagAndOffdDevice ( hypre_ParCSRMatrix *par_matrix );
 hypre_CSRMatrix *hypre_ParCSRMatrixToCSRMatrixAll ( hypre_ParCSRMatrix *par_matrix );
@@ -1278,12 +1260,6 @@ hypre_ParVector *hypre_ParMultiVectorCreate ( MPI_Comm comm, HYPRE_BigInt global
 HYPRE_Int hypre_ParVectorDestroy ( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorInitializeShell( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorSetData( hypre_ParVector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_ParVectorSetOwnsTags( hypre_ParVector *vector, HYPRE_Int owns_tags );
-HYPRE_Int hypre_ParVectorSetNumTags( hypre_ParVector *vector, HYPRE_Int num_tags );
-HYPRE_Int hypre_ParVectorSetTags( hypre_ParVector *vector,
-                                  HYPRE_MemoryLocation memory_location,
-                                  HYPRE_Int *tags );
-HYPRE_Int hypre_ParVectorSetValuesTagged(hypre_ParVector *vector, HYPRE_Complex *values);
 HYPRE_Int hypre_ParVectorInitialize ( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorInitialize_v2( hypre_ParVector *vector,
                                         HYPRE_MemoryLocation memory_location );
@@ -1291,7 +1267,7 @@ HYPRE_Int hypre_ParVectorSetDataOwner ( hypre_ParVector *vector, HYPRE_Int owns_
 HYPRE_Int hypre_ParVectorSetLocalSize ( hypre_ParVector *vector, HYPRE_Int local_size );
 HYPRE_Int hypre_ParVectorSetNumVectors ( hypre_ParVector *vector, HYPRE_Int num_vectors );
 HYPRE_Int hypre_ParVectorSetComponent ( hypre_ParVector *vector, HYPRE_Int component );
-HYPRE_Int hypre_ParVectorResize ( hypre_ParVector *vector, HYPRE_Int size, HYPRE_Int num_vectors );
+HYPRE_Int hypre_ParVectorResize ( hypre_ParVector *vector, HYPRE_Int num_vectors );
 hypre_ParVector *hypre_ParVectorRead ( MPI_Comm comm, const char *file_name );
 HYPRE_Int hypre_ParVectorSetConstantValues ( hypre_ParVector *v, HYPRE_Complex value );
 HYPRE_Int hypre_ParVectorSetZeros( hypre_ParVector *v );
@@ -1309,8 +1285,6 @@ HYPRE_Int hypre_ParVectorAxpyz ( HYPRE_Complex alpha, hypre_ParVector *x,
 HYPRE_Int hypre_ParVectorMassAxpy ( HYPRE_Complex *alpha, hypre_ParVector **x, hypre_ParVector *y,
                                     HYPRE_Int k, HYPRE_Int unroll);
 HYPRE_Real hypre_ParVectorInnerProd ( hypre_ParVector *x, hypre_ParVector *y );
-HYPRE_Int hypre_ParVectorInnerProdTagged ( hypre_ParVector *x, hypre_ParVector *y,
-                                           HYPRE_Int *num_tags_ptr, HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_ParVectorMassInnerProd ( hypre_ParVector *x, hypre_ParVector **y, HYPRE_Int k,
                                          HYPRE_Int unroll, HYPRE_Real *prod );
 HYPRE_Int hypre_ParVectorMassDotpTwo ( hypre_ParVector *x, hypre_ParVector *y, hypre_ParVector **z,
@@ -1336,17 +1310,10 @@ HYPRE_Int hypre_ParVectorGetValues2( hypre_ParVector *vector, HYPRE_Int num_valu
                                      HYPRE_BigInt *indices, HYPRE_BigInt base, HYPRE_Complex *values );
 HYPRE_Int hypre_ParVectorGetValuesHost(hypre_ParVector *vector, HYPRE_Int num_values,
                                        HYPRE_BigInt *indices, HYPRE_BigInt base, HYPRE_Complex *values);
-HYPRE_Int hypre_ParVectorPointwiseDivpy( hypre_ParVector *x, hypre_ParVector *b,
-                                         hypre_ParVector *y );
-HYPRE_Int hypre_ParVectorPointwiseDivpyMarked( hypre_ParVector *x, hypre_ParVector *b,
-                                               hypre_ParVector *y, HYPRE_Int *marker,
-                                               HYPRE_Int marker_val );
-HYPRE_Int hypre_ParVectorPointwiseDivision( hypre_ParVector *x, hypre_ParVector *y,
-                                            hypre_ParVector **z_ptr );
-HYPRE_Int hypre_ParVectorPointwiseProduct( hypre_ParVector *x, hypre_ParVector *y,
-                                           hypre_ParVector **z_ptr );
-HYPRE_Int hypre_ParVectorPointwiseInverse( hypre_ParVector *x, hypre_ParVector **y_ptr );
-
+HYPRE_Int hypre_ParVectorElmdivpy( hypre_ParVector *x, hypre_ParVector *b, hypre_ParVector *y );
+HYPRE_Int hypre_ParVectorElmdivpyMarked( hypre_ParVector *x, hypre_ParVector *b,
+                                         hypre_ParVector *y, HYPRE_Int *marker,
+                                         HYPRE_Int marker_val );
 /* par_vector_device.c */
 HYPRE_Int hypre_ParVectorGetValuesDevice(hypre_ParVector *vector, HYPRE_Int num_values,
                                          HYPRE_BigInt *indices, HYPRE_BigInt base,
diff --git a/src/parcsr_mv/par_csr_matop.c b/src/parcsr_mv/par_csr_matop.c
index 1d5b095af..24a8939c7 100644
--- a/src/parcsr_mv/par_csr_matop.c
+++ b/src/parcsr_mv/par_csr_matop.c
@@ -7033,7 +7033,12 @@ hypre_ParCSRMatrixColSum( hypre_ParCSRMatrix   *A,
 
    if (exec == HYPRE_EXEC_DEVICE)
    {
-      hypre_ParCSRMatrixColSumDevice(A, b);
+      /* TODO (VPM): hypre_ParCSRMatrixColSumDevice */
+      hypre_ParCSRMatrixMigrate(A, HYPRE_MEMORY_HOST);
+      hypre_ParVectorMigrate(b, HYPRE_MEMORY_HOST);
+      hypre_ParCSRMatrixColSumHost(A, b);
+      hypre_ParCSRMatrixMigrate(A, HYPRE_MEMORY_DEVICE);
+      hypre_ParVectorMigrate(b, HYPRE_MEMORY_DEVICE);
    }
    else
 #endif
@@ -7048,165 +7053,3 @@ hypre_ParCSRMatrixColSum( hypre_ParCSRMatrix   *A,
 
    return hypre_error_flag;
 }
-
-/*--------------------------------------------------------------------------
- * Compute a scaling vector based on matrix coefficients and tags.
- *
- * This function computes a scaling vector for a ParCSR matrix, where each
- * entry in the scaling vector corresponds to a row of the matrix. The
- * scaling is determined by the `type` parameter and, for type 1, by a
- * user-provided tags array.
- *
- * Parameters:
- *   - A:           The ParCSR matrix to analyze.
- *   - type:        The scaling type:
- *                    0: No scaling (returns NULL scaling vector)
- *                    1: For each tag, compute the Frobenius norm of the diagonal block
- *                       (rows and columns with the same tag) and take the inverse
- *                       square root of its magnitude.
- *   - num_tags:    Number of unique tags (blocks/components).
- *   - tags:        Array of length num_rows, assigning a tag to each row.
- *   - scaling_ptr: Output pointer to the resulting scaling vector.
- *
- * Typical usage:
- *   - For multiphysics problems, call this function with type=1
- *     and a tags array indicating the block/component of each row.
- *   - The resulting scaling vector can be used to scale the matrix and/or
- *     right-hand side to improve conditioning or solver performance.
- *
- * Example usage:
- *   hypre_ParCSRMatrixCompScalingTagged(A, 1, num_blocks, block_tags, &scaling);
- *   hypre_ParCSRMatrixDiagScale(A, scaling, scaling);
- *
- * Notes:
- *   - If type=0 or tags=NULL, the function returns without scaling.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParCSRMatrixCompScalingTagged(hypre_ParCSRMatrix  *A,
-                                    HYPRE_Int            type,
-                                    HYPRE_Int            num_tags,
-                                    HYPRE_Int           *tags,
-                                    hypre_ParVector    **scaling_ptr)
-{
-   MPI_Comm                 comm            = hypre_ParCSRMatrixComm(A);
-   HYPRE_BigInt             global_num_rows = hypre_ParCSRMatrixGlobalNumRows(A);
-   HYPRE_BigInt            *row_starts      = hypre_ParCSRMatrixRowStarts(A);
-   HYPRE_Int                num_rows        = hypre_ParCSRMatrixNumRows(A);
-   HYPRE_MemoryLocation     memory_location = hypre_ParCSRMatrixMemoryLocation(A);
-
-   hypre_CSRMatrix         *A_diag          = hypre_ParCSRMatrixDiag(A);
-   HYPRE_Real              *tnorms          = NULL;
-   HYPRE_Real              *local_weights   = NULL;
-   HYPRE_Real              *g_weights       = NULL;
-   HYPRE_Real              *weights         = NULL;
-   HYPRE_Real               tnorm;
-   HYPRE_Int                i;
-
-   /* Sanity check - Return an empty scaling if tags is a null pointer or type = 0 */
-   if (!tags || (type == 0))
-   {
-      hypre_ParVectorDestroy(*scaling_ptr);
-      *scaling_ptr = NULL;
-      return hypre_error_flag;
-   }
-
-   HYPRE_ANNOTATE_FUNC_BEGIN;
-
-   /* Create and initialize scaling vector if it does not exist yet */
-   if (!*scaling_ptr)
-   {
-      *scaling_ptr = hypre_ParVectorCreate(comm, global_num_rows, row_starts);
-      hypre_ParVectorInitialize_v2(*scaling_ptr, HYPRE_MEMORY_HOST);
-   }
-   else
-   {
-      /* No-op if scaling has the same size as the number of local rows in A */
-      hypre_ParVectorResize(*scaling_ptr, num_rows, 1);
-   }
-
-   /* Set tags array if needed */
-   if (!hypre_ParVectorTags(*scaling_ptr) ||
-       num_tags != hypre_ParVectorNumTags(*scaling_ptr))
-   {
-      hypre_ParVectorSetOwnsTags(*scaling_ptr, 1);
-      hypre_ParVectorSetNumTags(*scaling_ptr, num_tags);
-      hypre_ParVectorSetTags(*scaling_ptr, HYPRE_MEMORY_HOST, tags);
-   }
-
-   if (type == 1)
-   {
-      /* Compute Frobenius norms */
-      hypre_CSRMatrixTaggedFnorm(A_diag, num_tags, hypre_ParVectorTags(*scaling_ptr), &tnorms);
-
-      /* Compute local scaling weights */
-      local_weights = hypre_TAlloc(HYPRE_Real, num_tags, HYPRE_MEMORY_HOST);
-      for (i = 0; i < num_tags; i++)
-      {
-         tnorm = tnorms[i * num_tags + i];
-         local_weights[i] = (tnorm > 0.0) ? hypre_squared(tnorm) : 1.0;
-      }
-
-      /* Compute global scaling weights */
-      g_weights = hypre_TAlloc(HYPRE_Real, num_tags, HYPRE_MEMORY_HOST);
-#if defined(HYPRE_USING_GPU)
-      HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1(memory_location);
-
-      if (exec == HYPRE_EXEC_DEVICE)
-      {
-         weights = hypre_TAlloc(HYPRE_Real, num_tags, HYPRE_MEMORY_DEVICE);
-      }
-      else
-#endif
-      {
-         weights = g_weights;
-      }
-
-      hypre_MPI_Allreduce(local_weights, g_weights, num_tags, MPI_DOUBLE, MPI_SUM, comm);
-      for (i = 0; i < num_tags; i++)
-      {
-         g_weights[i] = hypre_sqrt(pow(10.0,
-                                       2 * round( log10(hypre_sqrt(1.0 / g_weights[i])) / 2.0 )));
-      }
-
-      if (weights != g_weights)
-      {
-         hypre_TMemcpy(weights, g_weights, HYPRE_Real, num_tags,
-                       HYPRE_MEMORY_DEVICE, HYPRE_MEMORY_HOST);
-      }
-
-#if 0
-      /* Debug weights */
-      hypre_ParPrintf(comm, "%s - Scaling weights: [ ", __func__);
-      for (i = 0; i < num_tags; i++)
-      {
-         hypre_ParPrintf(comm, "%.0e ", g_weights[i]);
-      }
-      hypre_ParPrintf(comm, "]\n");
-      hypre_MPI_Barrier(comm);
-#endif
-
-      /* Setup scaling vector */
-      hypre_ParVectorSetValuesTagged(*scaling_ptr, weights);
-
-      /* Free memory */
-      hypre_TFree(tnorms, HYPRE_MEMORY_HOST);
-      hypre_TFree(local_weights, HYPRE_MEMORY_HOST);
-      hypre_TFree(g_weights, HYPRE_MEMORY_HOST);
-      if (weights != g_weights)
-      {
-         hypre_TFree(weights, HYPRE_MEMORY_DEVICE);
-      }
-   }
-   else
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Invalid scaling type");
-      HYPRE_ANNOTATE_FUNC_END;
-
-      return hypre_error_flag;
-   }
-
-   HYPRE_ANNOTATE_FUNC_END;
-
-   return hypre_error_flag;
-}
diff --git a/src/parcsr_mv/par_csr_matop_device.c b/src/parcsr_mv/par_csr_matop_device.c
index 94ecdd16a..77fdd6503 100644
--- a/src/parcsr_mv/par_csr_matop_device.c
+++ b/src/parcsr_mv/par_csr_matop_device.c
@@ -2025,88 +2025,4 @@ hypre_ParCSRDiagScaleVectorDevice( hypre_ParCSRMatrix *par_A,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParCSRMatrixColSumDevice( hypre_ParCSRMatrix *A,
-                                hypre_ParVector    *b )
-{
-   hypre_ParCSRCommPkg    *comm_pkg       = hypre_ParCSRMatrixCommPkg(A);
-   hypre_CSRMatrix        *A_diag         = hypre_ParCSRMatrixDiag(A);
-   hypre_CSRMatrix        *A_offd         = hypre_ParCSRMatrixOffd(A);
-   HYPRE_Int               num_cols_diag  = hypre_CSRMatrixNumCols(A_diag);
-   HYPRE_Int               num_cols_offd  = hypre_CSRMatrixNumCols(A_offd);
-   HYPRE_Complex          *b_data         = hypre_ParVectorLocalData(b);
-   HYPRE_Int               num_sends      = hypre_ParCSRCommPkgNumSends(comm_pkg);
-   HYPRE_Int               send_map_num_elmts = hypre_ParCSRCommPkgSendMapStart(comm_pkg, num_sends);
-
-   hypre_ParCSRCommHandle *comm_handle;
-   HYPRE_Complex          *d_send_buf;
-   HYPRE_Complex          *d_recv_buf;
-
-   /*---------------------------------------------------------------------
-    * Allocate/reuse data buffers
-    *--------------------------------------------------------------------*/
-
-   if (!hypre_ParCSRCommPkgTmpData(comm_pkg))
-   {
-      hypre_ParCSRCommPkgTmpData(comm_pkg) = hypre_TAlloc(HYPRE_Complex,
-                                                          num_cols_offd,
-                                                          HYPRE_MEMORY_DEVICE);
-   }
-   d_send_buf = hypre_ParCSRCommPkgTmpData(comm_pkg);
-   hypreDevice_ComplexFilln(d_send_buf, num_cols_offd, 0.0);
-
-   /* send_map_elmts on device */
-   hypre_ParCSRCommPkgCopySendMapElmtsToDevice(comm_pkg);
-
-   /* Allocate receive data buffer */
-   if (!hypre_ParCSRCommPkgBufData(comm_pkg))
-   {
-      hypre_ParCSRCommPkgBufData(comm_pkg) = hypre_TAlloc(HYPRE_Complex,
-                                                          send_map_num_elmts,
-                                                          HYPRE_MEMORY_DEVICE);
-   }
-   d_recv_buf = hypre_ParCSRCommPkgBufData(comm_pkg);
-
-   /*---------------------------------------------------------------------
-    * Overlap communication and computation
-    *--------------------------------------------------------------------*/
-
-   /* Compute off-diagonal contribution to be sent to neighboring ranks */
-   hypre_CSRMatrixComputeColSum(A_offd, d_send_buf, 0, 1.0);
-
-   /* Make sure d_send_buf is ready before communicating it */
-   if (hypre_GetGpuAwareMPI())
-   {
-      hypre_ForceSyncComputeStream();
-   }
-
-   /* Non-blocking communication starts */
-   comm_handle = hypre_ParCSRCommHandleCreate_v2(2, comm_pkg,
-                                                 HYPRE_MEMORY_DEVICE, d_send_buf,
-                                                 HYPRE_MEMORY_DEVICE, d_recv_buf );
-
-   /* Compute diagonal contribution */
-   hypre_CSRMatrixComputeColSum(A_diag, b_data, 0, 1.0);
-
-   /* Non-blocking communication ends */
-   hypre_ParCSRCommHandleDestroy(comm_handle);
-
-   /* Make sure b_data is ready before updating it below */
-   if (hypre_GetGpuAwareMPI())
-   {
-      hypre_ForceSyncComputeStream();
-   }
-
-   /* Compute off-diagonal contribution by unpacking data via SpMV */
-   hypre_ParCSRMatrixMatvecT_unpack(comm_pkg, num_cols_diag, d_recv_buf, b_data);
-
-   /* Final sync to ensure all updates are complete before returning */
-   hypre_SyncComputeStream();
-
-   return hypre_error_flag;
-}
-
 #endif // #if defined(HYPRE_USING_GPU) || defined(HYPRE_USING_DEVICE_OPENMP)
diff --git a/src/parcsr_mv/par_csr_matrix.c b/src/parcsr_mv/par_csr_matrix.c
index 2ef0f41ef..19639e880 100644
--- a/src/parcsr_mv/par_csr_matrix.c
+++ b/src/parcsr_mv/par_csr_matrix.c
@@ -22,15 +22,17 @@
    accessor functions become proper functions at some later date, this will not
    be necessary. AJC 4/99 */
 
-HYPRE_Int hypre_FillResponseParToCSRMatrix(void*, HYPRE_Int, HYPRE_Int, void*,
-                                           MPI_Comm, void**, HYPRE_Int*);
+HYPRE_Int hypre_FillResponseParToCSRMatrix(void*, HYPRE_Int, HYPRE_Int, void*, MPI_Comm, void**,
+                                           HYPRE_Int*);
 
 /*--------------------------------------------------------------------------
- * If create is called and row_starts and col_starts are NOT null, then it is
- * assumed that they are of length 2 containing the start row of the calling
- * processor followed by the start row of the next processor - AHB 6/05
+ * hypre_ParCSRMatrixCreate
  *--------------------------------------------------------------------------*/
 
+/* If create is called and row_starts and col_starts are NOT null, then it is
+   assumed that they are of length 2 containing the start row of the calling
+   processor followed by the start row of the next processor - AHB 6/05 */
+
 hypre_ParCSRMatrix*
 hypre_ParCSRMatrixCreate( MPI_Comm      comm,
                           HYPRE_BigInt  global_num_rows,
@@ -134,7 +136,7 @@ hypre_ParCSRMatrixCreate( MPI_Comm      comm,
 }
 
 /*--------------------------------------------------------------------------
- * Destroys a ParCSR matrix object
+ * hypre_ParCSRMatrixDestroy
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -214,9 +216,7 @@ hypre_ParCSRMatrixDestroy( hypre_ParCSRMatrix *matrix )
 }
 
 /*--------------------------------------------------------------------------
- * Allocates memory and initializes the data structures of a ParCSR matrix
- * at a given memory location, including its diagonal and off-diagonal CSR
- * blocks and the column map for off-processor columns.
+ * hypre_ParCSRMatrixInitialize_v2
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -241,7 +241,7 @@ hypre_ParCSRMatrixInitialize_v2( hypre_ParCSRMatrix   *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Initializes a ParCSR matrix using its configured memory location
+ * hypre_ParCSRMatrixInitialize
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -251,6 +251,7 @@ hypre_ParCSRMatrixInitialize( hypre_ParCSRMatrix *matrix )
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixClone
  * Creates and returns a new copy S of the argument A
  * The following variables are not copied because they will be constructed
  * later if needed: CommPkg, CommPkgT, rowindices, rowvalues
@@ -287,7 +288,7 @@ hypre_ParCSRMatrixClone_v2(hypre_ParCSRMatrix   *A,
 }
 
 /*--------------------------------------------------------------------------
- * Clones a ParCSR matrix using its memory location. Optionally copies data.
+ * hypre_ParCSRMatrixClone
  *--------------------------------------------------------------------------*/
 
 hypre_ParCSRMatrix*
@@ -297,7 +298,7 @@ hypre_ParCSRMatrixClone(hypre_ParCSRMatrix *A, HYPRE_Int copy_data)
 }
 
 /*--------------------------------------------------------------------------
- * Migrates a ParCSR matrix to a new memory location
+ * hypre_ParCSRMatrixMigrate
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -326,6 +327,7 @@ hypre_ParCSRMatrixMigrate(hypre_ParCSRMatrix   *A,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixSetNumNonzeros_core
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -385,8 +387,7 @@ hypre_ParCSRMatrixSetNumNonzeros_core( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Computes and sets the total number of nonzero entries in a ParCSR matrix
- * as a HYPRE_BigInt data type.
+ * hypre_ParCSRMatrixSetNumNonzeros
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -396,8 +397,7 @@ hypre_ParCSRMatrixSetNumNonzeros( hypre_ParCSRMatrix *matrix )
 }
 
 /*--------------------------------------------------------------------------
- * Computes and sets the total number of nonzero entries in a ParCSR matrix
- * as a HYPRE_Complex data type.
+ * hypre_ParCSRMatrixSetDNumNonzeros
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -407,8 +407,7 @@ hypre_ParCSRMatrixSetDNumNonzeros( hypre_ParCSRMatrix *matrix )
 }
 
 /*--------------------------------------------------------------------------
- * Computes and sets the global number of structurally nonzero rows
- * (rows with at least one nonzero) in a ParCSR matrix.
+ * hypre_ParCSRMatrixSetNumRownnz
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -466,8 +465,7 @@ hypre_ParCSRMatrixSetNumRownnz( hypre_ParCSRMatrix *matrix )
 }
 
 /*--------------------------------------------------------------------------
- * Sets the data ownership flag of a ParCSR matrix.
- * When owns_data is nonzero, the matrix is responsible for freeing its data.
+ * hypre_ParCSRMatrixSetDataOwner
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -486,9 +484,7 @@ hypre_ParCSRMatrixSetDataOwner( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Sets the pattern-only flag for the diagonal and off-diagonal parts of
- * a ParCSR matrix. When this flag is set, only the matrix sparsity pattern
- * is maintained, not the numerical values.
+ * hypre_ParCSRMatrixSetPatternOnly
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -515,7 +511,7 @@ hypre_ParCSRMatrixSetPatternOnly( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Creates a ParCSR matrix object from a DenseBlock matrix
+ * hypre_ParCSRMatrixCreateFromDenseBlockMatrix
  *--------------------------------------------------------------------------*/
 
 hypre_ParCSRMatrix*
@@ -616,7 +612,7 @@ hypre_ParCSRMatrixCreateFromDenseBlockMatrix(MPI_Comm                comm,
 }
 
 /*--------------------------------------------------------------------------
- * Creates a diagonal ParCSR matrix object from a ParVector.
+ * hypre_ParCSRMatrixCreateFromParVector
  *--------------------------------------------------------------------------*/
 
 hypre_ParCSRMatrix*
@@ -728,7 +724,7 @@ hypre_ParCSRMatrixCreateFromParVector(hypre_ParVector *b,
 }
 
 /*--------------------------------------------------------------------------
- * Reads from file a ParCSR matrix stored in CSR representation.
+ * hypre_ParCSRMatrixRead
  *--------------------------------------------------------------------------*/
 
 hypre_ParCSRMatrix *
@@ -827,8 +823,7 @@ hypre_ParCSRMatrixRead( MPI_Comm    comm,
 }
 
 /*--------------------------------------------------------------------------
- * Prints a ParCSRMatrix in ASCII format using CSR representation.
- * The data from each process is printed to a separate file.
+ * hypre_ParCSRMatrixPrint
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -880,8 +875,8 @@ hypre_ParCSRMatrixPrint( hypre_ParCSRMatrix *matrix,
    hypre_fprintf(fp, "%d\n", num_cols_offd);
    row_s = hypre_ParCSRMatrixFirstRowIndex(matrix);
    row_e = hypre_ParCSRMatrixLastRowIndex(matrix);
-   col_s = hypre_ParCSRMatrixFirstColDiag(matrix);
-   col_e = hypre_ParCSRMatrixLastColDiag(matrix);
+   col_s =  hypre_ParCSRMatrixFirstColDiag(matrix);
+   col_e =  hypre_ParCSRMatrixLastColDiag(matrix);
 
    /* add 1 to the ends because this is a starts partition */
    hypre_fprintf(fp, "%b %b %b %b\n", row_s, row_e + 1, col_s, col_e + 1);
@@ -895,8 +890,7 @@ hypre_ParCSRMatrixPrint( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Prints a ParCSRMatrix in ASCII format using hypre's IJ (COO) representation.
- * The data from each process is printed to a separate file.
+ * hypre_ParCSRMatrixPrintIJ
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -1045,6 +1039,8 @@ hypre_ParCSRMatrixPrintIJ( const hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixPrintBinaryIJ
+ *
  * Prints a ParCSRMatrix in binary format. The data from each process is
  * printed to a separate file. Metadata info about the matrix is printed in
  * the header section of every file, and it is followed by the raw data, i.e.,
@@ -1374,7 +1370,7 @@ hypre_ParCSRMatrixPrintBinaryIJ( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
- * Reads from file a ParCSR matrix stored in hypre's IJ representation.
+ * hypre_ParCSRMatrixReadIJ
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -1544,7 +1540,8 @@ hypre_ParCSRMatrixReadIJ( MPI_Comm             comm,
 }
 
 /*--------------------------------------------------------------------------
- * Returns the row numbers of the rows stored on this processor.
+ * hypre_ParCSRMatrixGetLocalRange
+ * returns the row numbers of the rows stored on this processor.
  * "End" is actually the row number of the last row on this processor.
  *--------------------------------------------------------------------------*/
 
@@ -1574,6 +1571,7 @@ hypre_ParCSRMatrixGetLocalRange( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixGetRow
  * Returns global column indices and/or values for a given row in the global
  * matrix. Global row number is used, but the row must be stored locally or
  * an error is returned. This implementation copies from the two matrices that
@@ -1760,9 +1758,6 @@ hypre_ParCSRMatrixGetRowHost( hypre_ParCSRMatrix  *mat,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * Extracts a row from a ParCSRMatrix
- *--------------------------------------------------------------------------*/
 
 HYPRE_Int
 hypre_ParCSRMatrixGetRow( hypre_ParCSRMatrix  *mat,
@@ -1788,6 +1783,7 @@ hypre_ParCSRMatrixGetRow( hypre_ParCSRMatrix  *mat,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixRestoreRow
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -1814,8 +1810,11 @@ hypre_ParCSRMatrixRestoreRow( hypre_ParCSRMatrix *matrix,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_CSRMatrixToParCSRMatrix:
+ *
  * Generates a ParCSRMatrix distributed across the processors in comm
  * from a CSRMatrix on proc 0 .
+ *
  *--------------------------------------------------------------------------*/
 
 hypre_ParCSRMatrix *
@@ -1824,46 +1823,44 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
                                HYPRE_BigInt    *global_row_starts,
                                HYPRE_BigInt    *global_col_starts )
 {
-   HYPRE_MemoryLocation  memory_location;
-   hypre_ParCSRMatrix   *parcsr_A;
-
-   HYPRE_BigInt         *global_data;
-   HYPRE_BigInt          global_size;
-   HYPRE_BigInt          global_num_rows;
-   HYPRE_BigInt          global_num_cols;
-
-   HYPRE_Int             num_procs, my_id;
-   HYPRE_Int            *num_rows_proc;
-   HYPRE_Int            *num_nonzeros_proc;
-   HYPRE_BigInt          row_starts[2];
-   HYPRE_BigInt          col_starts[2];
-   HYPRE_Int             valid_row_starts = 0;
-   HYPRE_Int             valid_col_starts = 0;
-   HYPRE_Int             send_start;
-
-   hypre_CSRMatrix      *local_A;
-   HYPRE_Complex        *A_data = NULL;
-   HYPRE_Int            *A_i = NULL;
-   HYPRE_Int            *A_j = NULL;
-
-   hypre_MPI_Request    *requests;
-   hypre_MPI_Status     *status, status0;
-   hypre_MPI_Datatype   *csr_matrix_datatypes;
-
-   HYPRE_Int             free_global_row_starts = 0;
-   HYPRE_Int             free_global_col_starts = 0;
-
-   HYPRE_Int             total_size;
-   HYPRE_BigInt          first_col_diag;
-   HYPRE_BigInt          last_col_diag;
-   HYPRE_Int             num_rows;
-   HYPRE_Int             num_nonzeros;
-   HYPRE_Int             i, ind;
+   hypre_ParCSRMatrix *parcsr_A;
+
+   HYPRE_BigInt       *global_data;
+   HYPRE_BigInt        global_size;
+   HYPRE_BigInt        global_num_rows;
+   HYPRE_BigInt        global_num_cols;
+
+   HYPRE_Int           num_procs, my_id;
+   HYPRE_Int          *num_rows_proc;
+   HYPRE_Int          *num_nonzeros_proc;
+   HYPRE_BigInt        row_starts[2];
+   HYPRE_BigInt        col_starts[2];
+   HYPRE_Int           valid_row_starts = 0;
+   HYPRE_Int           valid_col_starts = 0;
+
+   hypre_CSRMatrix    *local_A;
+   HYPRE_Complex      *A_data = NULL;
+   HYPRE_Int          *A_i = NULL;
+   HYPRE_Int          *A_j = NULL;
+
+   hypre_MPI_Request  *requests;
+   hypre_MPI_Status   *status, status0;
+   hypre_MPI_Datatype *csr_matrix_datatypes;
+
+   HYPRE_Int           free_global_row_starts = 0;
+   HYPRE_Int           free_global_col_starts = 0;
+
+   HYPRE_Int           total_size;
+   HYPRE_BigInt        first_col_diag;
+   HYPRE_BigInt        last_col_diag;
+   HYPRE_Int           num_rows;
+   HYPRE_Int           num_nonzeros;
+   HYPRE_Int           i, ind;
 
    hypre_MPI_Comm_rank(comm, &my_id);
    hypre_MPI_Comm_size(comm, &num_procs);
 
-   total_size = 5;
+   total_size = 4;
    if (my_id == 0)
    {
       total_size += 2 * (num_procs + 1);
@@ -1872,7 +1869,7 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
    global_data = hypre_CTAlloc(HYPRE_BigInt, total_size, HYPRE_MEMORY_HOST);
    if (my_id == 0)
    {
-      global_size = 4;
+      global_size = 3;
       if (global_row_starts)
       {
          if (global_col_starts)
@@ -1884,34 +1881,34 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
                   if 1: only global_row_starts given, global_col_starts = NULL
                   if 2: both global_row_starts and global_col_starts given
                   if 3: only global_col_starts given, global_row_starts = NULL */
-               global_data[4] = 2;
+               global_data[3] = 2;
                global_size += (HYPRE_BigInt) (2 * (num_procs + 1) + 1);
                for (i = 0; i < (num_procs + 1); i++)
                {
-                  global_data[i + 5] = global_row_starts[i];
+                  global_data[i + 4] = global_row_starts[i];
                }
                for (i = 0; i < (num_procs + 1); i++)
                {
-                  global_data[i + num_procs + 6] = global_col_starts[i];
+                  global_data[i + num_procs + 5] = global_col_starts[i];
                }
             }
             else
             {
-               global_data[4] = 0;
+               global_data[3] = 0;
                global_size += (HYPRE_BigInt) ((num_procs + 1) + 1);
                for (i = 0; i < (num_procs + 1); i++)
                {
-                  global_data[i + 5] = global_row_starts[i];
+                  global_data[i + 4] = global_row_starts[i];
                }
             }
          }
          else
          {
-            global_data[4] = 1;
+            global_data[3] = 1;
             global_size += (HYPRE_BigInt) ((num_procs + 1) + 1);
             for (i = 0; i < (num_procs + 1); i++)
             {
-               global_data[i + 5] = global_row_starts[i];
+               global_data[i + 4] = global_row_starts[i];
             }
          }
       }
@@ -1919,40 +1916,40 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
       {
          if (global_col_starts)
          {
-            global_data[4] = 3;
+            global_data[3] = 3;
             global_size += (HYPRE_BigInt) ((num_procs + 1) + 1);
             for (i = 0; i < (num_procs + 1); i++)
             {
-               global_data[i + 5] = global_col_starts[i];
+               global_data[i + 4] = global_col_starts[i];
             }
          }
       }
 
       global_data[0] = (HYPRE_BigInt) hypre_CSRMatrixNumRows(A);
       global_data[1] = (HYPRE_BigInt) hypre_CSRMatrixNumCols(A);
-      global_data[2] = (HYPRE_BigInt) hypre_CSRMatrixMemoryLocation(A);
-      global_data[3] = global_size;
+      global_data[2] = global_size;
       A_data = hypre_CSRMatrixData(A);
       A_i = hypre_CSRMatrixI(A);
       A_j = hypre_CSRMatrixJ(A);
    }
-   hypre_MPI_Bcast(global_data, 4, HYPRE_MPI_BIG_INT, 0, comm);
+   hypre_MPI_Bcast(global_data, 3, HYPRE_MPI_BIG_INT, 0, comm);
    global_num_rows = global_data[0];
    global_num_cols = global_data[1];
-   memory_location = (HYPRE_MemoryLocation) global_data[2];
-   global_size     = global_data[3];
+   global_size     = global_data[2];
 
-   if (global_size > 4)
+   if (global_size > 3)
    {
-      if (global_data[4] == 2)
+      HYPRE_Int  send_start;
+
+      if (global_data[3] == 2)
       {
          valid_row_starts = valid_col_starts = 1;
 
-         send_start = 5;
+         send_start = 4;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &row_starts[0], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
-         send_start = 6;
+         send_start = 5;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &row_starts[1], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
@@ -1960,23 +1957,23 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &col_starts[0], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
-         send_start = 6 + (num_procs + 1);
+         send_start = 5 + (num_procs + 1);
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &col_starts[1], 1, HYPRE_MPI_BIG_INT, 0, comm);
       }
-      else if ((global_data[4] == 0) || (global_data[4] == 1))
+      else if ((global_data[3] == 0) || (global_data[3] == 1))
       {
          valid_row_starts = 1;
 
-         send_start = 5;
+         send_start = 4;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &row_starts[0], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
-         send_start = 6;
+         send_start = 5;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &row_starts[1], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
-         if (global_data[4] == 0)
+         if (global_data[3] == 0)
          {
             valid_col_starts = 1;
 
@@ -1988,11 +1985,11 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
       {
          valid_col_starts = 1;
 
-         send_start = 5;
+         send_start = 4;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &col_starts[0], 1, HYPRE_MPI_BIG_INT, 0, comm);
 
-         send_start = 6;
+         send_start = 5;
          hypre_MPI_Scatter(&global_data[send_start], 1, HYPRE_MPI_BIG_INT,
                            &col_starts[1], 1, HYPRE_MPI_BIG_INT, 0, comm);
       }
@@ -2034,7 +2031,6 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
 
    /* RL: this is not correct: (HYPRE_Int) global_num_cols */
    local_A = hypre_CSRMatrixCreate(num_rows, (HYPRE_Int) global_num_cols, num_nonzeros);
-   hypre_CSRMatrixMemoryLocation(local_A) = memory_location;
 
    csr_matrix_datatypes = hypre_CTAlloc(hypre_MPI_Datatype,  num_procs, HYPRE_MEMORY_HOST);
    if (my_id == 0)
@@ -2076,7 +2072,7 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
    }
    else
    {
-      hypre_CSRMatrixInitialize_v2(local_A, 0, memory_location);
+      hypre_CSRMatrixInitialize(local_A);
       hypre_BuildCSRMatrixMPIDataType(num_nonzeros,
                                       num_rows,
                                       hypre_CSRMatrixData(local_A),
@@ -2093,7 +2089,7 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
    first_col_diag = hypre_ParCSRMatrixFirstColDiag(parcsr_A);
    last_col_diag  = hypre_ParCSRMatrixLastColDiag(parcsr_A);
 
-   hypre_GenerateDiagAndOffd(local_A, parcsr_A, first_col_diag, last_col_diag);
+   GenerateDiagAndOffd(local_A, parcsr_A, first_col_diag, last_col_diag);
 
    /* set pointers back to NULL before destroying */
    if (my_id == 0)
@@ -2108,15 +2104,12 @@ hypre_CSRMatrixToParCSRMatrix( MPI_Comm         comm,
    return parcsr_A;
 }
 
-/*--------------------------------------------------------------------------
- * RL: XXX this is not a scalable routine, see `marker' therein
- *--------------------------------------------------------------------------*/
-
+/* RL: XXX this is not a scalable routine, see `marker' therein */
 HYPRE_Int
-hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
-                          hypre_ParCSRMatrix *matrix,
-                          HYPRE_BigInt        first_col_diag,
-                          HYPRE_BigInt        last_col_diag)
+GenerateDiagAndOffd(hypre_CSRMatrix    *A,
+                    hypre_ParCSRMatrix *matrix,
+                    HYPRE_BigInt        first_col_diag,
+                    HYPRE_BigInt        last_col_diag)
 {
    HYPRE_Int  i, j;
    HYPRE_Int  jo, jd;
@@ -2124,7 +2117,6 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
    HYPRE_Int  num_cols = hypre_CSRMatrixNumCols(A);
    HYPRE_Complex *a_data = hypre_CSRMatrixData(A);
    HYPRE_Int *a_i = hypre_CSRMatrixI(A);
-
    /*RL: XXX FIXME if A spans global column space, the following a_j should be bigJ */
    HYPRE_Int *a_j = hypre_CSRMatrixJ(A);
 
@@ -2156,6 +2148,11 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
       offd_i = hypre_CSRMatrixI(offd);
       marker = hypre_CTAlloc(HYPRE_Int, num_cols, HYPRE_MEMORY_HOST);
 
+      for (i = 0; i < num_cols; i++)
+      {
+         marker[i] = 0;
+      }
+
       jo = 0;
       jd = 0;
       for (i = 0; i < num_rows; i++)
@@ -2183,8 +2180,7 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
       offd_i[num_rows] = jo;
       diag_i[num_rows] = jd;
 
-      hypre_ParCSRMatrixColMapOffd(matrix) = hypre_CTAlloc(HYPRE_BigInt,
-                                                           num_cols_offd,
+      hypre_ParCSRMatrixColMapOffd(matrix) = hypre_CTAlloc(HYPRE_BigInt, num_cols_offd,
                                                            HYPRE_MEMORY_HOST);
       col_map_offd = hypre_ParCSRMatrixColMapOffd(matrix);
 
@@ -2200,13 +2196,13 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
       }
 
       hypre_CSRMatrixNumNonzeros(diag) = jd;
-      hypre_CSRMatrixInitialize_v2(diag, 0, memory_location);
+      hypre_CSRMatrixInitialize(diag);
       diag_data = hypre_CSRMatrixData(diag);
       diag_j = hypre_CSRMatrixJ(diag);
 
       hypre_CSRMatrixNumNonzeros(offd) = jo;
       hypre_CSRMatrixNumCols(offd) = num_cols_offd;
-      hypre_CSRMatrixInitialize_v2(offd, 0, memory_location);
+      hypre_CSRMatrixInitialize(offd);
       offd_data = hypre_CSRMatrixData(offd);
       offd_j = hypre_CSRMatrixJ(offd);
 
@@ -2216,8 +2212,7 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
       {
          for (j = a_i[i] - first_elmt; j < a_i[i + 1] - first_elmt; j++)
          {
-            if (a_j[j] < (HYPRE_Int) first_col_diag ||
-                a_j[j] > (HYPRE_Int) last_col_diag)
+            if (a_j[j] < (HYPRE_Int)first_col_diag || a_j[j] > (HYPRE_Int)last_col_diag)
             {
                offd_data[jo] = a_data[j];
                offd_j[jo++] = marker[a_j[j]];
@@ -2234,7 +2229,7 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
    else
    {
       hypre_CSRMatrixNumNonzeros(diag) = num_nonzeros;
-      hypre_CSRMatrixInitialize_v2(diag, 0, memory_location);
+      hypre_CSRMatrixInitialize(diag);
       diag_data = hypre_CSRMatrixData(diag);
       diag_i = hypre_CSRMatrixI(diag);
       diag_j = hypre_CSRMatrixJ(diag);
@@ -2244,7 +2239,7 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
          diag_data[i] = a_data[i];
          diag_j[i] = a_j[i];
       }
-      offd_i = hypre_CTAlloc(HYPRE_Int, num_rows + 1, memory_location);
+      offd_i = hypre_CTAlloc(HYPRE_Int,  num_rows + 1, HYPRE_MEMORY_HOST);
 
       for (i = 0; i < num_rows + 1; i++)
       {
@@ -2254,16 +2249,11 @@ hypre_GenerateDiagAndOffd(hypre_CSRMatrix    *A,
 
       hypre_CSRMatrixNumCols(offd) = 0;
       hypre_CSRMatrixI(offd) = offd_i;
-      hypre_CSRMatrixMemoryLocation(offd) = memory_location;
    }
 
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * Host implementation of hypre_MergeDiagAndOffd
- *--------------------------------------------------------------------------*/
-
 hypre_CSRMatrix *
 hypre_MergeDiagAndOffdHost(hypre_ParCSRMatrix *par_matrix)
 {
@@ -2344,11 +2334,6 @@ hypre_MergeDiagAndOffdHost(hypre_ParCSRMatrix *par_matrix)
    return matrix;
 }
 
-/*--------------------------------------------------------------------------
- * Creates a CSR matrix by merging the diagonal and off-diagonal blocks of
- * a ParCSR matrix.
- *--------------------------------------------------------------------------*/
-
 hypre_CSRMatrix *
 hypre_MergeDiagAndOffd(hypre_ParCSRMatrix *par_matrix)
 {
@@ -2367,7 +2352,8 @@ hypre_MergeDiagAndOffd(hypre_ParCSRMatrix *par_matrix)
 }
 
 /*--------------------------------------------------------------------------
- * See hypre_ParCSRMatrixToCSRMatrixAll_v2.
+ * hypre_ParCSRMatrixToCSRMatrixAll
+ *
  * The resulting matrix is stored in the space given by memory_location
  *--------------------------------------------------------------------------*/
 
@@ -2378,6 +2364,8 @@ hypre_ParCSRMatrixToCSRMatrixAll(hypre_ParCSRMatrix *par_A)
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixToCSRMatrixAll_v2
+ *
  * Generates a CSRMatrix from a ParCSRMatrix on all processors that have
  * parts of the ParCSRMatrix
  *
@@ -2686,8 +2674,9 @@ hypre_ParCSRMatrixToCSRMatrixAll_v2( hypre_ParCSRMatrix   *par_matrix,
 }
 
 /*--------------------------------------------------------------------------
- * copies a ParCSR matrix B to A.
- * If copy_data = 0, only the structure of A is copied to B
+ * hypre_ParCSRMatrixCopy,
+ * copies B to A,
+ * if copy_data = 0, only the structure of A is copied to B
  * the routine does not check whether the dimensions of A and B are compatible
  *--------------------------------------------------------------------------*/
 
@@ -2746,6 +2735,7 @@ hypre_ParCSRMatrixCopy( hypre_ParCSRMatrix *A,
 }
 
 /*--------------------------------------------------------------------
+ * hypre_FillResponseParToCSRMatrix
  * Fill response function for determining the send processors
  * data exchange
  *--------------------------------------------------------------------*/
@@ -2814,6 +2804,8 @@ hypre_FillResponseParToCSRMatrix( void       *p_recv_contact_buf,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixUnion
+ *
  * Creates and returns a new matrix whose elements are the union of A and B.
  * Data is not copied, only structural information is created.
  * A and B must have the same communicator, numbers and distributions of rows
@@ -2879,6 +2871,8 @@ hypre_ParCSRMatrixUnion( hypre_ParCSRMatrix *A,
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_ParCSRMatrixTruncate
+ *
  * Perform dual truncation of ParCSR matrix.
  *
  * This code is adapted from original BoomerAMGInterpTruncate()
@@ -3487,7 +3481,7 @@ hypre_ParCSRMatrixTruncate(hypre_ParCSRMatrix *A,
 }
 
 /*--------------------------------------------------------------------------
- * Set all matrix coefficients to a given value
+ * hypre_ParCSRMatrixSetConstantValues
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
@@ -3501,7 +3495,7 @@ hypre_ParCSRMatrixSetConstantValues( hypre_ParCSRMatrix *A,
 }
 
 /*--------------------------------------------------------------------------
- * Copies col_map_offd to host memory
+ * hypre_ParCSRMatrixCopyColMapOffdToDevice
  *--------------------------------------------------------------------------*/
 
 void
@@ -3527,7 +3521,7 @@ hypre_ParCSRMatrixCopyColMapOffdToDevice(hypre_ParCSRMatrix *A)
 }
 
 /*--------------------------------------------------------------------------
- * Copies col_map_offd to device memory
+ * hypre_ParCSRMatrixCopyColMapOffdToHost
  *--------------------------------------------------------------------------*/
 
 void
diff --git a/src/parcsr_mv/par_vector.c b/src/parcsr_mv/par_vector.c
index 36e74fed1..32b1907c0 100644
--- a/src/parcsr_mv/par_vector.c
+++ b/src/parcsr_mv/par_vector.c
@@ -146,60 +146,6 @@ hypre_ParVectorSetData(hypre_ParVector *vector,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * hypre_ParVectorSetOwnsTags
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorSetOwnsTags(hypre_ParVector *vector,
-                           HYPRE_Int        owns_tags)
-{
-   hypre_SeqVectorSetOwnsTags(hypre_ParVectorLocalVector(vector), owns_tags);
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_ParVectorSetNumTags
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorSetNumTags(hypre_ParVector *vector,
-                          HYPRE_Int        num_tags)
-{
-   hypre_SeqVectorSetNumTags(hypre_ParVectorLocalVector(vector), num_tags);
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_ParVectorSetTags
- *
- * Sets an existing tags array to a ParVector's local vector.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorSetTags(hypre_ParVector      *vector,
-                       HYPRE_MemoryLocation  memory_location,
-                       HYPRE_Int            *tags)
-{
-   hypre_SeqVectorSetTags(hypre_ParVectorLocalVector(vector), memory_location, tags);
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorSetValuesTagged(hypre_ParVector  *vector,
-                               HYPRE_Complex    *values)
-{
-   hypre_SeqVectorSetValuesTagged(hypre_ParVectorLocalVector(vector), values);
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_ParVectorInitialize_v2
  *
@@ -304,12 +250,11 @@ hypre_ParVectorSetNumVectors( hypre_ParVector *vector,
 
 HYPRE_Int
 hypre_ParVectorResize( hypre_ParVector *vector,
-                       HYPRE_Int        size,
                        HYPRE_Int        num_vectors )
 {
    if (vector)
    {
-      hypre_SeqVectorResize(hypre_ParVectorLocalVector(vector), size, num_vectors);
+      hypre_SeqVectorResize(hypre_ParVectorLocalVector(vector), num_vectors);
    }
 
    return hypre_error_flag;
@@ -620,219 +565,46 @@ hypre_ParVectorInnerProd( hypre_ParVector *x,
 }
 
 /*--------------------------------------------------------------------------
- * hypre_ParVectorInnerProdTagged
- *
- * Computes the "marked" inner product of two vectors x and y, i.e., an array
- * of inner products computed from entries marked with tags.
- *
- * Resulting array is stored in host memory.
- *  - iprod[0]: inner product of full vector
- *  - iprod[i + 1]: inner product computed from entries marked with "i" tag
- *
- * Output data:
- *  - num_tags_ptr: pointer to number of tags
- *  - iprod_ptr: pointer to array of inner products
- *               (allocated by the caller, otherwise allocated here)
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorInnerProdTagged( hypre_ParVector  *x,
-                                hypre_ParVector  *y,
-                                HYPRE_Int        *num_tags_ptr,
-                                HYPRE_Complex   **iprod_ptr )
-{
-   MPI_Comm       comm        = hypre_ParVectorComm(x);
-   hypre_Vector  *x_local     = hypre_ParVectorLocalVector(x);
-   hypre_Vector  *y_local     = hypre_ParVectorLocalVector(y);
-   HYPRE_Int     *tags        = hypre_ParVectorTags(x);
-   HYPRE_Int      num_tags    = hypre_ParVectorNumTags(x);
-
-   HYPRE_Complex *iprod;
-   HYPRE_Complex *iprod_local;
-
-   /* Allocate output inner product array if needed */
-   if (*iprod_ptr == NULL)
-   {
-      iprod = hypre_CTAlloc(HYPRE_Complex, num_tags + 1, HYPRE_MEMORY_HOST);
-   }
-   else
-   {
-      iprod = *iprod_ptr;
-   }
-
-   /* Fallback to full vector inner product if num_tags == 1 or tags is NULL */
-   if (num_tags == 1 || !tags)
-   {
-      iprod[0] = hypre_ParVectorInnerProd(x, y);
-
-      *num_tags_ptr = 1;
-      *iprod_ptr = iprod;
-
-      return hypre_error_flag;
-   }
-
-   /* Initialize work array */
-   iprod_local = hypre_CTAlloc(HYPRE_Complex, num_tags + 1, HYPRE_MEMORY_HOST);
-
-   /* Compute local inner products */
-   hypre_SeqVectorInnerProdTagged(x_local, y_local, iprod_local);
-
-   /* Exit early in case of issues in the previous call */
-   if (hypre_error_flag)
-   {
-      return hypre_error_flag;
-   }
-
-   /* Global inner products */
-   hypre_MPI_Allreduce(iprod_local, iprod, num_tags + 1,
-                       HYPRE_MPI_COMPLEX, hypre_MPI_SUM, comm);
-
-   /* Return results */
-   *num_tags_ptr = num_tags;
-   *iprod_ptr    = iprod;
-
-   /* Free memory */
-   hypre_TFree(iprod_local, HYPRE_MEMORY_HOST);
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_ParVectorPointwiseDivpy
+ * hypre_ParVectorElmdivpy
  *
  * y = y + x ./ b [MATLAB Notation]
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_ParVectorPointwiseDivpy( hypre_ParVector *x,
-                               hypre_ParVector *b,
-                               hypre_ParVector *y )
+hypre_ParVectorElmdivpy( hypre_ParVector *x,
+                         hypre_ParVector *b,
+                         hypre_ParVector *y )
 {
    hypre_Vector *x_local = hypre_ParVectorLocalVector(x);
    hypre_Vector *b_local = hypre_ParVectorLocalVector(b);
    hypre_Vector *y_local = hypre_ParVectorLocalVector(y);
 
-   return hypre_SeqVectorPointwiseDivpy(x_local, b_local, y_local);
+   return hypre_SeqVectorElmdivpy(x_local, b_local, y_local);
 }
 
 /*--------------------------------------------------------------------------
- * hypre_ParVectorPointwiseDivpyMarked
+ * hypre_ParVectorElmdivpyMarked
  *
  * y[i] += x[i] / b[i] where marker[i] == marker_val
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_ParVectorPointwiseDivpyMarked( hypre_ParVector *x,
-                                     hypre_ParVector *b,
-                                     hypre_ParVector *y,
-                                     HYPRE_Int       *marker,
-                                     HYPRE_Int        marker_val )
+hypre_ParVectorElmdivpyMarked( hypre_ParVector *x,
+                               hypre_ParVector *b,
+                               hypre_ParVector *y,
+                               HYPRE_Int       *marker,
+                               HYPRE_Int        marker_val )
 {
    hypre_Vector *x_local = hypre_ParVectorLocalVector(x);
    hypre_Vector *b_local = hypre_ParVectorLocalVector(b);
    hypre_Vector *y_local = hypre_ParVectorLocalVector(y);
 
-   return hypre_SeqVectorPointwiseDivpyMarked(x_local, b_local, y_local, marker, marker_val);
-}
-
-/*--------------------------------------------------------------------------
- * Computes the element-wise division of two vectors: z[i] = y[i] / x[i]
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorPointwiseDivision( hypre_ParVector  *x,
-                                  hypre_ParVector  *y,
-                                  hypre_ParVector **z_ptr )
-{
-   hypre_Vector *x_local = hypre_ParVectorLocalVector(x);
-   hypre_Vector *y_local = hypre_ParVectorLocalVector(y);
-
-   /* Create and initialize z if it doesn't exist, or resize it */
-   if (!*z_ptr)
-   {
-      *z_ptr = hypre_ParVectorCreate(hypre_ParVectorComm(x),
-                                     hypre_ParVectorGlobalSize(x),
-                                     hypre_ParVectorPartitioning(x));
-      hypre_ParVectorInitialize_v2(*z_ptr, hypre_ParVectorMemoryLocation(x));
-   }
-   else
-   {
-      /* Resize z to match the number of vectors and size of x */
-      hypre_ParVectorResize(*z_ptr, hypre_ParVectorLocalSize(x), hypre_ParVectorNumVectors(x));
-   }
-
-   /* Get local vector */
-   hypre_Vector *z_local = hypre_ParVectorLocalVector(*z_ptr);
-
-   /* Compute local element-wise division */
-   return hypre_SeqVectorPointwiseDivision(x_local, y_local, &z_local);
-}
-
-/*--------------------------------------------------------------------------
- * Computes the element-wise product of two vectors: z[i] = x[i] * y[i]
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorPointwiseProduct( hypre_ParVector  *x,
-                                 hypre_ParVector  *y,
-                                 hypre_ParVector **z_ptr )
-{
-   hypre_Vector *x_local = hypre_ParVectorLocalVector(x);
-   hypre_Vector *y_local = hypre_ParVectorLocalVector(y);
-
-   /* Create and initialize z if it doesn't exist, or resize it */
-   if (!*z_ptr)
-   {
-      *z_ptr = hypre_ParVectorCreate(hypre_ParVectorComm(x),
-                                     hypre_ParVectorGlobalSize(x),
-                                     hypre_ParVectorPartitioning(x));
-      hypre_ParVectorInitialize_v2(*z_ptr, hypre_ParVectorMemoryLocation(x));
-   }
-   else
-   {
-      /* Resize z to match the number of vectors and size of x */
-      hypre_ParVectorResize(*z_ptr, hypre_ParVectorLocalSize(x), hypre_ParVectorNumVectors(x));
-   }
-
-   /* Get local vector */
-   hypre_Vector *z_local = hypre_ParVectorLocalVector(*z_ptr);
-
-   /* Compute local element-wise product */
-   return hypre_SeqVectorPointwiseProduct(x_local, y_local, &z_local);
-}
-
-/*--------------------------------------------------------------------------
- * Computes the element-wise inverse of a vector: y[i] = 1.0 / x[i]
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_ParVectorPointwiseInverse( hypre_ParVector   *x,
-                                 hypre_ParVector  **y_ptr )
-{
-   hypre_Vector *x_local = hypre_ParVectorLocalVector(x);
-
-   /* Create and initialize y if it doesn't exist, or resize it */
-   if (!*y_ptr)
-   {
-      *y_ptr = hypre_ParVectorCreate(hypre_ParVectorComm(x),
-                                     hypre_ParVectorGlobalSize(x),
-                                     hypre_ParVectorPartitioning(x));
-      hypre_ParVectorInitialize_v2(*y_ptr, hypre_ParVectorMemoryLocation(x));
-   }
-   else
-   {
-      /* Resize y to match the number of vectors and size of x */
-      hypre_ParVectorResize(*y_ptr, hypre_ParVectorLocalSize(x), hypre_ParVectorNumVectors(x));
-   }
-
-   /* Get local vector */
-   hypre_Vector *y_local = hypre_ParVectorLocalVector(*y_ptr);
-
-   /* Compute local element-wise inverse */
-   return hypre_SeqVectorPointwiseInverse(x_local, &y_local);
+   return hypre_SeqVectorElmdivpyMarked(x_local, b_local, y_local, marker, marker_val);
 }
 
 /*--------------------------------------------------------------------------
+ * hypre_VectorToParVector
+ *
  * Generates a ParVector from a Vector on proc 0 and distributes the pieces
  * to the other procs in comm
  *--------------------------------------------------------------------------*/
@@ -842,22 +614,21 @@ hypre_VectorToParVector ( MPI_Comm      comm,
                           hypre_Vector *v,
                           HYPRE_BigInt *vec_starts )
 {
-   HYPRE_MemoryLocation memory_location;
-   HYPRE_BigInt         global_size;
-   HYPRE_BigInt        *global_vec_starts = NULL;
-   HYPRE_BigInt         first_index;
-   HYPRE_BigInt         last_index;
-   HYPRE_Int            local_size;
-   HYPRE_Int            num_vectors;
-   HYPRE_Int            num_procs, my_id;
-   HYPRE_Int            global_vecstride, vecstride, idxstride;
-   hypre_ParVector     *par_vector;
-   hypre_Vector        *local_vector;
-   HYPRE_Complex       *v_data = NULL;
-   HYPRE_Complex       *local_data;
-   hypre_MPI_Request   *requests;
-   hypre_MPI_Status    *status, status0;
-   HYPRE_Int            i, j, k, p;
+   HYPRE_BigInt        global_size;
+   HYPRE_BigInt       *global_vec_starts = NULL;
+   HYPRE_BigInt        first_index;
+   HYPRE_BigInt        last_index;
+   HYPRE_Int           local_size;
+   HYPRE_Int           num_vectors;
+   HYPRE_Int           num_procs, my_id;
+   HYPRE_Int           global_vecstride, vecstride, idxstride;
+   hypre_ParVector    *par_vector;
+   hypre_Vector       *local_vector;
+   HYPRE_Complex      *v_data = NULL;
+   HYPRE_Complex      *local_data;
+   hypre_MPI_Request  *requests;
+   hypre_MPI_Status   *status, status0;
+   HYPRE_Int           i, j, k, p;
 
    hypre_MPI_Comm_size(comm, &num_procs);
    hypre_MPI_Comm_rank(comm, &my_id);
@@ -868,10 +639,8 @@ hypre_VectorToParVector ( MPI_Comm      comm,
       v_data = hypre_VectorData(v);
       num_vectors = hypre_VectorNumVectors(v); /* for multivectors */
       global_vecstride = hypre_VectorVectorStride(v);
-      memory_location = hypre_VectorMemoryLocation(v);
    }
 
-   hypre_MPI_Bcast(&memory_location, 1, HYPRE_MPI_INT, 0, comm);
    hypre_MPI_Bcast(&global_size, 1, HYPRE_MPI_BIG_INT, 0, comm);
    hypre_MPI_Bcast(&num_vectors, 1, HYPRE_MPI_INT, 0, comm);
    hypre_MPI_Bcast(&global_vecstride, 1, HYPRE_MPI_INT, 0, comm);
@@ -901,7 +670,7 @@ hypre_VectorToParVector ( MPI_Comm      comm,
       global_vec_starts[num_procs] = hypre_ParVectorGlobalSize(par_vector);
    }
 
-   hypre_ParVectorInitialize_v2(par_vector, memory_location);
+   hypre_ParVectorInitialize(par_vector);
    local_vector = hypre_ParVectorLocalVector(par_vector);
    local_data = hypre_VectorData(local_vector);
    vecstride = hypre_VectorVectorStride(local_vector);
@@ -915,15 +684,12 @@ hypre_VectorToParVector ( MPI_Comm      comm,
       status = hypre_CTAlloc(hypre_MPI_Status, num_vectors * (num_procs - 1), HYPRE_MEMORY_HOST);
       k = 0;
       for (p = 1; p < num_procs; p++)
-      {
          for (j = 0; j < num_vectors; ++j)
          {
             hypre_MPI_Isend( &v_data[(HYPRE_Int) global_vec_starts[p]] + j * global_vecstride,
                              (HYPRE_Int)(global_vec_starts[p + 1] - global_vec_starts[p]),
                              HYPRE_MPI_COMPLEX, p, 0, comm, &requests[k++] );
          }
-      }
-
       if (num_vectors == 1)
       {
          for (i = 0; i < local_size; i++)
@@ -948,10 +714,8 @@ hypre_VectorToParVector ( MPI_Comm      comm,
    else
    {
       for ( j = 0; j < num_vectors; ++j )
-      {
          hypre_MPI_Recv( local_data + j * vecstride, local_size, HYPRE_MPI_COMPLEX,
                          0, 0, comm, &status0 );
-      }
    }
 
    if (global_vec_starts)
diff --git a/src/parcsr_mv/par_vector.h b/src/parcsr_mv/par_vector.h
index 78dc58193..cc2316b8d 100644
--- a/src/parcsr_mv/par_vector.h
+++ b/src/parcsr_mv/par_vector.h
@@ -61,9 +61,6 @@ typedef struct hypre_ParVector_struct
 #define hypre_ParVectorLocalData(vector)        ((vector) -> local_vector -> data)
 #define hypre_ParVectorLocalStorage(vector)     ((vector) -> local_vector -> multivec_storage_method)
 #define hypre_ParVectorNumVectors(vector)       ((vector) -> local_vector -> num_vectors)
-#define hypre_ParVectorNumTags(vector)          ((vector) -> local_vector -> num_tags)
-#define hypre_ParVectorOwnsTags(vector)         ((vector) -> local_vector -> owns_tags)
-#define hypre_ParVectorTags(vector)             ((vector) -> local_vector -> tags)
 #define hypre_ParVectorEntryI(vector, i)        (hypre_VectorEntryI((vector) -> local_vector, i))
 #define hypre_ParVectorEntryIJ(vector, i, j)    (hypre_VectorEntryIJ((vector) -> local_vector, i, j))
 
diff --git a/src/parcsr_mv/protos.h b/src/parcsr_mv/protos.h
index de9106b90..127497564 100644
--- a/src/parcsr_mv/protos.h
+++ b/src/parcsr_mv/protos.h
@@ -69,11 +69,6 @@ HYPRE_Int HYPRE_ParCSRMatrixMatvec ( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A,
                                      HYPRE_Complex beta, HYPRE_ParVector y );
 HYPRE_Int HYPRE_ParCSRMatrixMatvecT ( HYPRE_Complex alpha, HYPRE_ParCSRMatrix A, HYPRE_ParVector x,
                                       HYPRE_Complex beta, HYPRE_ParVector y );
-HYPRE_Int HYPRE_ParCSRMatrixDiagScale ( HYPRE_ParCSRMatrix A, HYPRE_ParVector left,
-                                        HYPRE_ParVector right );
-HYPRE_Int HYPRE_ParCSRMatrixCompScalingTagged ( HYPRE_ParCSRMatrix A, HYPRE_Int type,
-                                                HYPRE_Int num_tags,
-                                                HYPRE_Int *tags, HYPRE_ParVector *scaling_ptr );
 
 /* HYPRE_parcsr_vector.c */
 HYPRE_Int HYPRE_ParVectorCreate ( MPI_Comm comm, HYPRE_BigInt global_size,
@@ -94,11 +89,6 @@ HYPRE_ParVector HYPRE_ParVectorCloneShallow ( HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParVectorScale ( HYPRE_Complex value, HYPRE_ParVector x );
 HYPRE_Int HYPRE_ParVectorAxpy ( HYPRE_Complex alpha, HYPRE_ParVector x, HYPRE_ParVector y );
 HYPRE_Int HYPRE_ParVectorInnerProd ( HYPRE_ParVector x, HYPRE_ParVector y, HYPRE_Real *prod );
-HYPRE_Int HYPRE_ParVectorPointwiseDivision ( HYPRE_ParVector x, HYPRE_ParVector y,
-                                             HYPRE_ParVector *z_ptr );
-HYPRE_Int HYPRE_ParVectorPointwiseProduct ( HYPRE_ParVector x, HYPRE_ParVector y,
-                                            HYPRE_ParVector *z_ptr );
-HYPRE_Int HYPRE_ParVectorPointwiseInverse ( HYPRE_ParVector x, HYPRE_ParVector *y_ptr );
 HYPRE_Int HYPRE_VectorToParVector ( MPI_Comm comm, HYPRE_Vector b, HYPRE_BigInt *partitioning,
                                     HYPRE_ParVector *vector );
 HYPRE_Int HYPRE_ParVectorGetValues ( HYPRE_ParVector vector, HYPRE_Int num_values,
@@ -373,7 +363,6 @@ HYPRE_Int hypre_ParCSRDiagScaleVectorHost( hypre_ParCSRMatrix *par_A, hypre_ParV
                                            hypre_ParVector *par_x );
 HYPRE_Int hypre_ParCSRDiagScaleVectorDevice( hypre_ParCSRMatrix *par_A, hypre_ParVector *par_y,
                                              hypre_ParVector *par_x );
-HYPRE_Int hypre_ParCSRMatrixColSumDevice( hypre_ParCSRMatrix *A, hypre_ParVector *b );
 HYPRE_Int hypre_ParCSRMatrixDropSmallEntries( hypre_ParCSRMatrix *A, HYPRE_Real tol,
                                               HYPRE_Int type);
 HYPRE_Int hypre_ParCSRMatrixDropSmallEntriesHost( hypre_ParCSRMatrix *A, HYPRE_Real tol,
@@ -427,9 +416,6 @@ HYPRE_Int hypre_ParCSRMatrixBlockColSum( hypre_ParCSRMatrix *A, HYPRE_Int row_ma
                                          HYPRE_Int num_rows_block, HYPRE_Int num_cols_block,
                                          hypre_DenseBlockMatrix **B_ptr );
 HYPRE_Int hypre_ParCSRMatrixColSum( hypre_ParCSRMatrix *A, hypre_ParVector **B_ptr );
-HYPRE_Int hypre_ParCSRMatrixCompScalingTagged( hypre_ParCSRMatrix *A, HYPRE_Int type,
-                                               HYPRE_Int num_tags, HYPRE_Int *tags,
-                                               hypre_ParVector **scaling_ptr );
 
 /* par_csr_filter_device.c */
 HYPRE_Int hypre_ParCSRMatrixBlkFilterDevice(hypre_ParCSRMatrix *A, HYPRE_Int block_size,
@@ -513,9 +499,8 @@ HYPRE_Int hypre_ParCSRMatrixRestoreRow ( hypre_ParCSRMatrix *matrix, HYPRE_BigIn
                                          HYPRE_Int *size, HYPRE_BigInt **col_ind, HYPRE_Complex **values );
 hypre_ParCSRMatrix *hypre_CSRMatrixToParCSRMatrix ( MPI_Comm comm, hypre_CSRMatrix *A,
                                                     HYPRE_BigInt *row_starts, HYPRE_BigInt *col_starts );
-HYPRE_Int hypre_GenerateDiagAndOffd ( hypre_CSRMatrix *A, hypre_ParCSRMatrix *matrix,
-                                      HYPRE_BigInt first_col_diag, HYPRE_BigInt last_col_diag );
-#define GenerateDiagAndOffd hypre_GenerateDiagAndOffd // TODO (VPM): remove this macro in the next release
+HYPRE_Int GenerateDiagAndOffd ( hypre_CSRMatrix *A, hypre_ParCSRMatrix *matrix,
+                                HYPRE_BigInt first_col_diag, HYPRE_BigInt last_col_diag );
 hypre_CSRMatrix *hypre_MergeDiagAndOffd ( hypre_ParCSRMatrix *par_matrix );
 hypre_CSRMatrix *hypre_MergeDiagAndOffdDevice ( hypre_ParCSRMatrix *par_matrix );
 hypre_CSRMatrix *hypre_ParCSRMatrixToCSRMatrixAll ( hypre_ParCSRMatrix *par_matrix );
@@ -614,12 +599,6 @@ hypre_ParVector *hypre_ParMultiVectorCreate ( MPI_Comm comm, HYPRE_BigInt global
 HYPRE_Int hypre_ParVectorDestroy ( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorInitializeShell( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorSetData( hypre_ParVector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_ParVectorSetOwnsTags( hypre_ParVector *vector, HYPRE_Int owns_tags );
-HYPRE_Int hypre_ParVectorSetNumTags( hypre_ParVector *vector, HYPRE_Int num_tags );
-HYPRE_Int hypre_ParVectorSetTags( hypre_ParVector *vector,
-                                  HYPRE_MemoryLocation memory_location,
-                                  HYPRE_Int *tags );
-HYPRE_Int hypre_ParVectorSetValuesTagged(hypre_ParVector *vector, HYPRE_Complex *values);
 HYPRE_Int hypre_ParVectorInitialize ( hypre_ParVector *vector );
 HYPRE_Int hypre_ParVectorInitialize_v2( hypre_ParVector *vector,
                                         HYPRE_MemoryLocation memory_location );
@@ -627,7 +606,7 @@ HYPRE_Int hypre_ParVectorSetDataOwner ( hypre_ParVector *vector, HYPRE_Int owns_
 HYPRE_Int hypre_ParVectorSetLocalSize ( hypre_ParVector *vector, HYPRE_Int local_size );
 HYPRE_Int hypre_ParVectorSetNumVectors ( hypre_ParVector *vector, HYPRE_Int num_vectors );
 HYPRE_Int hypre_ParVectorSetComponent ( hypre_ParVector *vector, HYPRE_Int component );
-HYPRE_Int hypre_ParVectorResize ( hypre_ParVector *vector, HYPRE_Int size, HYPRE_Int num_vectors );
+HYPRE_Int hypre_ParVectorResize ( hypre_ParVector *vector, HYPRE_Int num_vectors );
 hypre_ParVector *hypre_ParVectorRead ( MPI_Comm comm, const char *file_name );
 HYPRE_Int hypre_ParVectorSetConstantValues ( hypre_ParVector *v, HYPRE_Complex value );
 HYPRE_Int hypre_ParVectorSetZeros( hypre_ParVector *v );
@@ -645,8 +624,6 @@ HYPRE_Int hypre_ParVectorAxpyz ( HYPRE_Complex alpha, hypre_ParVector *x,
 HYPRE_Int hypre_ParVectorMassAxpy ( HYPRE_Complex *alpha, hypre_ParVector **x, hypre_ParVector *y,
                                     HYPRE_Int k, HYPRE_Int unroll);
 HYPRE_Real hypre_ParVectorInnerProd ( hypre_ParVector *x, hypre_ParVector *y );
-HYPRE_Int hypre_ParVectorInnerProdTagged ( hypre_ParVector *x, hypre_ParVector *y,
-                                           HYPRE_Int *num_tags_ptr, HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_ParVectorMassInnerProd ( hypre_ParVector *x, hypre_ParVector **y, HYPRE_Int k,
                                          HYPRE_Int unroll, HYPRE_Real *prod );
 HYPRE_Int hypre_ParVectorMassDotpTwo ( hypre_ParVector *x, hypre_ParVector *y, hypre_ParVector **z,
@@ -672,17 +649,10 @@ HYPRE_Int hypre_ParVectorGetValues2( hypre_ParVector *vector, HYPRE_Int num_valu
                                      HYPRE_BigInt *indices, HYPRE_BigInt base, HYPRE_Complex *values );
 HYPRE_Int hypre_ParVectorGetValuesHost(hypre_ParVector *vector, HYPRE_Int num_values,
                                        HYPRE_BigInt *indices, HYPRE_BigInt base, HYPRE_Complex *values);
-HYPRE_Int hypre_ParVectorPointwiseDivpy( hypre_ParVector *x, hypre_ParVector *b,
-                                         hypre_ParVector *y );
-HYPRE_Int hypre_ParVectorPointwiseDivpyMarked( hypre_ParVector *x, hypre_ParVector *b,
-                                               hypre_ParVector *y, HYPRE_Int *marker,
-                                               HYPRE_Int marker_val );
-HYPRE_Int hypre_ParVectorPointwiseDivision( hypre_ParVector *x, hypre_ParVector *y,
-                                            hypre_ParVector **z_ptr );
-HYPRE_Int hypre_ParVectorPointwiseProduct( hypre_ParVector *x, hypre_ParVector *y,
-                                           hypre_ParVector **z_ptr );
-HYPRE_Int hypre_ParVectorPointwiseInverse( hypre_ParVector *x, hypre_ParVector **y_ptr );
-
+HYPRE_Int hypre_ParVectorElmdivpy( hypre_ParVector *x, hypre_ParVector *b, hypre_ParVector *y );
+HYPRE_Int hypre_ParVectorElmdivpyMarked( hypre_ParVector *x, hypre_ParVector *b,
+                                         hypre_ParVector *y, HYPRE_Int *marker,
+                                         HYPRE_Int marker_val );
 /* par_vector_device.c */
 HYPRE_Int hypre_ParVectorGetValuesDevice(hypre_ParVector *vector, HYPRE_Int num_values,
                                          HYPRE_BigInt *indices, HYPRE_BigInt base,
diff --git a/src/seq_mv/csr_matop.c b/src/seq_mv/csr_matop.c
index ffc5e97a0..cbedfb8c2 100644
--- a/src/seq_mv/csr_matop.c
+++ b/src/seq_mv/csr_matop.c
@@ -1832,7 +1832,7 @@ hypre_CSRMatrixFnorm( hypre_CSRMatrix *A )
  *         2, square sum
  *--------------------------------------------------------------------------*/
 
-HYPRE_Int
+void
 hypre_CSRMatrixComputeRowSumHost( hypre_CSRMatrix *A,
                                   HYPRE_Int       *CF_i,
                                   HYPRE_Int       *CF_j,
@@ -1875,15 +1875,13 @@ hypre_CSRMatrixComputeRowSumHost( hypre_CSRMatrix *A,
 
       row_sum[i] = row_sum_i;
    }
-
-   return hypre_error_flag;
 }
 
 /*--------------------------------------------------------------------------
  * hypre_CSRMatrixComputeRowSum
  *--------------------------------------------------------------------------*/
 
-HYPRE_Int
+void
 hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A,
                               HYPRE_Int       *CF_i,
                               HYPRE_Int       *CF_j,
@@ -1906,152 +1904,6 @@ hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A,
    {
       hypre_CSRMatrixComputeRowSumHost(A, CF_i, CF_j, row_sum, type, scal, set_or_add);
    }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * Computes the column sums of a matrix.
- * Assumes the input vector col_sum has size num_cols and equal to zeroes.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixComputeColSumHost( hypre_CSRMatrix *A,
-                                  HYPRE_Complex   *col_sum,
-                                  HYPRE_Int        type,
-                                  HYPRE_Complex    scal)
-{
-   HYPRE_Int      num_rows = hypre_CSRMatrixNumRows(A);
-   HYPRE_Int      num_cols = hypre_CSRMatrixNumCols(A);
-   HYPRE_Int     *rownnz   = hypre_CSRMatrixRownnz(A);
-   HYPRE_Complex *A_data   = hypre_CSRMatrixData(A);
-   HYPRE_Int     *A_i      = hypre_CSRMatrixI(A);
-   HYPRE_Int     *A_j      = hypre_CSRMatrixJ(A);
-
-#ifdef HYPRE_USING_OPENMP
-   #pragma omp parallel
-#endif
-   {
-      HYPRE_Int      tid = hypre_GetThreadNum();
-      HYPRE_Int      num_threads = hypre_NumActiveThreads();
-      HYPRE_Int      i, ii, j, col, ns, ne;
-      HYPRE_Complex *work;
-
-      /* Compute rows partitioning */
-      hypre_partition1D(num_rows, num_threads, tid, &ns, &ne);
-
-      /* Allocate work data */
-      work = (num_threads == 1) ?
-             col_sum : hypre_CTAlloc(HYPRE_Complex, num_cols, HYPRE_MEMORY_HOST);
-
-      switch (type)
-      {
-         case 0:
-         {
-            for (i = ns; i < ne; i++)
-            {
-               ii = rownnz ? rownnz[i] : i;
-
-               for (j = A_i[ii]; j < A_i[ii + 1]; j++)
-               {
-                  hypre_assert(A_j[j] < num_cols);
-                  col = A_j[j];
-
-                  work[col] += scal * A_data[j];
-               }
-            }
-            break;
-         }
-
-         case 1:
-         {
-            for (i = ns; i < ne; i++)
-            {
-               ii = rownnz ? rownnz[i] : i;
-
-               for (j = A_i[ii]; j < A_i[ii + 1]; j++)
-               {
-                  hypre_assert(A_j[j] < num_cols);
-                  col = A_j[j];
-
-                  work[col] += scal * hypre_cabs(A_data[j]);
-               }
-            }
-            break;
-         }
-
-         case 2:
-         {
-            for (i = ns; i < ne; i++)
-            {
-               ii = rownnz ? rownnz[i] : i;
-
-               for (j = A_i[ii]; j < A_i[ii + 1]; j++)
-               {
-                  hypre_assert(A_j[j] < num_cols);
-                  col = A_j[j];
-
-                  work[col] += scal * A_data[j] * A_data[j];
-               }
-            }
-            break;
-         }
-      }
-
-      /* Reduce results */
-      if (num_threads > 1)
-      {
-         for (i = 0; i < num_threads; i++)
-         {
-            if (i == tid)
-            {
-               for (j = 0; j < num_cols; j++)
-               {
-                  col_sum[j] = work[j];
-               }
-            }
-#ifdef HYPRE_USING_OPENMP
-            #pragma omp barrier
-#endif
-         }
-
-         hypre_TFree(work, HYPRE_MEMORY_HOST);
-      }
-   }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixComputeColSum( hypre_CSRMatrix *A,
-                              HYPRE_Complex   *col_sum,
-                              HYPRE_Int        type,
-                              HYPRE_Complex    scal)
-
-{
-   /* Trivial case */
-   if (!hypre_CSRMatrixNumCols(A))
-   {
-      return hypre_error_flag;
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1( hypre_CSRMatrixMemoryLocation(A) );
-
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      hypre_CSRMatrixComputeColSumDevice(A, col_sum, type, scal);
-   }
-   else
-#endif
-   {
-      hypre_CSRMatrixComputeColSumHost(A, col_sum, type, scal);
-   }
-
-   return hypre_error_flag;
 }
 
 /*--------------------------------------------------------------------------
@@ -2359,97 +2211,3 @@ hypre_CSRMatrixSetConstantValues( hypre_CSRMatrix *A,
 
    return hypre_error_flag;
 }
-
-/*--------------------------------------------------------------------------
- * Computes the Frobenius norm for each tag in a CSR matrix.
- *
- * Each row is assigned a tag (block identifier) via the tags array (local rows only).
- * The result is stored in the output pointer tnorms_ptr (length num_tags * num_tags).
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixTaggedFnormHost(hypre_CSRMatrix  *A,
-                               HYPRE_Int         num_tags,
-                               HYPRE_Int        *tags,
-                               HYPRE_Real       *tnorms)
-{
-   HYPRE_Int       *A_i         = hypre_CSRMatrixI(A);
-   HYPRE_Int       *A_j         = hypre_CSRMatrixJ(A);
-   HYPRE_Complex   *A_a         = hypre_CSRMatrixData(A);
-   HYPRE_Int        num_rows    = hypre_CSRMatrixNumRows(A);
-
-   HYPRE_Int        tnorms_size = num_tags * num_tags;
-   HYPRE_Int        i, j, itag, jtag;
-
-   /* Accumulate sums */
-   for (i = 0; i < num_rows; i++)
-   {
-      itag = tags[i];
-      hypre_assert(itag >= 0 && itag < num_tags);
-
-      for (j = A_i[i]; j < A_i[i + 1]; j++)
-      {
-         jtag = tags[A_j[j]];
-         hypre_assert(jtag >= 0 && jtag < num_tags);
-         tnorms[itag * num_tags + jtag] += hypre_squared(A_a[j]);
-      }
-   }
-
-   /* Take square root for each block */
-   for (i = 0; i < tnorms_size; i++)
-   {
-      tnorms[i] = hypre_sqrt(tnorms[i]);
-   }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * Compute tagged Frobenius norms of an input matrix
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixTaggedFnorm(hypre_CSRMatrix  *A,
-                           HYPRE_Int         num_tags,
-                           HYPRE_Int        *tags,
-                           HYPRE_Real      **tnorms_ptr)
-{
-   HYPRE_Int     tnorms_size = num_tags * num_tags;
-   HYPRE_Int     i;
-
-   /* Create tnorms array */
-   if (!*tnorms_ptr)
-   {
-      *tnorms_ptr = hypre_CTAlloc(HYPRE_Real, tnorms_size, HYPRE_MEMORY_HOST);
-   }
-   else
-   {
-      /* Initialize tnorms array */
-      for (i = 0; i < tnorms_size; i++)
-      {
-         (*tnorms_ptr)[i] = 0.0;
-      }
-   }
-
-   /* Call regular Frobenius norm if no tags or only one tag */
-   if (num_tags <= 1 || !tags)
-   {
-      (*tnorms_ptr)[0] = hypre_CSRMatrixFnorm(A);
-      return hypre_error_flag;
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_MemoryLocation memory_location = hypre_CSRMatrixMemoryLocation(A);
-
-   if (hypre_GetExecPolicy1(memory_location) == HYPRE_EXEC_DEVICE)
-   {
-      hypre_CSRMatrixTaggedFnormDevice(A, num_tags, tags, *tnorms_ptr);
-   }
-   else
-#endif
-   {
-      hypre_CSRMatrixTaggedFnormHost(A, num_tags, tags, *tnorms_ptr);
-   }
-
-   return hypre_error_flag;
-}
diff --git a/src/seq_mv/csr_matop_device.c b/src/seq_mv/csr_matop_device.c
index 1cea7a375..c5ad8ece1 100644
--- a/src/seq_mv/csr_matop_device.c
+++ b/src/seq_mv/csr_matop_device.c
@@ -1327,255 +1327,6 @@ hypre_CSRMatrixComputeRowSumDevice( hypre_CSRMatrix *A,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * GPU kernel for computing the column sums of a CSR matrix.
- *
- * Each warp processes one row and accumulates into shared memory.
- *--------------------------------------------------------------------------*/
-
-template <HYPRE_Int type>
-__global__ void
-hypreGPUKernel_CSRMatrixComputeColSum(hypre_DeviceItem    &item,
-                                      HYPRE_Int            nrows,
-                                      HYPRE_Int            ncols,
-                                      const HYPRE_Int     *ia,
-                                      const HYPRE_Int     *ja,
-                                      const HYPRE_Complex *aa,
-                                      const HYPRE_Complex  scal,
-                                      HYPRE_Complex       *col_sum)
-{
-   /* Get warp and lane IDs */
-#if defined (HYPRE_USING_SYCL)
-   const HYPRE_Int num_warps = item.get_group(2) / HYPRE_WARP_SIZE;
-#else
-   const HYPRE_Int num_warps = blockDim.x / HYPRE_WARP_SIZE;
-#endif
-   const HYPRE_Int warp_id = hypre_gpu_get_warp_id<1>(item);
-   const HYPRE_Int lane_id = hypre_gpu_get_lane_id<1>(item);
-   const HYPRE_Int warp_in_block = warp_id % num_warps;
-#if defined (HYPRE_USING_SYCL)
-   const HYPRE_Int row = item.get_group(2) * num_warps + warp_in_block;
-#else
-   const HYPRE_Int row = blockIdx.x * num_warps + warp_in_block;
-#endif
-
-   if (row < nrows)
-   {
-      /* Load row bounds using warp shuffle */
-      HYPRE_Int p = 0, q = 0;
-      if (lane_id < 2)
-      {
-         p = read_only_load(ia + row + lane_id);
-      }
-      q = warp_shuffle_sync(item, HYPRE_WARP_FULL_MASK, p, 1);
-      p = warp_shuffle_sync(item, HYPRE_WARP_FULL_MASK, p, 0);
-
-      /* Process row elements using warp-level parallelism */
-      for (HYPRE_Int j = p + lane_id; j < q; j += HYPRE_WARP_SIZE)
-      {
-         HYPRE_Int     col = read_only_load(ja + j);
-         HYPRE_Complex val = read_only_load(aa + j);
-         HYPRE_Complex colsum = 0.0;
-
-         if (type == 0)
-         {
-            colsum = scal * val;
-         }
-         else if (type == 1)
-         {
-            colsum = scal * hypre_abs(val);
-         }
-         else if (type == 2)
-         {
-            colsum = scal * val * val;
-         }
-
-         /* Atomic add is required to prevent race conditions, as multiple warps
-           (processing different rows) may update the same column sum simultaneously. */
-         hypre_gpu_atomicAdd(col, col_sum, colsum);
-      }
-   }
-}
-
-/*--------------------------------------------------------------------------
- * Computes column-wise sum of a CSR matrix on the device.
- *
- * type == 0, sum
- *         1, abs sum (L1-norm)
- *         2, square sum (L2-norm squared)
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixComputeColSumDevice(hypre_CSRMatrix  *A,
-                                   HYPRE_Complex    *col_sum,
-                                   HYPRE_Int         type,
-                                   HYPRE_Complex     scal)
-{
-   HYPRE_Int       nrows = hypre_CSRMatrixNumRows(A);
-   HYPRE_Int       ncols = hypre_CSRMatrixNumCols(A);
-   HYPRE_Int      *A_i   = hypre_CSRMatrixI(A);
-   HYPRE_Int      *A_j   = hypre_CSRMatrixJ(A);
-   HYPRE_Complex  *A_a   = hypre_CSRMatrixData(A);
-
-   /* Use standard block dimensions */
-   dim3 bDim = hypre_GetDefaultDeviceBlockDimension();
-   dim3 gDim = hypre_GetDefaultDeviceGridDimension(nrows, "warp", bDim);
-
-   /* Launch kernel based on type */
-   if (type == 0)
-   {
-      HYPRE_GPU_LAUNCH(hypreGPUKernel_CSRMatrixComputeColSum<0>, gDim, bDim,
-                       nrows, ncols, A_i, A_j, A_a, scal, col_sum);
-   }
-   else if (type == 1)
-   {
-      HYPRE_GPU_LAUNCH(hypreGPUKernel_CSRMatrixComputeColSum<1>, gDim, bDim,
-                       nrows, ncols, A_i, A_j, A_a, scal, col_sum);
-   }
-   else if (type == 2)
-   {
-      HYPRE_GPU_LAUNCH(hypreGPUKernel_CSRMatrixComputeColSum<2>, gDim, bDim,
-                       nrows, ncols, A_i, A_j, A_a, scal, col_sum);
-   }
-
-   hypre_SyncComputeStream();
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-__global__ void
-hypreGPUKernel_CSRMatrixTaggedFnormAccum(hypre_DeviceItem    &item,
-#if defined (HYPRE_USING_SYCL)
-                                         char                *shmem_ptr,
-#endif
-                                         const HYPRE_Int      nrows,
-                                         const HYPRE_Int      num_tags,
-                                         const HYPRE_Int     *tags,
-                                         const HYPRE_Int     *ia,
-                                         const HYPRE_Int     *ja,
-                                         const HYPRE_Complex *aa,
-                                         HYPRE_Real          *tnorms)
-{
-   /* Get warp and lane IDs */
-   const HYPRE_Int  num_warps     = hypre_gpu_get_blockDim<0>(item) / HYPRE_WARP_SIZE;
-   const HYPRE_Int  warp_id       = hypre_gpu_get_warp_id<1>(item);
-   const HYPRE_Int  lane_id       = hypre_gpu_get_lane_id<1>(item);
-   const HYPRE_Int  warp_in_block = warp_id % num_warps;
-   const HYPRE_Int  row           = hypre_gpu_get_blockDim<0>(item) * num_warps + warp_in_block;
-   const HYPRE_Int  itag          = tags[row];
-
-   /* Shared memory */
-#if defined (HYPRE_USING_SYCL)
-   HYPRE_Real      *sdata         = (HYPRE_Real*) & (shmem_ptr[0]);
-#else
-   extern __shared__ HYPRE_Real shmem[];
-   HYPRE_Real      *sdata         = shmem;
-#endif
-
-   /* Initialize shared memory */
-   for (HYPRE_Int i = hypre_gpu_get_threadIdx<0>(item);
-        i < num_tags * num_tags;
-        i += hypre_gpu_get_blockDim<0>(item))
-   {
-      sdata[i] = 0.0;
-   }
-   block_sync(item);
-
-   if (row < nrows)
-   {
-      /* Load row bounds using warp shuffle */
-      HYPRE_Int p = 0, q = 0;
-      if (lane_id < 2)
-      {
-         p = read_only_load(ia + row + lane_id);
-      }
-      q = warp_shuffle_sync(item, HYPRE_WARP_FULL_MASK, p, 1);
-      p = warp_shuffle_sync(item, HYPRE_WARP_FULL_MASK, p, 0);
-
-      /* Process row elements using warp-level parallelism */
-      for (HYPRE_Int j = p + lane_id; j < q; j += HYPRE_WARP_SIZE)
-      {
-         HYPRE_Int       col  = read_only_load(ja + j);
-         HYPRE_Int       jtag = tags[col];
-         HYPRE_Complex   val  = read_only_load(aa + j);
-         const HYPRE_Int idx  = itag * num_tags + jtag;
-
-         /* Two threads in the same warp might add to the same position,
-            therefore we need to use atomic add */
-         hypre_gpu_atomicAdd(idx, sdata, hypre_squared(val));
-      }
-   }
-   block_sync(item);
-
-   /* Final reduction from shared memory to global memory */
-   if (hypre_gpu_get_threadIdx<0>(item) == 0)
-   {
-      for (HYPRE_Int i = 0; i < num_tags * num_tags; i++)
-      {
-         hypre_gpu_atomicAdd(i, tnorms, sdata[i]);
-      }
-   }
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_CSRMatrixTaggedFnormDevice(hypre_CSRMatrix  *A,
-                                 HYPRE_Int         num_tags,
-                                 HYPRE_Int        *tags,
-                                 HYPRE_Real       *tnorms)
-{
-   HYPRE_Int       num_rows    = hypre_CSRMatrixNumRows(A);
-   HYPRE_Int      *A_i         = hypre_CSRMatrixI(A);
-   HYPRE_Int      *A_j         = hypre_CSRMatrixJ(A);
-   HYPRE_Complex  *A_a         = hypre_CSRMatrixData(A);
-
-   HYPRE_Int       tnorms_size = num_tags * num_tags;
-   HYPRE_Int       i;
-   HYPRE_Real     *d_tnorms;
-
-   /* Sanity check */
-   if (num_tags > 64)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Too many tags for shared memory kernel (max is 64)");
-      return hypre_error_flag;
-   }
-
-   HYPRE_ANNOTATE_FUNC_BEGIN;
-   hypre_GpuProfilingPushRange("CSRMatrixTaggedFnorm");
-
-   /* Allocate device buffers */
-   d_tnorms = hypre_CTAlloc(HYPRE_Real, tnorms_size, HYPRE_MEMORY_DEVICE);
-
-   /* Launch accumulation kernel */
-   dim3 bDim = hypre_GetDefaultDeviceBlockDimension();
-   dim3 gDim = hypre_GetDefaultDeviceGridDimension(num_rows, "warp", bDim);
-   const size_t shmem_bytes = tnorms_size * sizeof(HYPRE_Complex);
-
-   HYPRE_GPU_LAUNCH2(hypreGPUKernel_CSRMatrixTaggedFnormAccum, gDim, bDim, shmem_bytes,
-                     num_rows, num_tags, tags, A_i, A_j, A_a, d_tnorms);
-
-   /* Copy back to host and free device buffer */
-   hypre_TMemcpy(tnorms, d_tnorms, HYPRE_Real, tnorms_size,
-                 HYPRE_MEMORY_HOST, HYPRE_MEMORY_DEVICE);
-   hypre_TFree(d_tnorms, HYPRE_MEMORY_DEVICE);
-
-   /* Take square root for each block */
-   for (i = 0; i < tnorms_size; i++)
-   {
-      tnorms[i] = hypre_sqrt(tnorms[i]);
-   }
-
-   hypre_GpuProfilingPopRange();
-   HYPRE_ANNOTATE_FUNC_END;
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypreGPUKernel_CSRMatrixIntersectPattern
  *
diff --git a/src/seq_mv/csr_matrix.c b/src/seq_mv/csr_matrix.c
index 6a91bf365..706657b4c 100644
--- a/src/seq_mv/csr_matrix.c
+++ b/src/seq_mv/csr_matrix.c
@@ -527,33 +527,29 @@ HYPRE_Int
 hypre_CSRMatrixPrint( hypre_CSRMatrix *matrix,
                       const char      *file_name )
 {
-   HYPRE_Int             num_rows        = hypre_CSRMatrixNumRows(matrix);
-   HYPRE_MemoryLocation  memory_location = hypre_CSRMatrixMemoryLocation(matrix);
-   hypre_CSRMatrix      *h_matrix;
+   FILE    *fp;
 
-   HYPRE_Complex        *matrix_data;
-   HYPRE_Int            *matrix_i;
-   HYPRE_Int            *matrix_j;
-   HYPRE_BigInt         *matrix_bigj;
+   HYPRE_Complex *matrix_data;
+   HYPRE_Int     *matrix_i;
+   HYPRE_Int     *matrix_j;
+   HYPRE_BigInt  *matrix_bigj;
+   HYPRE_Int      num_rows;
 
-   HYPRE_Int             file_base = 1;
+   HYPRE_Int      file_base = 1;
 
-   HYPRE_Int             j;
-   FILE                 *fp;
+   HYPRE_Int      j;
+
+   HYPRE_Int      ierr = 0;
 
    /*----------------------------------------------------------
     * Print the matrix data
     *----------------------------------------------------------*/
 
-   /* Create temporary matrix on host memory if needed */
-   h_matrix = (hypre_GetActualMemLocation(memory_location) == hypre_MEMORY_DEVICE) ?
-              hypre_CSRMatrixClone_v2(matrix, 1, HYPRE_MEMORY_HOST) : matrix;
-
-   /* Set matrix pointers */
-   matrix_data = hypre_CSRMatrixData(h_matrix);
-   matrix_i    = hypre_CSRMatrixI(h_matrix);
-   matrix_j    = hypre_CSRMatrixJ(h_matrix);
-   matrix_bigj = hypre_CSRMatrixBigJ(h_matrix);
+   matrix_data = hypre_CSRMatrixData(matrix);
+   matrix_i    = hypre_CSRMatrixI(matrix);
+   matrix_j    = hypre_CSRMatrixJ(matrix);
+   matrix_bigj = hypre_CSRMatrixBigJ(matrix);
+   num_rows    = hypre_CSRMatrixNumRows(matrix);
 
    fp = fopen(file_name, "w");
 
@@ -571,17 +567,14 @@ hypre_CSRMatrixPrint( hypre_CSRMatrix *matrix,
          hypre_fprintf(fp, "%d\n", matrix_j[j] + file_base);
       }
    }
-   else if (matrix_bigj)
+
+   if (matrix_bigj)
    {
       for (j = 0; j < matrix_i[num_rows]; j++)
       {
          hypre_fprintf(fp, "%d\n", matrix_bigj[j] + file_base);
       }
    }
-   else
-   {
-      hypre_fprintf(fp, "Warning: No matrix columns!\n");
-   }
 
    if (matrix_data)
    {
@@ -602,13 +595,7 @@ hypre_CSRMatrixPrint( hypre_CSRMatrix *matrix,
 
    fclose(fp);
 
-   /* Free temporary matrix */
-   if (h_matrix != matrix)
-   {
-      hypre_CSRMatrixDestroy(h_matrix);
-   }
-
-   return hypre_error_flag;
+   return ierr;
 }
 
 /*--------------------------------------------------------------------------
diff --git a/src/seq_mv/protos.h b/src/seq_mv/protos.h
index 09eb9de56..f645aa0c2 100644
--- a/src/seq_mv/protos.h
+++ b/src/seq_mv/protos.h
@@ -40,18 +40,15 @@ HYPRE_Int hypre_CSRMatrixSplit(hypre_CSRMatrix *Bs_ext, HYPRE_BigInt first_col_d
                                hypre_CSRMatrix **Bext_offd_ptr);
 hypre_CSRMatrix * hypre_CSRMatrixAddPartial( hypre_CSRMatrix *A, hypre_CSRMatrix *B,
                                              HYPRE_Int *row_nums);
-HYPRE_Int hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
-                                        HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal,
-                                        const char *set_or_add );
-HYPRE_Int hypre_CSRMatrixComputeColSum( hypre_CSRMatrix *A, HYPRE_Complex *col_sum,
-                                        HYPRE_Int type, HYPRE_Complex scal );
+void hypre_CSRMatrixComputeRowSumHost( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
+                                       HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal, const char *set_or_add);
+void hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
+                                   HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal, const char *set_or_add);
 HYPRE_Int hypre_CSRMatrixExtractDiagonal( hypre_CSRMatrix *A, HYPRE_Complex *d, HYPRE_Int type);
 HYPRE_Int hypre_CSRMatrixExtractDiagonalHost( hypre_CSRMatrix *A, HYPRE_Complex *d, HYPRE_Int type);
 HYPRE_Int hypre_CSRMatrixScale(hypre_CSRMatrix *A, HYPRE_Complex scalar);
 HYPRE_Int hypre_CSRMatrixSetConstantValues( hypre_CSRMatrix *A, HYPRE_Complex value);
 HYPRE_Int hypre_CSRMatrixDiagScale( hypre_CSRMatrix *A, hypre_Vector *ld, hypre_Vector *rd);
-HYPRE_Int hypre_CSRMatrixTaggedFnorm( hypre_CSRMatrix *A, HYPRE_Int num_tags, HYPRE_Int *tags,
-                                      HYPRE_Real **tnorms_ptr );
 
 /* csr_matop_device.c */
 hypre_CSRMatrix *hypre_CSRMatrixAddDevice ( HYPRE_Complex alpha, hypre_CSRMatrix *A,
@@ -87,10 +84,6 @@ HYPRE_Int hypre_CSRMatrixReplaceDiagDevice( hypre_CSRMatrix *A, HYPRE_Complex *n
 HYPRE_Int hypre_CSRMatrixComputeRowSumDevice( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
                                               HYPRE_Complex *row_sum, HYPRE_Int type,
                                               HYPRE_Complex scal, const char *set_or_add );
-HYPRE_Int hypre_CSRMatrixComputeColSumDevice( hypre_CSRMatrix *A,  HYPRE_Complex *col_sum,
-                                              HYPRE_Int type, HYPRE_Complex scal );
-HYPRE_Int hypre_CSRMatrixTaggedFnormDevice(hypre_CSRMatrix *A, HYPRE_Int num_tags,
-                                           HYPRE_Int *tags, HYPRE_Real *tnorms);
 HYPRE_Int hypre_CSRMatrixExtractDiagonalDevice( hypre_CSRMatrix *A, HYPRE_Complex *d,
                                                 HYPRE_Int type );
 hypre_CSRMatrix* hypre_CSRMatrixStack2Device(hypre_CSRMatrix *A, hypre_CSRMatrix *B);
@@ -269,26 +262,18 @@ hypre_Vector *hypre_SeqMultiVectorCreate ( HYPRE_Int size, HYPRE_Int num_vectors
 HYPRE_Int hypre_SeqVectorDestroy ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorInitializeShell( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorSetData( hypre_Vector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_SeqVectorSetOwnsTags( hypre_Vector *vector, HYPRE_Int owns_tags );
-HYPRE_Int hypre_SeqVectorSetNumTags( hypre_Vector *vector, HYPRE_Int num_tags );
-HYPRE_Int hypre_SeqVectorSetTags( hypre_Vector *vector,
-                                  HYPRE_MemoryLocation memory_location,
-                                  HYPRE_Int *tags );
-HYPRE_Int hypre_SeqVectorSetValuesTagged( hypre_Vector *vector, HYPRE_Complex *values );
 HYPRE_Int hypre_SeqVectorInitialize_v2( hypre_Vector *vector,
                                         HYPRE_MemoryLocation memory_location );
 HYPRE_Int hypre_SeqVectorInitialize ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorSetDataOwner ( hypre_Vector *vector, HYPRE_Int owns_data );
 HYPRE_Int hypre_SeqVectorSetSize ( hypre_Vector *vector, HYPRE_Int size );
-HYPRE_Int hypre_SeqVectorResize ( hypre_Vector *vector, HYPRE_Int size_in,
-                                  HYPRE_Int num_vectors_in );
+HYPRE_Int hypre_SeqVectorResize ( hypre_Vector *vector, HYPRE_Int num_vectors_in );
 hypre_Vector *hypre_SeqVectorRead ( char *file_name );
 HYPRE_Int hypre_SeqVectorPrint ( hypre_Vector *vector, char *file_name );
 HYPRE_Int hypre_SeqVectorSetConstantValues ( hypre_Vector *v, HYPRE_Complex value );
 HYPRE_Int hypre_SeqVectorSetConstantValuesHost ( hypre_Vector *v, HYPRE_Complex value );
 HYPRE_Int hypre_SeqVectorSetRandomValues ( hypre_Vector *v, HYPRE_Int seed );
 HYPRE_Int hypre_SeqVectorCopy ( hypre_Vector *x, hypre_Vector *y );
-HYPRE_Int hypre_SeqVectorCopyTags ( hypre_Vector *x, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorStridedCopy( hypre_Vector *x, HYPRE_Int istride, HYPRE_Int ostride,
                                       HYPRE_Int size, HYPRE_Complex *data);
 hypre_Vector *hypre_SeqVectorCloneDeep ( hypre_Vector *x );
@@ -322,50 +307,48 @@ HYPRE_Int hypre_SeqVectorMassAxpy4(HYPRE_Complex *alpha, hypre_Vector **x, hypre
                                    HYPRE_Int k);
 HYPRE_Int hypre_SeqVectorMassAxpy8(HYPRE_Complex *alpha, hypre_Vector **x, hypre_Vector *y,
                                    HYPRE_Int k);
-HYPRE_Int hypre_SeqVectorInnerProdTagged( hypre_Vector *x, hypre_Vector *y, HYPRE_Complex *iprod );
 HYPRE_Complex hypre_SeqVectorSumElts ( hypre_Vector *vector );
 HYPRE_Complex hypre_SeqVectorSumEltsHost ( hypre_Vector *vector );
-HYPRE_Int hypre_SeqVectorPointwiseDivpy( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y );
-HYPRE_Int hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
-                                               HYPRE_Int *marker, HYPRE_Int marker_val );
-HYPRE_Int hypre_SeqVectorPointwiseProduct( hypre_Vector *x, hypre_Vector *y, hypre_Vector **z_ptr );
-HYPRE_Int hypre_SeqVectorPointwiseDivision( hypre_Vector *x, hypre_Vector *y,
-                                            hypre_Vector **z_ptr );
-HYPRE_Int hypre_SeqVectorPointwiseInverse( hypre_Vector *x, hypre_Vector **y_ptr );
 //HYPRE_Int hypre_SeqVectorMax( HYPRE_Complex alpha, hypre_Vector *x, HYPRE_Complex beta, hypre_Vector *y );
 
-/* csr_spadd_device.c */
 HYPRE_Int hypreDevice_CSRSpAdd(HYPRE_Int ma, HYPRE_Int mb, HYPRE_Int nnzA,
                                HYPRE_Int nnzB, HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex alpha, HYPRE_Complex *d_aa,
                                HYPRE_Int *d_ja_map, HYPRE_Int *d_ib, HYPRE_Int *d_jb, HYPRE_Complex beta, HYPRE_Complex *d_ab,
                                HYPRE_Int *d_jb_map, HYPRE_Int *d_num_b, HYPRE_Int *nnzC_out, HYPRE_Int **d_ic_out,
                                HYPRE_Int **d_jc_out, HYPRE_Complex **d_ac_out);
 
-/* csr_sptrans_device.c */
 HYPRE_Int hypreDevice_CSRSpTrans(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                  HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                  HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransCusparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                          HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                          HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransRocsparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                           HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                           HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransOnemklsparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA,
                                              HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                              HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
 
-/* csr_spgemm_device.c */
 HYPRE_Int hypreDevice_CSRSpGemm(hypre_CSRMatrix *A, hypre_CSRMatrix *B, hypre_CSRMatrix **C_ptr);
+
 HYPRE_Int hypreDevice_CSRSpGemmCusparseGenericAPI(HYPRE_Int m, HYPRE_Int k, HYPRE_Int n,
                                                   HYPRE_Int nnzA, HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex *d_a, HYPRE_Int nnzB,
                                                   HYPRE_Int *d_ib, HYPRE_Int *d_jb, HYPRE_Complex *d_b, HYPRE_Int *nnzC_out, HYPRE_Int **d_ic_out,
                                                   HYPRE_Int **d_jc_out, HYPRE_Complex **d_c_out);
 
-/* csr_spmv_device.c */
+HYPRE_Int hypre_SeqVectorElmdivpy( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y );
+HYPRE_Int hypre_SeqVectorElmdivpyMarked( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                         HYPRE_Int *marker, HYPRE_Int marker_val );
+HYPRE_Int hypre_SeqVectorElmdivpyHost( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                       HYPRE_Int *marker, HYPRE_Int marker_val );
 HYPRE_Int hypre_CSRMatrixSpMVDevice( HYPRE_Int trans, HYPRE_Complex alpha, hypre_CSRMatrix *A,
                                      hypre_Vector *x,
                                      HYPRE_Complex beta, hypre_Vector *y, HYPRE_Int fill );
+
 HYPRE_Int hypre_CSRMatrixIntSpMVDevice( HYPRE_Int num_rows, HYPRE_Int num_nonzeros,
                                         HYPRE_Int alpha, HYPRE_Int *d_ia, HYPRE_Int *d_ja,
                                         HYPRE_Int *d_a, HYPRE_Int *d_x, HYPRE_Int beta,
@@ -391,19 +374,13 @@ HYPRE_Int hypre_CSRMatrixSpMVAnalysisDevice(hypre_CSRMatrix *matrix);
 
 /* vector_device.c */
 HYPRE_Int hypre_SeqVectorSetConstantValuesDevice ( hypre_Vector *v, HYPRE_Complex value );
-HYPRE_Int hypre_SeqVectorSetValuesTaggedDevice( hypre_Vector *vector, HYPRE_Complex *values );
 HYPRE_Int hypre_SeqVectorScaleDevice( HYPRE_Complex alpha, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorAxpyDevice ( HYPRE_Complex alpha, hypre_Vector *x, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorAxpyzDevice ( HYPRE_Complex alpha, hypre_Vector *x,
                                        HYPRE_Complex beta, hypre_Vector *y,
                                        hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseDivpyDevice( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
-                                               HYPRE_Int *marker, HYPRE_Int marker_val );
-HYPRE_Int hypre_SeqVectorPointwiseProductDevice( hypre_Vector *x, hypre_Vector *y,
-                                                 hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseDivisionDevice( hypre_Vector *x, hypre_Vector *y,
-                                                  hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseInverseDevice( hypre_Vector *x, hypre_Vector *y );
+HYPRE_Int hypre_SeqVectorElmdivpyDevice( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                         HYPRE_Int *marker, HYPRE_Int marker_val );
 HYPRE_Real hypre_SeqVectorInnerProdDevice ( hypre_Vector *x, hypre_Vector *y );
 HYPRE_Complex hypre_SeqVectorSumEltsDevice ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorStridedCopyDevice( hypre_Vector *vector,
diff --git a/src/seq_mv/seq_mv.h b/src/seq_mv/seq_mv.h
index 7b4c59c1b..5c1fe7c73 100644
--- a/src/seq_mv/seq_mv.h
+++ b/src/seq_mv/seq_mv.h
@@ -242,11 +242,9 @@ typedef struct
 typedef struct
 {
    HYPRE_Complex        *data;
-   HYPRE_Int             size;       /* Number of elements of a single vector component */
-   HYPRE_Int             component;  /* Index of a multivector component (used for set/get) */
-   HYPRE_Int             owns_tags;  /* Whether the vector owns the array of tags or not */
-   HYPRE_Int             num_tags;   /* Number of unique tags */
-   HYPRE_Int            *tags;       /* Array of tags with same size as vector */
+   HYPRE_Int             size;      /* Number of elements of a single vector component */
+   HYPRE_Int             component; /* Index of a multivector component
+                                    (used for set/get routines )*/
    HYPRE_Int             owns_data;  /* Does the Vector create/destroy `data'? */
    HYPRE_MemoryLocation  memory_location; /* memory location of data array */
 
@@ -270,9 +268,6 @@ typedef struct
 #define hypre_VectorComponent(vector)             ((vector) -> component)
 #define hypre_VectorOwnsData(vector)              ((vector) -> owns_data)
 #define hypre_VectorMemoryLocation(vector)        ((vector) -> memory_location)
-#define hypre_VectorOwnsTags(vector)              ((vector) -> owns_tags)
-#define hypre_VectorNumTags(vector)               ((vector) -> num_tags)
-#define hypre_VectorTags(vector)                  ((vector) -> tags)
 #define hypre_VectorNumVectors(vector)            ((vector) -> num_vectors)
 #define hypre_VectorMultiVecStorageMethod(vector) ((vector) -> multivec_storage_method)
 #define hypre_VectorVectorStride(vector)          ((vector) -> vecstride)
@@ -324,18 +319,15 @@ HYPRE_Int hypre_CSRMatrixSplit(hypre_CSRMatrix *Bs_ext, HYPRE_BigInt first_col_d
                                hypre_CSRMatrix **Bext_offd_ptr);
 hypre_CSRMatrix * hypre_CSRMatrixAddPartial( hypre_CSRMatrix *A, hypre_CSRMatrix *B,
                                              HYPRE_Int *row_nums);
-HYPRE_Int hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
-                                        HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal,
-                                        const char *set_or_add );
-HYPRE_Int hypre_CSRMatrixComputeColSum( hypre_CSRMatrix *A, HYPRE_Complex *col_sum,
-                                        HYPRE_Int type, HYPRE_Complex scal );
+void hypre_CSRMatrixComputeRowSumHost( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
+                                       HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal, const char *set_or_add);
+void hypre_CSRMatrixComputeRowSum( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
+                                   HYPRE_Complex *row_sum, HYPRE_Int type, HYPRE_Complex scal, const char *set_or_add);
 HYPRE_Int hypre_CSRMatrixExtractDiagonal( hypre_CSRMatrix *A, HYPRE_Complex *d, HYPRE_Int type);
 HYPRE_Int hypre_CSRMatrixExtractDiagonalHost( hypre_CSRMatrix *A, HYPRE_Complex *d, HYPRE_Int type);
 HYPRE_Int hypre_CSRMatrixScale(hypre_CSRMatrix *A, HYPRE_Complex scalar);
 HYPRE_Int hypre_CSRMatrixSetConstantValues( hypre_CSRMatrix *A, HYPRE_Complex value);
 HYPRE_Int hypre_CSRMatrixDiagScale( hypre_CSRMatrix *A, hypre_Vector *ld, hypre_Vector *rd);
-HYPRE_Int hypre_CSRMatrixTaggedFnorm( hypre_CSRMatrix *A, HYPRE_Int num_tags, HYPRE_Int *tags,
-                                      HYPRE_Real **tnorms_ptr );
 
 /* csr_matop_device.c */
 hypre_CSRMatrix *hypre_CSRMatrixAddDevice ( HYPRE_Complex alpha, hypre_CSRMatrix *A,
@@ -371,10 +363,6 @@ HYPRE_Int hypre_CSRMatrixReplaceDiagDevice( hypre_CSRMatrix *A, HYPRE_Complex *n
 HYPRE_Int hypre_CSRMatrixComputeRowSumDevice( hypre_CSRMatrix *A, HYPRE_Int *CF_i, HYPRE_Int *CF_j,
                                               HYPRE_Complex *row_sum, HYPRE_Int type,
                                               HYPRE_Complex scal, const char *set_or_add );
-HYPRE_Int hypre_CSRMatrixComputeColSumDevice( hypre_CSRMatrix *A,  HYPRE_Complex *col_sum,
-                                              HYPRE_Int type, HYPRE_Complex scal );
-HYPRE_Int hypre_CSRMatrixTaggedFnormDevice(hypre_CSRMatrix *A, HYPRE_Int num_tags,
-                                           HYPRE_Int *tags, HYPRE_Real *tnorms);
 HYPRE_Int hypre_CSRMatrixExtractDiagonalDevice( hypre_CSRMatrix *A, HYPRE_Complex *d,
                                                 HYPRE_Int type );
 hypre_CSRMatrix* hypre_CSRMatrixStack2Device(hypre_CSRMatrix *A, hypre_CSRMatrix *B);
@@ -553,26 +541,18 @@ hypre_Vector *hypre_SeqMultiVectorCreate ( HYPRE_Int size, HYPRE_Int num_vectors
 HYPRE_Int hypre_SeqVectorDestroy ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorInitializeShell( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorSetData( hypre_Vector *vector, HYPRE_Complex *data );
-HYPRE_Int hypre_SeqVectorSetOwnsTags( hypre_Vector *vector, HYPRE_Int owns_tags );
-HYPRE_Int hypre_SeqVectorSetNumTags( hypre_Vector *vector, HYPRE_Int num_tags );
-HYPRE_Int hypre_SeqVectorSetTags( hypre_Vector *vector,
-                                  HYPRE_MemoryLocation memory_location,
-                                  HYPRE_Int *tags );
-HYPRE_Int hypre_SeqVectorSetValuesTagged( hypre_Vector *vector, HYPRE_Complex *values );
 HYPRE_Int hypre_SeqVectorInitialize_v2( hypre_Vector *vector,
                                         HYPRE_MemoryLocation memory_location );
 HYPRE_Int hypre_SeqVectorInitialize ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorSetDataOwner ( hypre_Vector *vector, HYPRE_Int owns_data );
 HYPRE_Int hypre_SeqVectorSetSize ( hypre_Vector *vector, HYPRE_Int size );
-HYPRE_Int hypre_SeqVectorResize ( hypre_Vector *vector, HYPRE_Int size_in,
-                                  HYPRE_Int num_vectors_in );
+HYPRE_Int hypre_SeqVectorResize ( hypre_Vector *vector, HYPRE_Int num_vectors_in );
 hypre_Vector *hypre_SeqVectorRead ( char *file_name );
 HYPRE_Int hypre_SeqVectorPrint ( hypre_Vector *vector, char *file_name );
 HYPRE_Int hypre_SeqVectorSetConstantValues ( hypre_Vector *v, HYPRE_Complex value );
 HYPRE_Int hypre_SeqVectorSetConstantValuesHost ( hypre_Vector *v, HYPRE_Complex value );
 HYPRE_Int hypre_SeqVectorSetRandomValues ( hypre_Vector *v, HYPRE_Int seed );
 HYPRE_Int hypre_SeqVectorCopy ( hypre_Vector *x, hypre_Vector *y );
-HYPRE_Int hypre_SeqVectorCopyTags ( hypre_Vector *x, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorStridedCopy( hypre_Vector *x, HYPRE_Int istride, HYPRE_Int ostride,
                                       HYPRE_Int size, HYPRE_Complex *data);
 hypre_Vector *hypre_SeqVectorCloneDeep ( hypre_Vector *x );
@@ -606,50 +586,48 @@ HYPRE_Int hypre_SeqVectorMassAxpy4(HYPRE_Complex *alpha, hypre_Vector **x, hypre
                                    HYPRE_Int k);
 HYPRE_Int hypre_SeqVectorMassAxpy8(HYPRE_Complex *alpha, hypre_Vector **x, hypre_Vector *y,
                                    HYPRE_Int k);
-HYPRE_Int hypre_SeqVectorInnerProdTagged( hypre_Vector *x, hypre_Vector *y, HYPRE_Complex *iprod );
 HYPRE_Complex hypre_SeqVectorSumElts ( hypre_Vector *vector );
 HYPRE_Complex hypre_SeqVectorSumEltsHost ( hypre_Vector *vector );
-HYPRE_Int hypre_SeqVectorPointwiseDivpy( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y );
-HYPRE_Int hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
-                                               HYPRE_Int *marker, HYPRE_Int marker_val );
-HYPRE_Int hypre_SeqVectorPointwiseProduct( hypre_Vector *x, hypre_Vector *y, hypre_Vector **z_ptr );
-HYPRE_Int hypre_SeqVectorPointwiseDivision( hypre_Vector *x, hypre_Vector *y,
-                                            hypre_Vector **z_ptr );
-HYPRE_Int hypre_SeqVectorPointwiseInverse( hypre_Vector *x, hypre_Vector **y_ptr );
 //HYPRE_Int hypre_SeqVectorMax( HYPRE_Complex alpha, hypre_Vector *x, HYPRE_Complex beta, hypre_Vector *y );
 
-/* csr_spadd_device.c */
 HYPRE_Int hypreDevice_CSRSpAdd(HYPRE_Int ma, HYPRE_Int mb, HYPRE_Int nnzA,
                                HYPRE_Int nnzB, HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex alpha, HYPRE_Complex *d_aa,
                                HYPRE_Int *d_ja_map, HYPRE_Int *d_ib, HYPRE_Int *d_jb, HYPRE_Complex beta, HYPRE_Complex *d_ab,
                                HYPRE_Int *d_jb_map, HYPRE_Int *d_num_b, HYPRE_Int *nnzC_out, HYPRE_Int **d_ic_out,
                                HYPRE_Int **d_jc_out, HYPRE_Complex **d_ac_out);
 
-/* csr_sptrans_device.c */
 HYPRE_Int hypreDevice_CSRSpTrans(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                  HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                  HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransCusparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                          HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                          HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransRocsparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA, HYPRE_Int *d_ia,
                                           HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                           HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
+
 HYPRE_Int hypreDevice_CSRSpTransOnemklsparse(HYPRE_Int m, HYPRE_Int n, HYPRE_Int nnzA,
                                              HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex *d_aa, HYPRE_Int **d_ic_out, HYPRE_Int **d_jc_out,
                                              HYPRE_Complex **d_ac_out, HYPRE_Int want_data);
 
-/* csr_spgemm_device.c */
 HYPRE_Int hypreDevice_CSRSpGemm(hypre_CSRMatrix *A, hypre_CSRMatrix *B, hypre_CSRMatrix **C_ptr);
+
 HYPRE_Int hypreDevice_CSRSpGemmCusparseGenericAPI(HYPRE_Int m, HYPRE_Int k, HYPRE_Int n,
                                                   HYPRE_Int nnzA, HYPRE_Int *d_ia, HYPRE_Int *d_ja, HYPRE_Complex *d_a, HYPRE_Int nnzB,
                                                   HYPRE_Int *d_ib, HYPRE_Int *d_jb, HYPRE_Complex *d_b, HYPRE_Int *nnzC_out, HYPRE_Int **d_ic_out,
                                                   HYPRE_Int **d_jc_out, HYPRE_Complex **d_c_out);
 
-/* csr_spmv_device.c */
+HYPRE_Int hypre_SeqVectorElmdivpy( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y );
+HYPRE_Int hypre_SeqVectorElmdivpyMarked( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                         HYPRE_Int *marker, HYPRE_Int marker_val );
+HYPRE_Int hypre_SeqVectorElmdivpyHost( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                       HYPRE_Int *marker, HYPRE_Int marker_val );
 HYPRE_Int hypre_CSRMatrixSpMVDevice( HYPRE_Int trans, HYPRE_Complex alpha, hypre_CSRMatrix *A,
                                      hypre_Vector *x,
                                      HYPRE_Complex beta, hypre_Vector *y, HYPRE_Int fill );
+
 HYPRE_Int hypre_CSRMatrixIntSpMVDevice( HYPRE_Int num_rows, HYPRE_Int num_nonzeros,
                                         HYPRE_Int alpha, HYPRE_Int *d_ia, HYPRE_Int *d_ja,
                                         HYPRE_Int *d_a, HYPRE_Int *d_x, HYPRE_Int beta,
@@ -675,19 +653,13 @@ HYPRE_Int hypre_CSRMatrixSpMVAnalysisDevice(hypre_CSRMatrix *matrix);
 
 /* vector_device.c */
 HYPRE_Int hypre_SeqVectorSetConstantValuesDevice ( hypre_Vector *v, HYPRE_Complex value );
-HYPRE_Int hypre_SeqVectorSetValuesTaggedDevice( hypre_Vector *vector, HYPRE_Complex *values );
 HYPRE_Int hypre_SeqVectorScaleDevice( HYPRE_Complex alpha, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorAxpyDevice ( HYPRE_Complex alpha, hypre_Vector *x, hypre_Vector *y );
 HYPRE_Int hypre_SeqVectorAxpyzDevice ( HYPRE_Complex alpha, hypre_Vector *x,
                                        HYPRE_Complex beta, hypre_Vector *y,
                                        hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseDivpyDevice( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
-                                               HYPRE_Int *marker, HYPRE_Int marker_val );
-HYPRE_Int hypre_SeqVectorPointwiseProductDevice( hypre_Vector *x, hypre_Vector *y,
-                                                 hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseDivisionDevice( hypre_Vector *x, hypre_Vector *y,
-                                                  hypre_Vector *z );
-HYPRE_Int hypre_SeqVectorPointwiseInverseDevice( hypre_Vector *x, hypre_Vector *y );
+HYPRE_Int hypre_SeqVectorElmdivpyDevice( hypre_Vector *x, hypre_Vector *b, hypre_Vector *y,
+                                         HYPRE_Int *marker, HYPRE_Int marker_val );
 HYPRE_Real hypre_SeqVectorInnerProdDevice ( hypre_Vector *x, hypre_Vector *y );
 HYPRE_Complex hypre_SeqVectorSumEltsDevice ( hypre_Vector *vector );
 HYPRE_Int hypre_SeqVectorStridedCopyDevice( hypre_Vector *vector,
diff --git a/src/seq_mv/vector.c b/src/seq_mv/vector.c
index 70ebb1849..d74b37f2a 100644
--- a/src/seq_mv/vector.c
+++ b/src/seq_mv/vector.c
@@ -24,15 +24,16 @@ hypre_SeqVectorCreate( HYPRE_Int size )
 
    vector = hypre_CTAlloc(hypre_Vector, 1, HYPRE_MEMORY_HOST);
 
-   hypre_VectorData(vector)                  = NULL;
-   hypre_VectorSize(vector)                  = size;
-   hypre_VectorNumTags(vector)               = 1;
-   hypre_VectorOwnsTags(vector)              = 1;
-   hypre_VectorTags(vector)                  = NULL;
-   hypre_VectorNumVectors(vector)            = 1;
+   hypre_VectorData(vector) = NULL;
+   hypre_VectorSize(vector) = size;
+
+   hypre_VectorNumVectors(vector) = 1;
    hypre_VectorMultiVecStorageMethod(vector) = 0;
-   hypre_VectorOwnsData(vector)              = 1;
-   hypre_VectorMemoryLocation(vector)        = hypre_HandleMemoryLocation(hypre_handle());
+
+   /* set defaults */
+   hypre_VectorOwnsData(vector) = 1;
+
+   hypre_VectorMemoryLocation(vector) = hypre_HandleMemoryLocation(hypre_handle());
 
    return vector;
 }
@@ -61,11 +62,6 @@ hypre_SeqVectorDestroy( hypre_Vector *vector )
    {
       HYPRE_MemoryLocation memory_location = hypre_VectorMemoryLocation(vector);
 
-      if (hypre_VectorOwnsTags(vector))
-      {
-         hypre_TFree(hypre_VectorTags(vector), memory_location);
-      }
-
       if (hypre_VectorOwnsData(vector))
       {
          hypre_TFree(hypre_VectorData(vector), memory_location);
@@ -130,154 +126,6 @@ hypre_SeqVectorSetData( hypre_Vector  *vector,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * hypre_SeqVectorSetOwnsTags
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetOwnsTags( hypre_Vector *vector,
-                            HYPRE_Int     owns_tags )
-{
-   /* Set owns tags info passed via input */
-   hypre_VectorOwnsTags(vector) = owns_tags;
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_SeqVectorSetNumTags
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetNumTags( hypre_Vector *vector,
-                           HYPRE_Int     num_tags )
-{
-   /* Set number of tags info passed via input */
-   hypre_VectorNumTags(vector) = num_tags;
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_SeqVectorSetTags
- *
- * Sets tags array to a SeqVector.
- * If owns_tags is true, allocates and copies tags.
- * Otherwise, just points to the input tags array.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetTags( hypre_Vector          *vector,
-                        HYPRE_MemoryLocation   memory_location,
-                        HYPRE_Int             *tags )
-{
-   HYPRE_Int  size = hypre_VectorSize(vector);
-   HYPRE_Int *new_tags;
-
-   /* Return if tags array does not exist */
-   if (!tags)
-   {
-      hypre_TFree(hypre_VectorTags(vector), hypre_VectorMemoryLocation(vector));
-      hypre_VectorTags(vector) = NULL;
-
-      return hypre_error_flag;
-   }
-
-   if (hypre_VectorOwnsTags(vector))
-   {
-      /* Deallocate existing tags if present */
-      if (hypre_VectorTags(vector))
-      {
-         hypre_TFree(hypre_VectorTags(vector), hypre_VectorMemoryLocation(vector));
-      }
-
-      /* Allocate new tags array */
-      new_tags = hypre_TAlloc(HYPRE_Int, size, hypre_VectorMemoryLocation(vector));
-
-      /* Copy tags */
-      hypre_TMemcpy(new_tags, tags, HYPRE_Int, size,
-                    hypre_VectorMemoryLocation(vector),
-                    memory_location);
-
-      /* Attach new tags */
-      hypre_VectorTags(vector) = new_tags;
-   }
-   else
-   {
-      /* Just point to the input tags array */
-      hypre_VectorTags(vector) = tags;
-
-      /* Check whether the memory location for the tags array
-         match the memory location used by the vector */
-      if (hypre_GetActualMemLocation(hypre_VectorMemoryLocation(vector)) !=
-          hypre_GetActualMemLocation(memory_location))
-      {
-         hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Memory location mismatch!");
-      }
-   }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetValuesTaggedHost( hypre_Vector  *vector,
-                                    HYPRE_Complex *values )
-{
-   HYPRE_Int   size = hypre_VectorSize(vector);
-   HYPRE_Int  *tags = hypre_VectorTags(vector);
-   HYPRE_Int   i;
-
-   /* Setup scaling vector */
-#if defined(HYPRE_USING_OPENMP)
-   #pragma omp parallel for private(i) HYPRE_SMP_SCHEDULE
-#endif
-   for (i = 0; i < size; i++)
-   {
-      hypre_VectorEntryI(vector, i) = values[tags[i]];
-   }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetValuesTagged( hypre_Vector  *vector,
-                                HYPRE_Complex *values )
-{
-   /* Sanity checks */
-   if (hypre_VectorNumVectors(vector) > 1)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "num_vectors > 1 not implemented!");
-      return hypre_error_flag;
-   }
-
-   if (!hypre_VectorTags(vector) || hypre_VectorNumTags(vector) < 2)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "This function is valid only for multi-tagged vectors");
-      return hypre_error_flag;
-   }
-
-#if defined(HYPRE_USING_GPU) || defined(HYPRE_USING_DEVICE_OPENMP)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1(hypre_VectorMemoryLocation(vector));
-
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      hypre_SeqVectorSetValuesTaggedDevice(vector, values);
-   }
-   else
-#endif
-   {
-      hypre_SeqVectorSetValuesTaggedHost(vector, values);
-   }
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_SeqVectorInitialize_v2
  *
@@ -354,20 +202,18 @@ hypre_SeqVectorSetSize( hypre_Vector *vector,
 /*--------------------------------------------------------------------------
  * hypre_SeqVectorResize
  *
- * Resize a sequential vector when changing its number of components or
- * local size.
+ * Resize a sequential vector when changing its number of components.
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
 hypre_SeqVectorResize( hypre_Vector *vector,
-                       HYPRE_Int     size_in,
                        HYPRE_Int     num_vectors_in )
 {
    HYPRE_Int  method        = hypre_VectorMultiVecStorageMethod(vector);
    HYPRE_Int  size          = hypre_VectorSize(vector);
    HYPRE_Int  num_vectors   = hypre_VectorNumVectors(vector);
    HYPRE_Int  total_size    = num_vectors * size;
-   HYPRE_Int  total_size_in = num_vectors_in * size_in;
+   HYPRE_Int  total_size_in = num_vectors_in * size;
 
    /* Reallocate data array */
    if (total_size_in > total_size)
@@ -381,11 +227,10 @@ hypre_SeqVectorResize( hypre_Vector *vector,
    }
 
    /* Update vector info */
-   hypre_VectorSize(vector) = size_in;
    hypre_VectorNumVectors(vector) = num_vectors_in;
    if (method == 0)
    {
-      hypre_VectorVectorStride(vector) = size_in;
+      hypre_VectorVectorStride(vector) = size;
       hypre_VectorIndexStride(vector)  = 1;
    }
    else if (method == 1)
@@ -449,32 +294,28 @@ HYPRE_Int
 hypre_SeqVectorPrint( hypre_Vector *vector,
                       char         *file_name )
 {
-   HYPRE_Int             num_vectors     = hypre_VectorNumVectors(vector);
-   HYPRE_Int             vecstride       = hypre_VectorVectorStride(vector);
-   HYPRE_Int             idxstride       = hypre_VectorIndexStride(vector);
-   HYPRE_Int             size            = hypre_VectorSize(vector);
-   HYPRE_MemoryLocation  memory_location = hypre_VectorMemoryLocation(vector);
+   FILE          *fp;
+
+   HYPRE_Complex *data;
+   HYPRE_Int      size, num_vectors, vecstride, idxstride;
 
-   FILE                 *fp;
+   HYPRE_Int      i, j;
+   HYPRE_Complex  value;
 
-   hypre_Vector         *h_vector;
-   HYPRE_Complex        *data;
-   HYPRE_Int             i, j;
-   HYPRE_Complex         value;
+   num_vectors = hypre_VectorNumVectors(vector);
+   vecstride = hypre_VectorVectorStride(vector);
+   idxstride = hypre_VectorIndexStride(vector);
 
    /*----------------------------------------------------------
     * Print in the data
     *----------------------------------------------------------*/
 
-   /* Create temporary vector on host memory if needed */
-   h_vector = (hypre_GetActualMemLocation(memory_location) == hypre_MEMORY_DEVICE) ?
-              hypre_SeqVectorCloneDeep_v2(vector, HYPRE_MEMORY_HOST) : vector;
-
-   data = hypre_VectorData(h_vector);
+   data = hypre_VectorData(vector);
+   size = hypre_VectorSize(vector);
 
    fp = fopen(file_name, "w");
 
-   if (num_vectors == 1)
+   if ( hypre_VectorNumVectors(vector) == 1 )
    {
       hypre_fprintf(fp, "%d\n", size);
    }
@@ -483,14 +324,14 @@ hypre_SeqVectorPrint( hypre_Vector *vector,
       hypre_fprintf(fp, "%d vectors of size %d\n", num_vectors, size );
    }
 
-   if (num_vectors > 1)
+   if ( num_vectors > 1 )
    {
       for ( j = 0; j < num_vectors; ++j )
       {
          hypre_fprintf(fp, "vector %d\n", j );
          for (i = 0; i < size; i++)
          {
-            value = data[j * vecstride + i * idxstride];
+            value = data[ j * vecstride + i * idxstride ];
 #ifdef HYPRE_COMPLEX
             hypre_fprintf(fp, "%.14e , %.14e\n",
                           hypre_creal(value), hypre_cimag(value));
@@ -515,12 +356,6 @@ hypre_SeqVectorPrint( hypre_Vector *vector,
 
    fclose(fp);
 
-   /* Free temporary vector */
-   if (h_vector != vector)
-   {
-      hypre_SeqVectorDestroy(h_vector);
-   }
-
    return hypre_error_flag;
 }
 
@@ -665,43 +500,6 @@ hypre_SeqVectorCopy( hypre_Vector *x,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * hypre_SeqVectorCopyTags
- *
- * Copy tags array from x to y.
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorCopyTags( hypre_Vector *x,
-                         hypre_Vector *y )
-{
-   HYPRE_Int  size = hypre_min(hypre_VectorSize(x), hypre_VectorSize(y));
-
-   /* Return if x does not have tags */
-   if (!hypre_VectorTags(x))
-   {
-      return hypre_error_flag;
-   }
-
-   /* Deallocate existing tags if present */
-   if (hypre_VectorTags(y))
-   {
-      hypre_TFree(hypre_VectorTags(y), hypre_VectorMemoryLocation(y));
-   }
-
-   /* Allocate new tags array */
-   hypre_VectorTags(y) = hypre_TAlloc(HYPRE_Int, size, hypre_VectorMemoryLocation(y));
-
-   /* Copy tags */
-   hypre_TMemcpy(hypre_VectorTags(y),
-                 hypre_VectorTags(x),
-                 HYPRE_Int, size,
-                 hypre_VectorMemoryLocation(y),
-                 hypre_VectorMemoryLocation(x));
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_SeqVectorStridedCopy
  *
@@ -773,17 +571,14 @@ hypre_SeqVectorCloneDeep_v2( hypre_Vector *x, HYPRE_MemoryLocation memory_locati
    HYPRE_Int      size          = hypre_VectorSize(x);
    HYPRE_Int      num_vectors   = hypre_VectorNumVectors(x);
 
-   hypre_Vector  *y = hypre_SeqMultiVectorCreate(size, num_vectors);
+   hypre_Vector *y = hypre_SeqMultiVectorCreate( size, num_vectors );
 
    hypre_VectorMultiVecStorageMethod(y) = hypre_VectorMultiVecStorageMethod(x);
    hypre_VectorVectorStride(y) = hypre_VectorVectorStride(x);
-   hypre_VectorIndexStride(y)  = hypre_VectorIndexStride(x);
+   hypre_VectorIndexStride(y) = hypre_VectorIndexStride(x);
 
-   hypre_SeqVectorSetNumTags(y, hypre_VectorNumTags(x));
-   hypre_SeqVectorSetOwnsTags(y, 1);
    hypre_SeqVectorInitialize_v2(y, memory_location);
-   hypre_SeqVectorCopy(x, y);
-   hypre_SeqVectorCopyTags(x, y);
+   hypre_SeqVectorCopy( x, y );
 
    return y;
 }
@@ -1055,21 +850,21 @@ hypre_SeqVectorAxpyz( HYPRE_Complex alpha,
 }
 
 /*--------------------------------------------------------------------------
- * hypre_SeqVectorPointwiseDivpyHost
+ * hypre_SeqVectorElmdivpyHost
  *
  * if marker != NULL: only for marker[i] == marker_val
  *
  * TODO:
- *        1) Change to hypre_SeqVectorPointwiseDivpyMarkedHost?
+ *        1) Change to hypre_SeqVectorElmdivpyMarkedHost?
  *        2) Add vecstride/idxstride variables
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_SeqVectorPointwiseDivpyHost( hypre_Vector *x,
-                                   hypre_Vector *b,
-                                   hypre_Vector *y,
-                                   HYPRE_Int    *marker,
-                                   HYPRE_Int     marker_val )
+hypre_SeqVectorElmdivpyHost( hypre_Vector *x,
+                             hypre_Vector *b,
+                             hypre_Vector *y,
+                             HYPRE_Int    *marker,
+                             HYPRE_Int     marker_val )
 {
    HYPRE_Complex   *x_data        = hypre_VectorData(x);
    HYPRE_Complex   *b_data        = hypre_VectorData(b);
@@ -1190,17 +985,17 @@ hypre_SeqVectorPointwiseDivpyHost( hypre_Vector *x,
 }
 
 /*--------------------------------------------------------------------------
- * hypre_SeqVectorPointwiseDivpyMarked
+ * hypre_SeqVectorElmdivpyMarked
  *
  * Computes: y[i] = y[i] + x[i] / b[i] for marker[i] = marker_val
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x,
-                                     hypre_Vector *b,
-                                     hypre_Vector *y,
-                                     HYPRE_Int    *marker,
-                                     HYPRE_Int     marker_val)
+hypre_SeqVectorElmdivpyMarked( hypre_Vector *x,
+                               hypre_Vector *b,
+                               hypre_Vector *y,
+                               HYPRE_Int    *marker,
+                               HYPRE_Int     marker_val)
 {
 #ifdef HYPRE_PROFILE
    hypre_profile_times[HYPRE_TIMER_ID_BLAS1] -= hypre_MPI_Wtime();
@@ -1247,12 +1042,12 @@ hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x,
                                                       hypre_VectorMemoryLocation(b) );
    if (exec == HYPRE_EXEC_DEVICE)
    {
-      hypre_SeqVectorPointwiseDivpyDevice(x, b, y, marker, marker_val);
+      hypre_SeqVectorElmdivpyDevice(x, b, y, marker, marker_val);
    }
    else
 #endif
    {
-      hypre_SeqVectorPointwiseDivpyHost(x, b, y, marker, marker_val);
+      hypre_SeqVectorElmdivpyHost(x, b, y, marker, marker_val);
    }
 
 #ifdef HYPRE_PROFILE
@@ -1263,7 +1058,7 @@ hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x,
 }
 
 /*--------------------------------------------------------------------------
- * hypre_SeqVectorPointwiseDivpy
+ * hypre_SeqVectorElmdivpy
  *
  * Computes: y = y + x ./ b
  *
@@ -1273,11 +1068,11 @@ hypre_SeqVectorPointwiseDivpyMarked( hypre_Vector *x,
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_SeqVectorPointwiseDivpy( hypre_Vector *x,
-                               hypre_Vector *b,
-                               hypre_Vector *y )
+hypre_SeqVectorElmdivpy( hypre_Vector *x,
+                         hypre_Vector *b,
+                         hypre_Vector *y )
 {
-   return hypre_SeqVectorPointwiseDivpyMarked(x, b, y, NULL, -1);
+   return hypre_SeqVectorElmdivpyMarked(x, b, y, NULL, -1);
 }
 
 /*--------------------------------------------------------------------------
@@ -1342,131 +1137,6 @@ hypre_SeqVectorInnerProd( hypre_Vector *x,
    return result;
 }
 
-/*--------------------------------------------------------------------------
- * Computes the "marked" inner product of two vectors x and y.
- *
- *  - iprod[0]: inner product of full vector
- *  - iprod[i + 1]: inner product computed from entries marked with "i" tag
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorInnerProdTaggedHost( hypre_Vector  *x,
-                                    hypre_Vector  *y,
-                                    HYPRE_Complex *iprod )
-{
-   HYPRE_Complex *x_data      = hypre_VectorData(x);
-   HYPRE_Complex *y_data      = hypre_VectorData(y);
-   HYPRE_Int     *tags        = hypre_VectorTags(x);
-   HYPRE_Int      num_tags    = hypre_VectorNumTags(x);
-   HYPRE_Int      num_vectors = hypre_VectorNumVectors(x);
-   HYPRE_Int      size        = hypre_VectorSize(x);
-   HYPRE_Int      total_size  = size * num_vectors;
-   HYPRE_Int      i;
-
-#if defined(HYPRE_USING_OPENMP)
-   HYPRE_Int      j, num_threads = hypre_NumThreads();
-   HYPRE_Complex *thread_sums    = hypre_CTAlloc(HYPRE_Complex,
-                                                 num_threads * num_tags,
-                                                 HYPRE_MEMORY_HOST);
-#endif
-
-   /* Initialize result */
-   for (i = 0; i < num_tags + 1; i++)
-   {
-      iprod[i] = 0.0;
-   }
-
-#if defined(HYPRE_USING_OPENMP)
-   #pragma omp parallel private(i, j)
-   {
-      HYPRE_Int      tid = hypre_GetThreadNum();
-      HYPRE_Complex *sum = &thread_sums[tid * num_tags];
-
-      #pragma omp for HYPRE_SMP_SCHEDULE
-      for (i = 0; i < total_size; i++)
-      {
-         sum[tags[i] + 1] += hypre_conj(y_data[i]) * x_data[i];
-      }
-
-      #pragma omp critical
-      {
-         for (j = 0; j < num_tags; j++)
-         {
-            iprod[j + 1] += sum[j + 1];
-         }
-      }
-   }
-#else
-   for (i = 0; i < total_size; i++)
-   {
-      iprod[tags[i] + 1] += hypre_conj(y_data[i]) * x_data[i];
-   }
-#endif
-
-   /* Compute inner product of the full vectors */
-   for (i = 0; i < num_tags; i++)
-   {
-      iprod[0] += iprod[i + 1];
-   }
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * hypre_SeqVectorInnerProdTagged
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorInnerProdTagged( hypre_Vector  *x,
-                                hypre_Vector  *y,
-                                HYPRE_Complex *iprod )
-{
-   HYPRE_Int      num_tags_x = hypre_VectorNumTags(x);
-   HYPRE_Int      num_tags_y = hypre_VectorNumTags(y);
-
-   /* Sanity checks */
-   if (!iprod)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "iprod not allocated!");
-      return hypre_error_flag;
-   }
-
-   if (num_tags_x != num_tags_y)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC,
-                        "Number of tags in x and y don't match!");
-      return hypre_error_flag;
-   }
-
-   if (num_tags_x == 1)
-   {
-      iprod[0] = hypre_SeqVectorInnerProd(x, y);
-      return hypre_error_flag;
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy2( hypre_VectorMemoryLocation(x),
-                                                      hypre_VectorMemoryLocation(y) );
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      /* TODO (VPM): add hypre_SeqVectorInnerProdTaggedDevice */
-      hypre_Vector *x_h = hypre_SeqVectorCloneDeep_v2(x, HYPRE_MEMORY_HOST);
-      hypre_Vector *y_h = hypre_SeqVectorCloneDeep_v2(y, HYPRE_MEMORY_HOST);
-      hypre_SeqVectorInnerProdTaggedHost(x_h, y_h, iprod);
-      hypre_SeqVectorCopy(x_h, x);
-      hypre_SeqVectorCopy(y_h, y);
-      hypre_SeqVectorDestroy(x_h);
-      hypre_SeqVectorDestroy(y_h);
-   }
-   else
-#endif
-   {
-      hypre_SeqVectorInnerProdTaggedHost(x, y, iprod);
-   }
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_SeqVectorSumEltsHost
  *--------------------------------------------------------------------------*/
@@ -1528,233 +1198,74 @@ hypre_SeqVectorSumElts( hypre_Vector *v )
    return sum;
 }
 
-/*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseProduct
- *--------------------------------------------------------------------------*/
 
-HYPRE_Int
-hypre_SeqVectorPointwiseProductHost( hypre_Vector *x,
-                                     hypre_Vector *y,
-                                     hypre_Vector *z )
-{
-   HYPRE_Int      size   = hypre_VectorSize(x);
-   HYPRE_Complex *x_data = hypre_VectorData(x);
-   HYPRE_Complex *y_data = hypre_VectorData(y);
-   HYPRE_Complex *z_data = hypre_VectorData(z);
-   HYPRE_Int      i;
 
-   /* Element-wise multiplication z[i] = y[i] * x[i] */
-#if defined (HYPRE_USING_OPENMP)
-   #pragma omp parallel for private(i)
-#endif
-   for (i = 0; i < size; i++)
-   {
-      z_data[i] = y_data[i] * x_data[i];
-   }
 
-   return hypre_error_flag;
-}
 
-/*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseDivision
- *--------------------------------------------------------------------------*/
 
-HYPRE_Int
-hypre_SeqVectorPointwiseDivisionHost( hypre_Vector *x,
-                                      hypre_Vector *y,
-                                      hypre_Vector *z )
-{
-   HYPRE_Int      size   = hypre_VectorSize(x);
-   HYPRE_Complex *x_data = hypre_VectorData(x);
-   HYPRE_Complex *y_data = hypre_VectorData(y);
-   HYPRE_Complex *z_data = hypre_VectorData(z);
-   HYPRE_Int      i;
 
-   /* Element-wise division z[i] = y[i] / x[i] */
-#if defined (HYPRE_USING_OPENMP)
-   #pragma omp parallel for private(i)
-#endif
-   for (i = 0; i < size; i++)
-   {
-      hypre_assert(x_data[i] != 0.0);
 
-      z_data[i] = y_data[i] / x_data[i];
-   }
 
-   return hypre_error_flag;
-}
 
-/*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseInverse
- *--------------------------------------------------------------------------*/
 
-HYPRE_Int
-hypre_SeqVectorPointwiseInverseHost( hypre_Vector *x,
-                                     hypre_Vector *y )
-{
-   HYPRE_Int      size   = hypre_VectorSize(x);
-   HYPRE_Complex *x_data = hypre_VectorData(x);
-   HYPRE_Complex *y_data = hypre_VectorData(y);
-   HYPRE_Int      i;
 
-#if defined(HYPRE_USING_OPENMP)
-   #pragma omp parallel for private(i)
-#endif
-   for (i = 0; i < size; i++)
-   {
-      hypre_assert(x_data[i] != 0.0);
-      y_data[i] = 1.0 / x_data[i];
-   }
 
-   return hypre_error_flag;
-}
 
-/*--------------------------------------------------------------------------
- * Computes the element-wise product of two vectors: z[i] = x[i] * y[i]
- *--------------------------------------------------------------------------*/
 
-HYPRE_Int
-hypre_SeqVectorPointwiseProduct( hypre_Vector  *x,
-                                 hypre_Vector  *y,
-                                 hypre_Vector **z_ptr )
-{
-   HYPRE_Complex *x_data = hypre_VectorData(x);
-   HYPRE_Complex *y_data = hypre_VectorData(y);
 
-   /* Check if vectors are initialized */
-   if (!x_data || !y_data)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Vectors are not initialized!");
-      return hypre_error_flag;
-   }
 
-   /* Check if vectors have same size */
-   if (hypre_VectorSize(y) != hypre_VectorSize(x) ||
-       (*z_ptr && hypre_VectorSize(y) != hypre_VectorSize(*z_ptr)))
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Vectors have different sizes!");
-      return hypre_error_flag;
-   }
-
-   /* Create and initialize z if it doesn't exist, or resize it */
-   if (!*z_ptr)
-   {
-      *z_ptr = hypre_SeqVectorCreate(hypre_VectorSize(x));
-      hypre_SeqVectorInitialize_v2(*z_ptr, hypre_VectorMemoryLocation(x));
-   }
-   else if (*z_ptr != y)
-   {
-      /* No-op if z has the same size as x */
-      hypre_SeqVectorResize(*z_ptr, hypre_VectorSize(x), hypre_VectorNumVectors(x));
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy2( hypre_VectorMemoryLocation(x),
-                                                      hypre_VectorMemoryLocation(y) );
-
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      return hypre_SeqVectorPointwiseProductDevice(x, y, *z_ptr);
-   }
-   else
-#endif
-   {
-      return hypre_SeqVectorPointwiseProductHost(x, y, *z_ptr);
-   }
-}
 
-/*--------------------------------------------------------------------------
- * Computes the element-wise division of two vectors: z[i] = y[i] / x[i]
- *--------------------------------------------------------------------------*/
 
+#if 0
+/* y[i] = max(alpha*x[i], beta*y[i]) */
 HYPRE_Int
-hypre_SeqVectorPointwiseDivision( hypre_Vector  *x,
-                                  hypre_Vector  *y,
-                                  hypre_Vector **z_ptr )
+hypre_SeqVectorMax( HYPRE_Complex alpha,
+                    hypre_Vector *x,
+                    HYPRE_Complex beta,
+                    hypre_Vector *y     )
 {
+#ifdef HYPRE_PROFILE
+   hypre_profile_times[HYPRE_TIMER_ID_BLAS1] -= hypre_MPI_Wtime();
+#endif
+
    HYPRE_Complex *x_data = hypre_VectorData(x);
    HYPRE_Complex *y_data = hypre_VectorData(y);
+   HYPRE_Int      size   = hypre_VectorSize(x);
 
-   /* Check if vectors are initialized */
-   if (!x_data || !y_data)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Vectors are not initialized!");
-      return hypre_error_flag;
-   }
+   size *= hypre_VectorNumVectors(x);
 
-   /* Check if vectors have same size */
-   if (hypre_VectorSize(y) != hypre_VectorSize(x) ||
-       (*z_ptr && hypre_VectorSize(y) != hypre_VectorSize(*z_ptr)))
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Vectors have different sizes!");
-      return hypre_error_flag;
-   }
+   //hypre_SeqVectorPrefetch(x, HYPRE_MEMORY_DEVICE);
+   //hypre_SeqVectorPrefetch(y, HYPRE_MEMORY_DEVICE);
 
-   /* Create and initialize z if it doesn't exist, or resize it */
-   if (!*z_ptr)
-   {
-      *z_ptr = hypre_SeqVectorCreate(hypre_VectorSize(x));
-      hypre_SeqVectorInitialize_v2(*z_ptr, hypre_VectorMemoryLocation(x));
-   }
-   else if (*z_ptr != y)
-   {
-      /* No-op if z has the same size as x */
-      hypre_SeqVectorResize(*z_ptr, hypre_VectorSize(x), hypre_VectorNumVectors(x));
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy2( hypre_VectorMemoryLocation(x),
-                                                      hypre_VectorMemoryLocation(y) );
+   thrust::maximum<HYPRE_Complex> mx;
 
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      return hypre_SeqVectorPointwiseDivisionDevice(x, y, *z_ptr);
-   }
-   else
+#if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
+   HYPRE_THRUST_CALL( transform,
+                      thrust::make_transform_iterator(x_data,        alpha * _1),
+                      thrust::make_transform_iterator(x_data + size, alpha * _1),
+                      thrust::make_transform_iterator(y_data,        beta  * _1),
+                      y_data,
+                      mx );
+#else
+   HYPRE_Int i;
+#if defined(HYPRE_USING_DEVICE_OPENMP)
+   #pragma omp target teams distribute parallel for private(i) is_device_ptr(y_data, x_data)
+#elif defined(HYPRE_USING_OPENMP)
+   #pragma omp parallel for private(i) HYPRE_SMP_SCHEDULE
 #endif
+   for (i = 0; i < size; i++)
    {
-      return hypre_SeqVectorPointwiseDivisionHost(x, y, *z_ptr);
+      y_data[i] += hypre_max(alpha * x_data[i], beta * y_data[i]);
    }
-}
 
-/*--------------------------------------------------------------------------
- * Computes the element-wise inverse of a vector: y[i] = 1.0 / x[i]
- *--------------------------------------------------------------------------*/
+#endif /* defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP) */
 
-HYPRE_Int
-hypre_SeqVectorPointwiseInverse( hypre_Vector  *x,
-                                 hypre_Vector **y_ptr )
-{
-   HYPRE_Complex *x_data = hypre_VectorData(x);
+   hypre_SyncComputeStream();
 
-   /* Check if vector is initialized */
-   if (!x_data)
-   {
-      hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Vector is not initialized!");
-      return hypre_error_flag;
-   }
-
-   /* Create and initialize z if it doesn't exist, or resize it */
-   if (!*y_ptr)
-   {
-      *y_ptr = hypre_SeqVectorCreate(hypre_VectorSize(x));
-      hypre_SeqVectorInitialize_v2(*y_ptr, hypre_VectorMemoryLocation(x));
-   }
-   else if (*y_ptr != x)
-   {
-      /* No-op if y has the same size as x */
-      hypre_SeqVectorResize(*y_ptr, hypre_VectorSize(x), hypre_VectorNumVectors(x));
-   }
-
-#if defined(HYPRE_USING_GPU)
-   HYPRE_ExecutionPolicy exec = hypre_GetExecPolicy1(hypre_VectorMemoryLocation(x));
-   if (exec == HYPRE_EXEC_DEVICE)
-   {
-      return hypre_SeqVectorPointwiseInverseDevice(x, *y_ptr);
-   }
-   else
+#ifdef HYPRE_PROFILE
+   hypre_profile_times[HYPRE_TIMER_ID_BLAS1] += hypre_MPI_Wtime();
 #endif
-   {
-      return hypre_SeqVectorPointwiseInverseHost(x, *y_ptr);
-   }
+
+   return hypre_error_flag;
 }
+#endif
diff --git a/src/seq_mv/vector.h b/src/seq_mv/vector.h
index 03c7e30d6..dab51adfa 100644
--- a/src/seq_mv/vector.h
+++ b/src/seq_mv/vector.h
@@ -21,11 +21,9 @@
 typedef struct
 {
    HYPRE_Complex        *data;
-   HYPRE_Int             size;       /* Number of elements of a single vector component */
-   HYPRE_Int             component;  /* Index of a multivector component (used for set/get) */
-   HYPRE_Int             owns_tags;  /* Whether the vector owns the array of tags or not */
-   HYPRE_Int             num_tags;   /* Number of unique tags */
-   HYPRE_Int            *tags;       /* Array of tags with same size as vector */
+   HYPRE_Int             size;      /* Number of elements of a single vector component */
+   HYPRE_Int             component; /* Index of a multivector component
+                                    (used for set/get routines )*/
    HYPRE_Int             owns_data;  /* Does the Vector create/destroy `data'? */
    HYPRE_MemoryLocation  memory_location; /* memory location of data array */
 
@@ -49,9 +47,6 @@ typedef struct
 #define hypre_VectorComponent(vector)             ((vector) -> component)
 #define hypre_VectorOwnsData(vector)              ((vector) -> owns_data)
 #define hypre_VectorMemoryLocation(vector)        ((vector) -> memory_location)
-#define hypre_VectorOwnsTags(vector)              ((vector) -> owns_tags)
-#define hypre_VectorNumTags(vector)               ((vector) -> num_tags)
-#define hypre_VectorTags(vector)                  ((vector) -> tags)
 #define hypre_VectorNumVectors(vector)            ((vector) -> num_vectors)
 #define hypre_VectorMultiVecStorageMethod(vector) ((vector) -> multivec_storage_method)
 #define hypre_VectorVectorStride(vector)          ((vector) -> vecstride)
diff --git a/src/seq_mv/vector_device.c b/src/seq_mv/vector_device.c
index d78f6b2ca..7fb5eb10b 100644
--- a/src/seq_mv/vector_device.c
+++ b/src/seq_mv/vector_device.c
@@ -51,32 +51,6 @@ hypre_SeqVectorSetConstantValuesDevice( hypre_Vector *v,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorSetValuesTaggedDevice( hypre_Vector  *vector,
-                                      HYPRE_Complex *values )
-{
-   HYPRE_Int      size = hypre_VectorSize(vector);
-   HYPRE_Int     *tags = hypre_VectorTags(vector);
-   HYPRE_Complex *data = hypre_VectorData(vector);
-
-#if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
-   HYPRE_THRUST_CALL(gather, tags, tags + size, values, data);
-
-#elif defined(HYPRE_USING_SYCL)
-   hypreSycl_gather(tags, tags + size, values, data);
-
-#elif defined(HYPRE_USING_DEVICE_OPENMP)
-   hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Device OpenMP not implemented!");
-#endif
-
-   hypre_SyncComputeStream();
-
-   return hypre_error_flag;
-}
-
 /*--------------------------------------------------------------------------
  * hypre_SeqVectorScaleDevice
  *--------------------------------------------------------------------------*/
@@ -205,15 +179,15 @@ hypre_SeqVectorAxpyzDevice( HYPRE_Complex  alpha,
 }
 
 /*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseDivpy
+ * hypre_SeqVectorElmdivpyDevice
  *--------------------------------------------------------------------------*/
 
 HYPRE_Int
-hypre_SeqVectorPointwiseDivpyDevice( hypre_Vector *x,
-                                     hypre_Vector *b,
-                                     hypre_Vector *y,
-                                     HYPRE_Int    *marker,
-                                     HYPRE_Int     marker_val )
+hypre_SeqVectorElmdivpyDevice( hypre_Vector *x,
+                               hypre_Vector *b,
+                               hypre_Vector *y,
+                               HYPRE_Int    *marker,
+                               HYPRE_Int     marker_val )
 {
 #if defined(HYPRE_USING_GPU)
    HYPRE_Complex  *x_data        = hypre_VectorData(x);
@@ -224,7 +198,7 @@ hypre_SeqVectorPointwiseDivpyDevice( hypre_Vector *x,
    HYPRE_Int       num_vectors_b = hypre_VectorNumVectors(b);
    HYPRE_Int       size          = hypre_VectorSize(b);
 
-   hypre_GpuProfilingPushRange("SeqVectorPtwiseDivpy");
+   hypre_GpuProfilingPushRange("SeqVectorElmdivpyDevice");
    if (num_vectors_b == 1)
    {
       if (num_vectors_x == 1)
@@ -270,7 +244,7 @@ hypre_SeqVectorPointwiseDivpyDevice( hypre_Vector *x,
    hypre_SyncComputeStream();
    hypre_GpuProfilingPopRange();
 
-#elif defined(HYPRE_USING_DEVICE_OPENMP)
+#elif defined(HYPRE_USING_OPENMP)
    hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Not implemented for device OpenMP!\n");
 #endif
 
@@ -426,113 +400,4 @@ hypre_SeqVectorPrefetch( hypre_Vector        *x,
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseProductDevice
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorPointwiseProductDevice( hypre_Vector *x,
-                                       hypre_Vector *y,
-                                       hypre_Vector *z )
-{
-   HYPRE_Complex *x_data      = hypre_VectorData(x);
-   HYPRE_Complex *y_data      = hypre_VectorData(y);
-   HYPRE_Complex *z_data      = hypre_VectorData(z);
-   HYPRE_Int      size        = hypre_VectorSize(x);
-
-#if defined(HYPRE_USING_GPU)
-   hypre_GpuProfilingPushRange("SeqVectorPointwiseProduct");
-
-#if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
-   HYPRE_THRUST_CALL(transform,
-                     x_data, x_data + size, y_data, z_data,
-                     thrust::multiplies<HYPRE_Complex>());
-
-#elif defined(HYPRE_USING_SYCL)
-   HYPRE_ONEDPL_CALL(std::transform,
-                     x_data, x_data + size, y_data, z_data,
-                     std::multiplies<HYPRE_Complex>());
-#endif
-
-   hypre_SyncComputeStream();
-   hypre_GpuProfilingPopRange();
-#else
-   hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Not implemented!");
-#endif
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * See SeqVectorPointwiseDivision
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorPointwiseDivisionDevice( hypre_Vector *x,
-                                        hypre_Vector *y,
-                                        hypre_Vector *z )
-{
-   HYPRE_Complex *x_data      = hypre_VectorData(x);
-   HYPRE_Complex *y_data      = hypre_VectorData(y);
-   HYPRE_Complex *z_data      = hypre_VectorData(z);
-   HYPRE_Int      size        = hypre_VectorSize(x);
-
-#if defined(HYPRE_USING_GPU)
-   hypre_GpuProfilingPushRange("SeqVectorPointwiseDivision");
-
-#if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
-   HYPRE_THRUST_CALL(transform,
-                     x_data, x_data + size, y_data, z_data,
-                     thrust::divides<HYPRE_Complex>());
-
-#elif defined(HYPRE_USING_SYCL)
-   HYPRE_ONEDPL_CALL(std::transform,
-                     x_data, x_data + size, y_data, z_data,
-                     std::divides<HYPRE_Complex>());
-#endif
-
-   hypre_SyncComputeStream();
-   hypre_GpuProfilingPopRange();
-#else
-   hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Not implemented!");
-#endif
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- * See hypre_SeqVectorPointwiseInverse
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SeqVectorPointwiseInverseDevice( hypre_Vector *x,
-                                       hypre_Vector *y )
-{
-   HYPRE_Complex *x_data = hypre_VectorData(x);
-   HYPRE_Complex *y_data = hypre_VectorData(y);
-   HYPRE_Int      size   = hypre_VectorSize(x);
-
-#if defined(HYPRE_USING_GPU)
-   hypre_GpuProfilingPushRange("SeqVectorPointwiseInverse");
-
-#if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
-   HYPRE_THRUST_CALL(transform,
-                     x_data, x_data + size, y_data,
-   [] __host__ __device__ (const HYPRE_Complex & val) { return 1.0 / val; });
-
-#elif defined(HYPRE_USING_SYCL)
-   HYPRE_ONEDPL_CALL(std::transform,
-                     x_data, x_data + size, y_data,
-   [](const HYPRE_Complex & val) { return 1.0 / val; });
-#endif
-
-   hypre_SyncComputeStream();
-   hypre_GpuProfilingPopRange();
-#else
-   hypre_error_w_msg(HYPRE_ERROR_GENERIC, "Not implemented!");
-#endif
-
-   return hypre_error_flag;
-}
-
 #endif
diff --git a/src/sstruct_ls/HYPRE_sstruct_gmres.c b/src/sstruct_ls/HYPRE_sstruct_gmres.c
index a2e726133..227836527 100644
--- a/src/sstruct_ls/HYPRE_sstruct_gmres.c
+++ b/src/sstruct_ls/HYPRE_sstruct_gmres.c
@@ -23,7 +23,7 @@ HYPRE_SStructGMRESCreate( MPI_Comm             comm,
          hypre_SStructKrylovCreateVectorArray,
          hypre_SStructKrylovDestroyVector, hypre_SStructKrylovMatvecCreate,
          hypre_SStructKrylovMatvec, hypre_SStructKrylovMatvecDestroy,
-         hypre_SStructKrylovInnerProdTagged, hypre_SStructKrylovCopyVector,
+         hypre_SStructKrylovInnerProd, hypre_SStructKrylovCopyVector,
          hypre_SStructKrylovClearVector,
          hypre_SStructKrylovScaleVector, hypre_SStructKrylovAxpy,
          hypre_SStructKrylovIdentitySetup, hypre_SStructKrylovIdentity );
diff --git a/src/sstruct_ls/_hypre_sstruct_ls.h b/src/sstruct_ls/_hypre_sstruct_ls.h
index 74d1a2912..3aeb553c7 100644
--- a/src/sstruct_ls/_hypre_sstruct_ls.h
+++ b/src/sstruct_ls/_hypre_sstruct_ls.h
@@ -593,8 +593,6 @@ HYPRE_Int hypre_SStructKrylovMatvec ( void *matvec_data, HYPRE_Complex alpha, vo
                                       HYPRE_Complex beta, void *y );
 HYPRE_Int hypre_SStructKrylovMatvecDestroy ( void *matvec_data );
 HYPRE_Real hypre_SStructKrylovInnerProd ( void *x, void *y );
-HYPRE_Int hypre_SStructKrylovInnerProdTagged ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                               HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_SStructKrylovCopyVector ( void *x, void *y );
 HYPRE_Int hypre_SStructKrylovClearVector ( void *x );
 HYPRE_Int hypre_SStructKrylovScaleVector ( HYPRE_Complex alpha, void *x );
@@ -798,3 +796,4 @@ HYPRE_Int hypre_SysSemiRestrictDestroy ( void *sys_restrict_vdata );
 #endif
 
 #endif
+
diff --git a/src/sstruct_ls/krylov_sstruct.c b/src/sstruct_ls/krylov_sstruct.c
index df07242bf..14d3e691c 100644
--- a/src/sstruct_ls/krylov_sstruct.c
+++ b/src/sstruct_ls/krylov_sstruct.c
@@ -217,32 +217,6 @@ hypre_SStructKrylovInnerProd( void *x,
    return result;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SStructKrylovInnerProdTagged( void           *x,
-                                    void           *y,
-                                    HYPRE_Int      *num_tags_ptr,
-                                    HYPRE_Complex **iprod_ptr )
-{
-   HYPRE_Complex iprod;
-
-   hypre_SStructInnerProd( (hypre_SStructVector *) x,
-                           (hypre_SStructVector *) y,
-                           &iprod );
-
-   if (*iprod_ptr == NULL)
-   {
-      *iprod_ptr = hypre_CTAlloc(HYPRE_Complex, 1, HYPRE_MEMORY_HOST);
-   }
-
-   // TODO (VPM): Add support to multiple tags
-   *num_tags_ptr = 1;
-   *iprod_ptr[0] = iprod;
-
-   return hypre_error_flag;
-}
 
 /*--------------------------------------------------------------------------
  *--------------------------------------------------------------------------*/
diff --git a/src/sstruct_mv/_hypre_sstruct_mv.h b/src/sstruct_mv/_hypre_sstruct_mv.h
index a803a9584..fbe5dc8e9 100644
--- a/src/sstruct_mv/_hypre_sstruct_mv.h
+++ b/src/sstruct_mv/_hypre_sstruct_mv.h
@@ -1103,12 +1103,7 @@ HYPRE_Int hypre_SStructPVectorInitializeShell ( hypre_SStructPVector *pvector );
 HYPRE_Int hypre_SStructVectorInitializeShell ( hypre_SStructVector *vector );
 HYPRE_Int hypre_SStructVectorClearGhostValues ( hypre_SStructVector *vector );
 HYPRE_MemoryLocation hypre_SStructVectorMemoryLocation(hypre_SStructVector *vector);
-HYPRE_Int hypre_SStructVectorPointwiseDivision ( hypre_SStructVector *x, hypre_SStructVector *y,
-                                                 hypre_SStructVector **z_ptr );
-HYPRE_Int hypre_SStructVectorPointwiseProduct ( hypre_SStructVector *x, hypre_SStructVector *y,
-                                                hypre_SStructVector **z_ptr );
-HYPRE_Int hypre_SStructVectorPointwiseInverse ( hypre_SStructVector *x,
-                                                hypre_SStructVector **y_ptr );
+
 
 #ifdef __cplusplus
 }
diff --git a/src/sstruct_mv/protos.h b/src/sstruct_mv/protos.h
index ee2febcf5..a86329ee5 100644
--- a/src/sstruct_mv/protos.h
+++ b/src/sstruct_mv/protos.h
@@ -323,9 +323,4 @@ HYPRE_Int hypre_SStructPVectorInitializeShell ( hypre_SStructPVector *pvector );
 HYPRE_Int hypre_SStructVectorInitializeShell ( hypre_SStructVector *vector );
 HYPRE_Int hypre_SStructVectorClearGhostValues ( hypre_SStructVector *vector );
 HYPRE_MemoryLocation hypre_SStructVectorMemoryLocation(hypre_SStructVector *vector);
-HYPRE_Int hypre_SStructVectorPointwiseDivision ( hypre_SStructVector *x, hypre_SStructVector *y,
-                                                 hypre_SStructVector **z_ptr );
-HYPRE_Int hypre_SStructVectorPointwiseProduct ( hypre_SStructVector *x, hypre_SStructVector *y,
-                                                hypre_SStructVector **z_ptr );
-HYPRE_Int hypre_SStructVectorPointwiseInverse ( hypre_SStructVector *x,
-                                                hypre_SStructVector **y_ptr );
+
diff --git a/src/sstruct_mv/sstruct_vector.c b/src/sstruct_mv/sstruct_vector.c
index 6f1d1504a..1eaf4d8ce 100644
--- a/src/sstruct_mv/sstruct_vector.c
+++ b/src/sstruct_mv/sstruct_vector.c
@@ -821,8 +821,6 @@ hypre_SStructVectorInitializeShell( hypre_SStructVector *vector)
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
 
 HYPRE_Int
 hypre_SStructVectorClearGhostValues(hypre_SStructVector *vector)
@@ -849,9 +847,6 @@ hypre_SStructVectorClearGhostValues(hypre_SStructVector *vector)
    return hypre_error_flag;
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
 HYPRE_MemoryLocation
 hypre_SStructVectorMemoryLocation(hypre_SStructVector *vector)
 {
@@ -879,52 +874,3 @@ hypre_SStructVectorMemoryLocation(hypre_SStructVector *vector)
 
    return HYPRE_MEMORY_UNDEFINED;
 }
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SStructVectorPointwiseDivision( hypre_SStructVector  *x,
-                                      hypre_SStructVector  *y,
-                                      hypre_SStructVector **z_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y);
-   HYPRE_UNUSED_VAR(z_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SStructVectorPointwiseProduct( hypre_SStructVector  *x,
-                                     hypre_SStructVector  *y,
-                                     hypre_SStructVector **z_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y);
-   HYPRE_UNUSED_VAR(z_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_SStructVectorPointwiseInverse( hypre_SStructVector  *x,
-                                     hypre_SStructVector **y_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
diff --git a/src/struct_ls/HYPRE_struct_gmres.c b/src/struct_ls/HYPRE_struct_gmres.c
index 6ea0f108f..62c78e986 100644
--- a/src/struct_ls/HYPRE_struct_gmres.c
+++ b/src/struct_ls/HYPRE_struct_gmres.c
@@ -22,7 +22,7 @@ HYPRE_StructGMRESCreate( MPI_Comm comm, HYPRE_StructSolver *solver )
          hypre_StructKrylovCreateVectorArray,
          hypre_StructKrylovDestroyVector, hypre_StructKrylovMatvecCreate,
          hypre_StructKrylovMatvec, hypre_StructKrylovMatvecDestroy,
-         hypre_StructKrylovInnerProdTagged, hypre_StructKrylovCopyVector,
+         hypre_StructKrylovInnerProd, hypre_StructKrylovCopyVector,
          hypre_StructKrylovClearVector,
          hypre_StructKrylovScaleVector, hypre_StructKrylovAxpy,
          hypre_StructKrylovIdentitySetup, hypre_StructKrylovIdentity );
diff --git a/src/struct_ls/_hypre_struct_ls.h b/src/struct_ls/_hypre_struct_ls.h
index df3b050fe..867a641ee 100644
--- a/src/struct_ls/_hypre_struct_ls.h
+++ b/src/struct_ls/_hypre_struct_ls.h
@@ -118,8 +118,6 @@ HYPRE_Int hypre_StructKrylovMatvec ( void *matvec_data, HYPRE_Complex alpha, voi
                                      HYPRE_Complex beta, void *y );
 HYPRE_Int hypre_StructKrylovMatvecDestroy ( void *matvec_data );
 HYPRE_Real hypre_StructKrylovInnerProd ( void *x, void *y );
-HYPRE_Int hypre_StructKrylovInnerProdTagged ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                              HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_StructKrylovCopyVector ( void *x, void *y );
 HYPRE_Int hypre_StructKrylovClearVector ( void *x );
 HYPRE_Int hypre_StructKrylovScaleVector ( HYPRE_Complex alpha, void *x );
diff --git a/src/struct_ls/hybrid.c b/src/struct_ls/hybrid.c
index 09d4b37d5..e9b406334 100644
--- a/src/struct_ls/hybrid.c
+++ b/src/struct_ls/hybrid.c
@@ -503,7 +503,7 @@ hypre_HybridSolveUseGMRES( hypre_HybridData  *hybrid_data )
          hypre_StructKrylovCreateVectorArray,
          hypre_StructKrylovDestroyVector, hypre_StructKrylovMatvecCreate,
          hypre_StructKrylovMatvec, hypre_StructKrylovMatvecDestroy,
-         hypre_StructKrylovInnerProdTagged, hypre_StructKrylovCopyVector,
+         hypre_StructKrylovInnerProd, hypre_StructKrylovCopyVector,
          hypre_StructKrylovClearVector,
          hypre_StructKrylovScaleVector, hypre_StructKrylovAxpy,
          hypre_StructKrylovIdentitySetup, hypre_StructKrylovIdentity );
diff --git a/src/struct_ls/pcg_struct.c b/src/struct_ls/pcg_struct.c
index 20e26c7fb..f2002f9ce 100644
--- a/src/struct_ls/pcg_struct.c
+++ b/src/struct_ls/pcg_struct.c
@@ -138,29 +138,6 @@ hypre_StructKrylovInnerProd( void *x,
                                    (hypre_StructVector *) y ) );
 }
 
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_StructKrylovInnerProdTagged( void           *x,
-                                   void           *y,
-                                   HYPRE_Int      *num_tags_ptr,
-                                   HYPRE_Complex **iprod_ptr )
-{
-   HYPRE_Complex iprod = hypre_StructInnerProd( (hypre_StructVector *) x,
-                                                (hypre_StructVector *) y );
-
-   if (*iprod_ptr == NULL)
-   {
-      *iprod_ptr = hypre_CTAlloc(HYPRE_Complex, 1, HYPRE_MEMORY_HOST);
-   }
-
-   // TODO (VPM): Add support to multiple tags
-   *num_tags_ptr = 1;
-   *iprod_ptr[0] = iprod;
-
-   return hypre_error_flag;
-}
 
 /*--------------------------------------------------------------------------
  *--------------------------------------------------------------------------*/
diff --git a/src/struct_ls/protos.h b/src/struct_ls/protos.h
index d2da3a0fa..1c8b9fccd 100644
--- a/src/struct_ls/protos.h
+++ b/src/struct_ls/protos.h
@@ -98,8 +98,6 @@ HYPRE_Int hypre_StructKrylovMatvec ( void *matvec_data, HYPRE_Complex alpha, voi
                                      HYPRE_Complex beta, void *y );
 HYPRE_Int hypre_StructKrylovMatvecDestroy ( void *matvec_data );
 HYPRE_Real hypre_StructKrylovInnerProd ( void *x, void *y );
-HYPRE_Int hypre_StructKrylovInnerProdTagged ( void *x, void *y, HYPRE_Int *num_tags_ptr,
-                                              HYPRE_Complex **iprod_ptr );
 HYPRE_Int hypre_StructKrylovCopyVector ( void *x, void *y );
 HYPRE_Int hypre_StructKrylovClearVector ( void *x );
 HYPRE_Int hypre_StructKrylovScaleVector ( HYPRE_Complex alpha, void *x );
diff --git a/src/struct_mv/_hypre_struct_mv.h b/src/struct_mv/_hypre_struct_mv.h
index 4086b648d..fdb019e16 100644
--- a/src/struct_mv/_hypre_struct_mv.h
+++ b/src/struct_mv/_hypre_struct_mv.h
@@ -1765,11 +1765,6 @@ HYPRE_Int hypre_StructVectorPrint ( const char *filename, hypre_StructVector *ve
 hypre_StructVector *hypre_StructVectorRead ( MPI_Comm comm, const char *filename,
                                              HYPRE_Int *num_ghost );
 hypre_StructVector *hypre_StructVectorClone ( hypre_StructVector *vector );
-HYPRE_Int hypre_StructVectorPointwiseDivision ( hypre_StructVector *x, hypre_StructVector *y,
-                                                hypre_StructVector **z_ptr );
-HYPRE_Int hypre_StructVectorPointwiseProduct ( hypre_StructVector *x, hypre_StructVector *y,
-                                               hypre_StructVector **z_ptr );
-HYPRE_Int hypre_StructVectorPointwiseInverse ( hypre_StructVector *x, hypre_StructVector **y_ptr );
 /******************************************************************************
  * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
  * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
diff --git a/src/struct_mv/protos.h b/src/struct_mv/protos.h
index 1adabe15d..640a1c5df 100644
--- a/src/struct_mv/protos.h
+++ b/src/struct_mv/protos.h
@@ -452,8 +452,3 @@ HYPRE_Int hypre_StructVectorPrint ( const char *filename, hypre_StructVector *ve
 hypre_StructVector *hypre_StructVectorRead ( MPI_Comm comm, const char *filename,
                                              HYPRE_Int *num_ghost );
 hypre_StructVector *hypre_StructVectorClone ( hypre_StructVector *vector );
-HYPRE_Int hypre_StructVectorPointwiseDivision ( hypre_StructVector *x, hypre_StructVector *y,
-                                                hypre_StructVector **z_ptr );
-HYPRE_Int hypre_StructVectorPointwiseProduct ( hypre_StructVector *x, hypre_StructVector *y,
-                                               hypre_StructVector **z_ptr );
-HYPRE_Int hypre_StructVectorPointwiseInverse ( hypre_StructVector *x, hypre_StructVector **y_ptr );
diff --git a/src/struct_mv/struct_vector.c b/src/struct_mv/struct_vector.c
index b0b6b6178..1a5d418fa 100644
--- a/src/struct_mv/struct_vector.c
+++ b/src/struct_mv/struct_vector.c
@@ -1320,69 +1320,3 @@ hypre_StructVectorClone(hypre_StructVector *x)
 
    return y;
 }
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_StructVectorPointwiseDivpy( hypre_StructVector *x,
-                                  hypre_StructVector *b,
-                                  hypre_StructVector *y )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(b);
-   HYPRE_UNUSED_VAR(y);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_StructVectorPointwiseDivision( hypre_StructVector  *x,
-                                     hypre_StructVector  *y,
-                                     hypre_StructVector **z_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y);
-   HYPRE_UNUSED_VAR(z_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_StructVectorPointwiseProduct( hypre_StructVector  *x,
-                                    hypre_StructVector  *y,
-                                    hypre_StructVector **z_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y);
-   HYPRE_UNUSED_VAR(z_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
-
-/*--------------------------------------------------------------------------
- *--------------------------------------------------------------------------*/
-
-HYPRE_Int
-hypre_StructVectorPointwiseInverse( hypre_StructVector  *x,
-                                    hypre_StructVector **y_ptr )
-{
-   HYPRE_UNUSED_VAR(x);
-   HYPRE_UNUSED_VAR(y_ptr);
-
-   /* Not implemented yet */
-
-   return hypre_error_flag;
-}
diff --git a/src/test/TEST_ams/.psrc b/src/test/TEST_ams/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_ams/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/TEST_fac/.psrc b/src/test/TEST_fac/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_fac/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/TEST_fei/.psrc b/src/test/TEST_fei/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_fei/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/TEST_ij/.psrc b/src/test/TEST_ij/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_ij/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00000 b/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00000
deleted file mode 100644
index 3f93509d4..000000000
--- a/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00000
+++ /dev/null
@@ -1,244 +0,0 @@
-0 242
-0 1.00000000000000e+00
-1 1.00000000000000e+00
-2 1.00000000000000e+00
-3 4.57518874980350e+01
-4 2.81270420030534e+01
-5 2.81270420030395e+01
-6 8.17874178525590e+01
-7 9.28579727181225e+01
-8 9.28579727180743e+01
-9 1.08064918959705e+02
-10 1.87460753231304e+02
-11 1.87460753231212e+02
-12 1.27145132834833e+02
-13 3.04203527460111e+02
-14 3.04203527459974e+02
-15 1.00000000000000e+00
-16 1.00000000000000e+00
-17 1.00000000000000e+00
-18 1.08695981787804e+00
-19 2.27877852232351e+01
-20 2.30509474161115e+01
-21 2.05896748139514e+00
-22 8.89003038776121e+01
-23 8.91252859098145e+01
-24 2.88574370841572e+00
-25 1.84653828666075e+02
-26 1.84841018450614e+02
-27 3.69109371351908e+00
-28 3.00336384982311e+02
-29 3.00688850167358e+02
-30 1.00000000000000e+00
-31 1.00000000000000e+00
-32 1.00000000000000e+00
-33 1.08695981790133e+00
-34 2.30509474161267e+01
-35 2.27877852232189e+01
-36 2.05896748143265e+00
-37 8.91252859098619e+01
-38 8.89003038775625e+01
-39 2.88574370845888e+00
-40 1.84841018450703e+02
-41 1.84653828665983e+02
-42 3.69109371356307e+00
-43 3.00688850167490e+02
-44 3.00336384982174e+02
-45 1.00000000000000e+00
-46 1.00000000000000e+00
-47 1.00000000000000e+00
-48 -4.35779678622556e+01
-49 2.78638798101608e+01
-50 2.78638798101480e+01
-51 -7.76694828897313e+01
-52 9.26329906858706e+01
-53 9.26329906858244e+01
-54 -1.02293431542831e+02
-55 1.87273563446672e+02
-56 1.87273563446584e+02
-57 -1.19762945407751e+02
-58 3.03851062274928e+02
-59 3.03851062274795e+02
-60 2.39446144238123e+01
-61 1.05636670938370e+01
-62 1.05636670938338e+01
-63 2.35210024548906e+01
-64 2.42770033576678e+01
-65 2.68605753200603e+01
-66 5.74851034597299e-01
-67 4.34357432204876e+00
-68 4.63765086329990e+00
-69 1.00000000000000e+00
-70 1.00000000000000e+00
-71 1.00000000000000e+00
-72 5.74851034609981e-01
-73 4.63765086330570e+00
-74 4.34357432204243e+00
-75 -2.13843310715095e+01
-76 2.42770033576673e+01
-77 2.65925771791452e+01
-78 -2.27949123546050e+01
-79 1.02695905525795e+01
-80 1.02695905525768e+01
-81 1.00000000000000e+00
-82 1.00000000000000e+00
-83 1.00000000000000e+00
-84 1.00000000000000e+00
-85 1.00000000000000e+00
-86 1.00000000000000e+00
-87 2.35210024549023e+01
-88 2.68605753200755e+01
-89 2.42770033576533e+01
-90 -2.13843310715213e+01
-91 2.65925771791603e+01
-92 2.42770033576538e+01
-93 1.00000000000000e+00
-94 1.00000000000000e+00
-95 1.00000000000000e+00
-96 6.50724272049597e+01
-97 5.61657779629322e+01
-98 5.61657779629028e+01
-99 4.19941496098452e+01
-100 8.99332466862981e+01
-101 9.19078521182513e+01
-102 1.59068587439114e+00
-103 5.15694380097964e+01
-104 5.18126938070451e+01
-105 1.59068587442272e+00
-106 5.18126938070747e+01
-107 5.15694380097652e+01
-108 -3.79119878074995e+01
-109 8.99332466862971e+01
-110 9.16828859666228e+01
-111 -6.18910554561460e+01
-112 5.59225221656523e+01
-113 5.59225221656245e+01
-114 4.19941496098640e+01
-115 9.19078521182995e+01
-116 8.99332466862495e+01
-117 -3.79119878075183e+01
-118 9.16828859666710e+01
-119 8.99332466862506e+01
-120 9.60502895207746e+01
-121 1.37006596701981e+02
-122 1.37006596701911e+02
-123 5.55479811245863e+01
-124 1.85363873236353e+02
-125 1.86779529910443e+02
-126 2.49070564244914e+00
-127 1.33640257002696e+02
-128 1.33847271038269e+02
-129 2.49070564249048e+00
-130 1.33847271038337e+02
-131 1.33640257002625e+02
-132 -4.98111520579615e+01
-133 1.85363873236351e+02
-134 1.86594839653381e+02
-135 -9.10688782358352e+01
-136 1.36799582666337e+02
-137 1.36799582666270e+02
-138 5.55479811246080e+01
-139 1.86779529910534e+02
-140 1.85363873236261e+02
-141 -4.98111520579832e+01
-142 1.86594839653471e+02
-143 1.85363873236262e+02
-144 1.18166649875733e+02
-145 2.42987227847571e+02
-146 2.42987227847457e+02
-147 6.48494987260303e+01
-148 3.01378366675686e+02
-149 3.03182909339810e+02
-150 3.26882957824413e+00
-151 2.40819812093488e+02
-152 2.40968010062168e+02
-153 3.26882957828798e+00
-154 2.40968010062279e+02
-155 2.40819812093374e+02
-156 -5.77103633270302e+01
-157 3.01378366675684e+02
-158 3.02857156013664e+02
-159 -1.11628990719201e+02
-160 2.42839029878777e+02
-161 2.42839029878666e+02
-162 6.48494987260527e+01
-163 3.03182909339945e+02
-164 3.01378366675549e+02
-165 -5.77103633270523e+01
-166 3.02857156013799e+02
-167 3.01378366675551e+02
-168 1.18535565067785e+01
-169 5.64317513490329e+00
-170 8.88617921016922e+00
-171 1.18535565067847e+01
-172 8.88617921017441e+00
-173 5.64317513489948e+00
-174 1.06459836593668e+00
-175 2.55107335130580e+01
-176 2.55107335130435e+01
-177 -1.08032762342127e+01
-178 8.59349156752418e+00
-179 5.64317513489974e+00
-180 1.00000000000000e+00
-181 1.00000000000000e+00
-182 1.00000000000000e+00
-183 -1.08032762342065e+01
-184 5.64317513490302e+00
-185 8.59349156751901e+00
-186 3.34171322069994e+01
-187 5.27458855933996e+01
-188 5.50567495892922e+01
-189 3.34171322070153e+01
-190 5.50567495893221e+01
-191 5.27458855933698e+01
-192 2.03794823775833e+00
-193 9.08566474696597e+01
-194 9.08566474696119e+01
-195 -3.02713767276884e+01
-196 5.48142877139786e+01
-197 5.27458855933706e+01
-198 -3.02713767276725e+01
-199 5.27458855933988e+01
-200 5.48142877139487e+01
-201 4.93366673833704e+01
-202 1.34523476945956e+02
-203 1.36200055838390e+02
-204 4.93366673833912e+01
-205 1.36200055838459e+02
-206 1.34523476945887e+02
-207 2.86692002352236e+00
-208 1.86009426989734e+02
-209 1.86009426989643e+02
-210 -4.43906750875471e+01
-211 1.35992361071288e+02
-212 1.34523476945888e+02
-213 -4.43906750875264e+01
-214 1.34523476945955e+02
-215 1.35992361071219e+02
-216 6.05940175940796e+01
-217 2.41423003093454e+02
-218 2.42531765754617e+02
-219 6.05940175941016e+01
-220 2.42531765754730e+02
-221 2.41423003093339e+02
-222 3.48267074422706e+00
-223 3.02204996470958e+02
-224 3.02204996470823e+02
-225 -5.41476333922095e+01
-226 2.42389902412757e+02
-227 2.41423003093341e+02
-228 -5.41476333921876e+01
-229 2.41423003093452e+02
-230 2.42389902412645e+02
-231 4.90456754126817e-01
-232 6.93666683340336e+00
-233 6.93666683339915e+00
-234 1.57074754895018e+00
-235 5.38329702379932e+01
-236 5.38329702379637e+01
-237 2.47059857876849e+00
-238 1.35302046312042e+02
-239 1.35302046311973e+02
-240 3.19492613591251e+00
-241 2.42019308667889e+02
-242 2.42019308667776e+02
diff --git a/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00001 b/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00001
deleted file mode 100644
index 0c824f9eb..000000000
--- a/src/test/TEST_ij/data/beam_hex_dof459_np2/xstar.IJ.00001
+++ /dev/null
@@ -1,217 +0,0 @@
-243 458
-243 6.75719908348937e+02
-244 7.95977946185167e+02
-245 7.95977946184949e+02
-246 9.89481395386967e+02
-247 1.63937950608524e+03
-248 1.63937950608492e+03
-249 1.12316148595739e+03
-250 2.67128753995092e+03
-251 2.67128753995049e+03
-252 1.15520253012425e+03
-253 3.75894759002047e+03
-254 3.75894759002003e+03
-255 3.02180726399027e+01
-256 7.39635594941890e+02
-257 7.45540371255716e+02
-258 5.00161389334050e+01
-259 1.61187770840909e+03
-260 1.61592613143900e+03
-261 6.26020393386226e+01
-262 2.66237281500393e+03
-263 2.66462035690487e+03
-264 6.93637231091897e+01
-265 3.75795023257895e+03
-266 3.75985592418977e+03
-267 3.02180726399660e+01
-268 7.45540371255880e+02
-269 7.39635594941671e+02
-270 5.00161389334738e+01
-271 1.61592613143921e+03
-272 1.61187770840877e+03
-273 6.26020393386591e+01
-274 2.66462035690510e+03
-275 2.66237281500351e+03
-276 6.93637231092086e+01
-277 3.75985592419000e+03
-278 3.75795023257849e+03
-279 -6.15283763069066e+02
-280 7.90073169871119e+02
-281 7.90073169870957e+02
-282 -8.89449117520086e+02
-283 1.63533108305501e+03
-284 1.63533108305480e+03
-285 -9.97957407280108e+02
-286 2.66903999804956e+03
-287 2.66903999804932e+03
-288 -1.01647508390585e+03
-289 3.75704189840920e+03
-290 3.75704189840897e+03
-291 4.32093059303047e+02
-292 5.13609348705897e+02
-293 5.13609348705724e+02
-294 3.54635242641573e+02
-295 7.55763033221544e+02
-296 7.82781713664861e+02
-297 1.82991784722763e+01
-298 4.37270948280056e+02
-299 4.44361310176810e+02
-300 1.82991784723312e+01
-301 4.44361310176956e+02
-302 4.37270948279879e+02
-303 -2.96034260713733e+02
-304 7.55763033221515e+02
-305 7.76761749913542e+02
-306 -3.95494702358439e+02
-307 5.06518986808966e+02
-308 5.06518986808823e+02
-309 3.54635242641606e+02
-310 7.82781713665053e+02
-311 7.55763033221326e+02
-312 -2.96034260713765e+02
-313 7.76761749913732e+02
-314 7.55763033221353e+02
-315 8.59778522558710e+02
-316 1.18295573378060e+03
-317 1.18295573378033e+03
-318 5.20459777487643e+02
-319 1.61906125150514e+03
-320 1.63264598161434e+03
-321 4.10091631718814e+01
-322 1.14259525792866e+03
-323 1.14755149860830e+03
-324 4.10091631719499e+01
-325 1.14755149860848e+03
-326 1.14259525792839e+03
-327 -4.22222904777295e+02
-328 1.61906125150509e+03
-329 1.62859762307607e+03
-330 -7.77760196214879e+02
-331 1.17799949310069e+03
-332 1.17799949310051e+03
-333 5.20459777487678e+02
-334 1.63264598161460e+03
-335 1.61906125150482e+03
-336 -4.22222904777330e+02
-337 1.62859762307634e+03
-338 1.61906125150488e+03
-339 1.07401504287916e+03
-340 2.14193500625889e+03
-341 2.14193500625852e+03
-342 5.92904320494803e+02
-343 2.66439591227376e+03
-344 2.66870070099952e+03
-345 5.72155265886779e+01
-346 2.12492444553113e+03
-347 2.12807372680257e+03
-348 5.72155265887366e+01
-349 2.12807372680279e+03
-350 2.12492444553076e+03
-351 -4.69471442124395e+02
-352 2.66439591227367e+03
-353 2.66648647680713e+03
-354 -9.59583989701745e+02
-355 2.13878572498708e+03
-356 2.13878572498685e+03
-357 5.92904320494821e+02
-358 2.66870070099986e+03
-359 2.66439591227333e+03
-360 -4.69471442124414e+02
-361 2.66648647680745e+03
-362 2.66439591227342e+03
-363 1.14667169054687e+03
-364 3.21271224191109e+03
-365 3.21271224191064e+03
-366 6.10020422105048e+02
-367 3.75700793710351e+03
-368 3.75689829086309e+03
-369 6.63678990626233e+01
-370 3.20984820127534e+03
-371 3.21094676292645e+03
-372 6.63678990626439e+01
-373 3.21094676292667e+03
-374 3.20984820127489e+03
-375 -4.76053626651499e+02
-376 3.75700793710341e+03
-377 3.75556917526184e+03
-378 -1.01393589242161e+03
-379 3.21161368025955e+03
-380 3.21161368025931e+03
-381 6.10020422105054e+02
-382 3.75689829086343e+03
-383 3.75700793710307e+03
-384 -4.76053626651505e+02
-385 3.75556917526218e+03
-386 3.75700793710317e+03
-387 2.20221674855495e+02
-388 4.53521633543649e+02
-389 4.93062860245843e+02
-390 2.20221674855522e+02
-391 4.93062860246003e+02
-392 4.53521633543475e+02
-393 2.91303559335254e+01
-394 7.67614941181073e+02
-395 7.67614941180881e+02
-396 -1.86974948904746e+02
-397 4.85999935464471e+02
-398 4.53521633543490e+02
-399 -1.86974948904719e+02
-400 4.53521633543634e+02
-401 4.85999935464309e+02
-402 4.51553950711129e+02
-403 1.15294382547852e+03
-404 1.17318012734838e+03
-405 4.51553950711163e+02
-406 1.17318012734860e+03
-407 1.15294382547825e+03
-408 4.89662364809279e+01
-409 1.62445357248892e+03
-410 1.62445357248866e+03
-411 -3.71325807841388e+02
-412 1.16824237241025e+03
-413 1.15294382547829e+03
-414 -3.71325807841353e+02
-415 1.15294382547847e+03
-416 1.16824237241002e+03
-417 5.65976403663158e+02
-418 2.12922449404798e+03
-419 2.13759496545659e+03
-420 5.65976403663188e+02
-421 2.13759496545689e+03
-422 2.12922449404761e+03
-423 6.15745371609050e+01
-424 2.66560687152272e+03
-425 2.66560687152239e+03
-426 -4.53343822658692e+02
-427 2.13443821044184e+03
-428 2.12922449404768e+03
-429 -4.53343822658662e+02
-430 2.12922449404791e+03
-431 2.13443821044154e+03
-432 6.05933093700711e+02
-433 3.21022332213411e+03
-434 3.21155365411788e+03
-435 6.05933093700717e+02
-436 3.21155365411822e+03
-437 3.21022332213367e+03
-438 6.63373001645298e+01
-439 3.75579822987822e+03
-440 3.75579822987787e+03
-441 -4.75401343476924e+02
-442 3.21041295663671e+03
-443 3.21022332213377e+03
-444 -4.75401343476914e+02
-445 3.21022332213401e+03
-446 3.21041295663638e+03
-447 1.57108304969532e+01
-448 4.67882375035770e+02
-449 4.67882375035610e+02
-450 3.99850163541319e+01
-451 1.16143613404502e+03
-452 1.16143613404480e+03
-453 5.61720798165941e+01
-454 2.13222826635995e+03
-455 2.13222826635964e+03
-456 6.49434806590623e+01
-457 3.21022642002271e+03
-458 3.21022642002238e+03
diff --git a/src/test/TEST_ij/data/beam_tet_dof459_np1/xstar.IJ.00000 b/src/test/TEST_ij/data/beam_tet_dof459_np1/xstar.IJ.00000
deleted file mode 100644
index 76a9ce6a1..000000000
--- a/src/test/TEST_ij/data/beam_tet_dof459_np1/xstar.IJ.00000
+++ /dev/null
@@ -1,460 +0,0 @@
-0 458
-0 1.00000000000000e+00
-1 1.00000000000000e+00
-2 1.00000000000000e+00
-3 2.45726990259830e+01
-4 1.55163579674950e+01
-5 1.55163579674946e+01
-6 4.29561579546668e+01
-7 4.95247079326237e+01
-8 4.95247079326232e+01
-9 5.64530249327275e+01
-10 9.82058226901402e+01
-11 9.82058226901400e+01
-12 6.65714166573871e+01
-13 1.58140556532645e+02
-14 1.58140556532647e+02
-15 3.67815712730859e+02
-16 4.42894033778308e+02
-17 4.42894033778331e+02
-18 5.31866461649058e+02
-19 8.95910663475566e+02
-20 8.95910663475634e+02
-21 6.03151311817854e+02
-22 1.43158861159567e+03
-23 1.43158861159579e+03
-24 6.20519292220704e+02
-25 1.98430836120155e+03
-26 1.98430836120173e+03
-27 1.00000000000000e+00
-28 1.00000000000000e+00
-29 1.00000000000000e+00
-30 3.62671172106722e-01
-31 1.36466045850018e+01
-32 1.41160618370405e+01
-33 1.62159781456557e+00
-34 4.80641917185930e+01
-35 4.84403925444300e+01
-36 2.76122738491936e+00
-37 9.71150065638512e+01
-38 9.74296182424821e+01
-39 3.56417328608789e+00
-40 1.56135017685260e+02
-41 1.56470083967519e+02
-42 2.57981111544026e+01
-43 4.19295872086514e+02
-44 4.29481303669544e+02
-45 5.21244968998113e+01
-46 8.82859790970199e+02
-47 8.89604130206169e+02
-48 6.97965251300037e+01
-49 1.42672845915670e+03
-50 1.43041528068059e+03
-51 7.90324904803012e+01
-52 1.98374784812395e+03
-53 1.98611313912741e+03
-54 1.00000000000000e+00
-55 1.00000000000000e+00
-56 1.00000000000000e+00
-57 3.62671172106735e-01
-58 1.41160618370404e+01
-59 1.36466045850014e+01
-60 1.62159781456525e+00
-61 4.84403925444297e+01
-62 4.80641917185925e+01
-63 2.76122738491839e+00
-64 9.74296182424811e+01
-65 9.71150065638511e+01
-66 3.56417328608607e+00
-67 1.56470083967516e+02
-68 1.56135017685262e+02
-69 2.57981111543716e+01
-70 4.29481303669520e+02
-71 4.19295872086539e+02
-72 5.21244968997632e+01
-73 8.89604130206102e+02
-74 8.82859790970267e+02
-75 6.97965251299484e+01
-76 1.43041528068047e+03
-77 1.42672845915682e+03
-78 7.90324904802444e+01
-79 1.98611313912724e+03
-80 1.98374784812413e+03
-81 1.00000000000000e+00
-82 1.00000000000000e+00
-83 1.00000000000000e+00
-84 -2.07521951957980e+01
-85 1.49863029848131e+01
-86 1.49863029848132e+01
-87 -3.72817659691965e+01
-88 4.90565460697809e+01
-89 4.90565460697812e+01
-90 -4.91575486167430e+01
-91 9.78094707093067e+01
-92 9.78094707093077e+01
-93 -5.70156902210899e+01
-94 1.56813879211766e+02
-95 1.56813879211768e+02
-96 -2.88483644966009e+02
-97 4.30956975721022e+02
-98 4.30956975721044e+02
-99 -4.15161811014083e+02
-100 8.87470107835300e+02
-101 8.87470107835365e+02
-102 -4.62609719247628e+02
-103 1.42691278307092e+03
-104 1.42691278307104e+03
-105 -4.68955101903535e+02
-106 1.98215534480444e+03
-107 1.98215534480461e+03
-108 1.32632284892796e+01
-109 5.48992513167856e+00
-110 5.48992513167836e+00
-111 1.00000000000000e+00
-112 1.00000000000000e+00
-113 1.00000000000000e+00
-114 6.54195238558776e+00
-115 3.79822793543682e+00
-116 5.15244970614643e+00
-117 1.00000000000000e+00
-118 1.00000000000000e+00
-119 1.00000000000000e+00
-120 6.54195238558779e+00
-121 5.15244970614650e+00
-122 3.79822793543664e+00
-123 1.00000000000000e+00
-124 1.00000000000000e+00
-125 1.00000000000000e+00
-126 2.01073723833844e-01
-127 4.01151397009613e+00
-128 4.01151397009606e+00
-129 3.44253410395113e+01
-130 3.03855940650127e+01
-131 3.03855940650122e+01
-132 1.25069251925718e+01
-133 1.38768793328335e+01
-134 1.51399735350463e+01
-135 1.77754131824797e+01
-136 2.89399945992656e+01
-137 3.00462008010232e+01
-138 1.25069251925718e+01
-139 1.51399735350464e+01
-140 1.38768793328332e+01
-141 1.77754131824796e+01
-142 3.00462008010234e+01
-143 2.89399945992651e+01
-144 9.92697873012273e-01
-145 1.41474294236203e+01
-146 1.41474294236202e+01
-147 1.64182562429606e+00
-148 2.91827329559067e+01
-149 2.91827329559066e+01
-150 5.02639922879052e+01
-151 7.23213121271611e+01
-152 7.23213121271605e+01
-153 2.23619692421797e+01
-154 4.82714003663526e+01
-155 4.92303632296699e+01
-156 2.63085636444953e+01
-157 7.12458147133437e+01
-158 7.20707088586840e+01
-159 2.23619692421795e+01
-160 4.92303632296700e+01
-161 4.82714003663520e+01
-162 2.63085636444950e+01
-163 7.20707088586840e+01
-164 7.12458147133433e+01
-165 2.20767933220147e+00
-166 4.84759767212968e+01
-167 4.84759767212967e+01
-168 2.71863626136992e+00
-169 7.14162372938820e+01
-170 7.14162372938821e+01
-171 6.16655715690469e+01
-172 1.26701538595056e+02
-173 1.26701538595056e+02
-174 2.96618492205277e+01
-175 9.72865774163811e+01
-176 9.79956161930013e+01
-177 3.24753354237975e+01
-178 1.25863330956137e+02
-179 1.26500532757900e+02
-180 2.96618492205272e+01
-181 9.79956161930008e+01
-182 9.72865774163810e+01
-183 3.24753354237967e+01
-184 1.26500532757898e+02
-185 1.25863330956138e+02
-186 3.18224837458802e+00
-187 9.74332269399630e+01
-188 9.74332269399634e+01
-189 3.59961505618481e+00
-190 1.26006026934678e+02
-191 1.26006026934679e+02
-192 2.38748006303161e+02
-193 2.77151075466697e+02
-194 2.77151075466706e+02
-195 3.49213725669986e+01
-196 1.56392399584676e+02
-197 1.57386914305480e+02
-198 1.25301348219304e+02
-199 2.55007608488126e+02
-200 2.72939238471145e+02
-201 3.49213725669977e+01
-202 1.57386914305478e+02
-203 1.56392399584678e+02
-204 1.25301348219295e+02
-205 2.72939238471135e+02
-206 2.55007608488134e+02
-207 3.89764696243820e+00
-208 1.56577206636109e+02
-209 1.56577206636111e+02
-210 1.32672450297831e+01
-211 2.56174931224963e+02
-212 2.56174931224972e+02
-213 4.63796585737336e+02
-214 6.53444716987105e+02
-215 6.53444716987149e+02
-216 1.97799740286995e+02
-217 4.23942727249072e+02
-218 4.38585597854619e+02
-219 2.53064988171159e+02
-220 6.39166150584487e+02
-221 6.50036649436362e+02
-222 1.97799740286979e+02
-223 4.38585597854595e+02
-224 4.23942727249095e+02
-225 2.53064988171139e+02
-226 6.50036649436318e+02
-227 6.39166150584531e+02
-228 3.02931481699892e+01
-229 4.25262523797424e+02
-230 4.25262523797447e+02
-231 4.38348959073593e+01
-232 6.39822697499088e+02
-233 6.39822697499131e+02
-234 5.76748271068281e+02
-235 1.15847770139362e+03
-236 1.15847770139371e+03
-237 2.93114640663358e+02
-238 8.85797889621097e+02
-239 8.93408466462855e+02
-240 3.20283093845671e+02
-241 1.15186333523764e+03
-242 1.15672549409779e+03
-243 2.93114640663334e+02
-244 8.93408466462787e+02
-245 8.85797889621166e+02
-246 3.20283093845645e+02
-247 1.15672549409770e+03
-248 1.15186333523773e+03
-249 5.46671504298010e+01
-250 8.85798390606935e+02
-251 8.85798390607003e+02
-252 6.32007308248057e+01
-253 1.15135183573994e+03
-254 1.15135183574003e+03
-255 6.15823900693273e+02
-256 1.70811558450601e+03
-257 1.70811558450616e+03
-258 3.36957323392476e+02
-259 1.42781198167396e+03
-260 1.43039446354127e+03
-261 3.45554912844715e+02
-262 1.70645336932242e+03
-263 1.70724724509452e+03
-264 3.36957323392448e+02
-265 1.43039446354115e+03
-266 1.42781198167409e+03
-267 3.45554912844686e+02
-268 1.70724724509437e+03
-269 1.70645336932258e+03
-270 6.95361695356406e+01
-271 1.42692552900572e+03
-272 1.42692552900584e+03
-273 7.36426133683289e+01
-274 1.70530522393732e+03
-275 1.70530522393747e+03
-276 3.48803754016781e+02
-277 1.98243076868005e+03
-278 1.98327545057835e+03
-279 3.48803754016753e+02
-280 1.98327545057817e+03
-281 1.98243076868023e+03
-282 7.55454369289398e+01
-283 1.98154410700900e+03
-284 1.98154410700918e+03
-285 -2.14014295839199e-02
-286 3.71362412438564e+00
-287 4.12000873743495e+00
-288 1.00000000000000e+00
-289 1.00000000000000e+00
-290 1.00000000000000e+00
-291 -5.57594803635112e+00
-292 4.58772868831550e+00
-293 3.79559479103907e+00
-294 9.84117263108358e-01
-295 2.87140327896189e+01
-296 2.91296658637258e+01
-297 -1.03539143721183e+01
-298 1.46033752685607e+01
-299 1.38316996532073e+01
-300 -1.44448046223995e+01
-301 2.95711832994954e+01
-302 2.88589295388352e+01
-303 2.21987779599940e+00
-304 7.10575913908417e+01
-305 7.14025341700090e+01
-306 -1.79303370972123e+01
-307 4.87991814534373e+01
-308 4.81852441969593e+01
-309 -2.08612930084389e+01
-310 7.16760694966160e+01
-311 7.11664866966677e+01
-312 3.21952625737627e+00
-313 1.25692991510164e+02
-314 1.25955974456496e+02
-315 -2.32863833063907e+01
-316 9.76327785113135e+01
-317 9.72176847330125e+01
-318 -2.52596596735639e+01
-319 1.26145730553701e+02
-320 1.25787450105755e+02
-321 1.32512651327249e+01
-322 2.51735961071446e+02
-323 2.61966126491957e+02
-324 -2.68650985776099e+01
-325 1.56778259137174e+02
-326 1.56239449830090e+02
-327 -9.06715304273207e+01
-328 2.60139373132373e+02
-329 2.53611544661275e+02
-330 3.97600613918073e+01
-331 6.35284399697365e+02
-332 6.43658946378373e+02
-333 -1.34694314827088e+02
-334 4.26910258024176e+02
-335 4.22344522516447e+02
-336 -1.64637794602758e+02
-337 6.40430916089442e+02
-338 6.37375870631556e+02
-339 6.21693720105546e+01
-340 1.14985836668329e+03
-341 1.15506845711245e+03
-342 -1.83496531339693e+02
-343 8.85654658960497e+02
-344 8.84198507919020e+02
-345 -1.93711684123486e+02
-346 1.15073114109981e+03
-347 1.15057941058123e+03
-348 7.51904814438719e+01
-349 1.70634869287502e+03
-350 1.70858547826469e+03
-351 -1.97672507184894e+02
-352 1.42615159245171e+03
-353 1.42685115920266e+03
-354 -1.97769988570015e+02
-355 1.70472670557481e+03
-356 1.70585178139625e+03
-357 -1.96418964742326e+02
-358 1.98129002364937e+03
-359 1.98313860854568e+03
-360 -2.14014295838705e-02
-361 4.12000873743490e+00
-362 3.71362412438547e+00
-363 1.00000000000000e+00
-364 1.00000000000000e+00
-365 1.00000000000000e+00
-366 -5.57594803635109e+00
-367 3.79559479103902e+00
-368 4.58772868831544e+00
-369 9.84117263108244e-01
-370 2.91296658637256e+01
-371 2.87140327896185e+01
-372 -1.03539143721183e+01
-373 1.38316996532072e+01
-374 1.46033752685606e+01
-375 -1.44448046223996e+01
-376 2.88589295388350e+01
-377 2.95711832994952e+01
-378 2.21987779599879e+00
-379 7.14025341700084e+01
-380 7.10575913908413e+01
-381 -1.79303370972125e+01
-382 4.81852441969589e+01
-383 4.87991814534372e+01
-384 -2.08612930084392e+01
-385 7.11664866966672e+01
-386 7.16760694966161e+01
-387 3.21952625737487e+00
-388 1.25955974456495e+02
-389 1.25692991510164e+02
-390 -2.32863833063912e+01
-391 9.72176847330116e+01
-392 9.76327785113140e+01
-393 -2.52596596735646e+01
-394 1.25787450105753e+02
-395 1.26145730553702e+02
-396 1.32512651327070e+01
-397 2.61966126491947e+02
-398 2.51735961071457e+02
-399 -2.68650985776108e+01
-400 1.56239449830088e+02
-401 1.56778259137175e+02
-402 -9.06715304273290e+01
-403 2.53611544661267e+02
-404 2.60139373132382e+02
-405 3.97600613917663e+01
-406 6.43658946378329e+02
-407 6.35284399697410e+02
-408 -1.34694314827103e+02
-409 4.22344522516425e+02
-410 4.26910258024200e+02
-411 -1.64637794602778e+02
-412 6.37375870631514e+02
-413 6.40430916089486e+02
-414 6.21693720105019e+01
-415 1.15506845711236e+03
-416 1.14985836668339e+03
-417 -1.83496531339716e+02
-418 8.84198507918954e+02
-419 8.85654658960565e+02
-420 -1.93711684123512e+02
-421 1.15057941058114e+03
-422 1.15073114109990e+03
-423 7.51904814438152e+01
-424 1.70858547826454e+03
-425 1.70634869287518e+03
-426 -1.97672507184921e+02
-427 1.42685115920254e+03
-428 1.42615159245183e+03
-429 -1.97769988570044e+02
-430 1.70585178139610e+03
-431 1.70472670557496e+03
-432 -1.96418964742355e+02
-433 1.98313860854550e+03
-434 1.98129002364954e+03
-435 -1.05096603180235e+01
-436 5.14513932650210e+00
-437 5.14513932650216e+00
-438 -2.96400648847289e+01
-439 2.98779106295548e+01
-440 2.98779106295550e+01
-441 -4.37588188253006e+01
-442 7.18922941179634e+01
-443 7.18922941179639e+01
-444 -5.35585333118584e+01
-445 1.26273712170533e+02
-446 1.26273712170535e+02
-447 -1.82979013103339e+02
-448 2.67025429345443e+02
-449 2.67025429345451e+02
-450 -3.64079015600443e+02
-451 6.43114040234591e+02
-452 6.43114040234632e+02
-453 -4.46419638622482e+02
-454 1.15192399995531e+03
-455 1.15192399995540e+03
-456 -4.68524579675053e+02
-457 1.70526843054535e+03
-458 1.70526843054550e+03
diff --git a/src/test/TEST_ij/matrix.jobs b/src/test/TEST_ij/matrix.jobs
index 89bce5b64..9658073f2 100755
--- a/src/test/TEST_ij/matrix.jobs
+++ b/src/test/TEST_ij/matrix.jobs
@@ -47,9 +47,6 @@ mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ  -solver 4 -tol 1e-2 -
 # Sequential - Left and right scaling
 mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ  -solver 4 -tol 1e-2 -k 100 -test_scaling 3 > matrix.out.102
 
-# Sequential - Left and right functions-based scaling
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ  -solver 4 -tol 1e-2 -k 100 -test_scaling 4 -nf 3 -funcsinterleaved > matrix.out.103
-
 # Parallel - Left scaling
 mpirun -np 4 ./ij -fromfile data/beam_tet_dof2475_np4/A.IJ -solver 4 -tol 9e-1 -k 100 -test_scaling 1 > matrix.out.110
 
@@ -58,6 +55,3 @@ mpirun -np 4 ./ij -fromfile data/beam_tet_dof2475_np4/A.IJ -solver 4 -tol 9e-1 -
 
 # Parallel - Left and right scaling
 mpirun -np 4 ./ij -fromfile data/beam_tet_dof2475_np4/A.IJ -solver 4 -tol 9e-1 -k 100 -test_scaling 3 > matrix.out.112
-
-# Parallel - Left and right functions-based scaling
-mpirun -np 4 ./ij -fromfile data/beam_tet_dof2475_np4/A.IJ -solver 4 -tol 9e-1 -k 100 -test_scaling 4 -nf 3 -funcsinterleaved > matrix.out.113
diff --git a/src/test/TEST_ij/matrix.saved b/src/test/TEST_ij/matrix.saved
index 0500b398b..ff6bd0c79 100644
--- a/src/test/TEST_ij/matrix.saved
+++ b/src/test/TEST_ij/matrix.saved
@@ -62,10 +62,6 @@ Final GMRES Relative Residual Norm = 7.176706e-03
 GMRES Iterations = 74
 Final GMRES Relative Residual Norm = 7.155117e-03
 
-# Output file: matrix.out.103
-GMRES Iterations = 79
-Final GMRES Relative Residual Norm = 7.176706e-03
-
 # Output file: matrix.out.110
 GMRES Iterations = 13
 Final GMRES Relative Residual Norm = 8.997992e-01
@@ -76,8 +72,4 @@ Final GMRES Relative Residual Norm = 8.909955e-01
 
 # Output file: matrix.out.112
 GMRES Iterations = 6
-Final GMRES Relative Residual Norm = 8.963555e-01
-
-# Output file: matrix.out.113
-GMRES Iterations = 35
-Final GMRES Relative Residual Norm = 8.909955e-01
+Final GMRES Relative Residual Norm = 8.963555e-01
\ No newline at end of file
diff --git a/src/test/TEST_ij/matrix.saved.aurora b/src/test/TEST_ij/matrix.saved.aurora
index 7c6fb655b..1865584e2 100644
--- a/src/test/TEST_ij/matrix.saved.aurora
+++ b/src/test/TEST_ij/matrix.saved.aurora
@@ -62,10 +62,6 @@ Final GMRES Relative Residual Norm = 7.176706e-03
 GMRES Iterations = 74
 Final GMRES Relative Residual Norm = 7.155117e-03
 
-# Output file: matrix.out.103
-GMRES Iterations = 79
-Final GMRES Relative Residual Norm = 7.176706e-03
-
 # Output file: matrix.out.110
 GMRES Iterations = 13
 Final GMRES Relative Residual Norm = 8.997992e-01
@@ -78,6 +74,3 @@ Final GMRES Relative Residual Norm = 8.909955e-01
 GMRES Iterations = 6
 Final GMRES Relative Residual Norm = 8.963555e-01
 
-# Output file: matrix.out.113
-GMRES Iterations = 35
-Final GMRES Relative Residual Norm = 8.909955e-01
diff --git a/src/test/TEST_ij/matrix.saved.lassen b/src/test/TEST_ij/matrix.saved.lassen
index 340948b6e..fb90f62a0 100644
--- a/src/test/TEST_ij/matrix.saved.lassen
+++ b/src/test/TEST_ij/matrix.saved.lassen
@@ -62,10 +62,6 @@ Final GMRES Relative Residual Norm = 7.176706e-03
 GMRES Iterations = 74
 Final GMRES Relative Residual Norm = 7.155117e-03
 
-# Output file: matrix.out.103
-GMRES Iterations = 79
-Final GMRES Relative Residual Norm = 7.176706e-03
-
 # Output file: matrix.out.110
 GMRES Iterations = 13
 Final GMRES Relative Residual Norm = 8.997992e-01
@@ -77,7 +73,3 @@ Final GMRES Relative Residual Norm = 8.909955e-01
 # Output file: matrix.out.112
 GMRES Iterations = 6
 Final GMRES Relative Residual Norm = 8.963555e-01
-
-# Output file: matrix.out.113
-GMRES Iterations = 35
-Final GMRES Relative Residual Norm = 8.909955e-01
diff --git a/src/test/TEST_ij/matrix.saved.lassen_cpu b/src/test/TEST_ij/matrix.saved.lassen_cpu
index e6d28b77c..924ae7338 100644
--- a/src/test/TEST_ij/matrix.saved.lassen_cpu
+++ b/src/test/TEST_ij/matrix.saved.lassen_cpu
@@ -62,10 +62,6 @@ Final GMRES Relative Residual Norm = 7.176706e-03
 GMRES Iterations = 74
 Final GMRES Relative Residual Norm = 7.155117e-03
 
-# Output file: matrix.out.103
-GMRES Iterations = 79
-Final GMRES Relative Residual Norm = 7.176706e-03
-
 # Output file: matrix.out.110
 GMRES Iterations = 13
 Final GMRES Relative Residual Norm = 8.997992e-01
@@ -77,7 +73,3 @@ Final GMRES Relative Residual Norm = 8.909955e-01
 # Output file: matrix.out.112
 GMRES Iterations = 6
 Final GMRES Relative Residual Norm = 8.963555e-01
-
-# Output file: matrix.out.113
-GMRES Iterations = 35
-Final GMRES Relative Residual Norm = 8.909955e-01
diff --git a/src/test/TEST_ij/matrix.sh b/src/test/TEST_ij/matrix.sh
index dd3e1dc0a..7fb4c112e 100755
--- a/src/test/TEST_ij/matrix.sh
+++ b/src/test/TEST_ij/matrix.sh
@@ -45,11 +45,9 @@ FILES="\
  ${TNAME}.out.100\
  ${TNAME}.out.101\
  ${TNAME}.out.102\
- ${TNAME}.out.103\
  ${TNAME}.out.110\
  ${TNAME}.out.111\
  ${TNAME}.out.112\
- ${TNAME}.out.113
 "
 
 for i in $FILES
diff --git a/src/test/TEST_ij/solvers.jobs b/src/test/TEST_ij/solvers.jobs
index c3f06e80f..8a043b102 100755
--- a/src/test/TEST_ij/solvers.jobs
+++ b/src/test/TEST_ij/solvers.jobs
@@ -135,71 +135,3 @@ mpirun -np 2 ./ij -solver 71 -mgr_nlevels 1 -mgr_bsize 2 -mgr_non_c_to_f 0 -mgr_
 ## Test relaxation methods 88 (L1 hybrid Symm. Gauss-Seidel with a convergent l1 term) and 89 (L1 Symm. hybrid Gauss-Seidel)
 mpirun -np 4 ./ij -fromfile data/tucker21935/IJ.A -solver 1 -rlx 88 > solvers.out.404
 mpirun -np 4 ./ij -fromfile data/tucker21935/IJ.A -solver 1 -rlx 89 > solvers.out.405
-
-## Test residual and error norms computation for multi-tag vectors (Sequential)
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -xstarfromfile data/beam_tet_dof459_np1/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 1 > solvers.out.501
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 2 > solvers.out.502
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 3 > solvers.out.503
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 4 > solvers.out.504
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 5 > solvers.out.505
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -xstarfromfile data/beam_tet_dof459_np1/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 6 > solvers.out.506
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -xstarfromfile data/beam_tet_dof459_np1/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 7 > solvers.out.507
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -xstarfromfile data/beam_tet_dof459_np1/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 8 > solvers.out.508
-mpirun -np 1 ./ij -fromfile data/beam_tet_dof459_np1/A.IJ \
-                  -fromrhsfile data/beam_tet_dof459_np1/b.IJ \
-                  -xstarfromfile data/beam_tet_dof459_np1/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 9 > solvers.out.509
-
-## Test residual and error norms computation for multi-tag vectors (Parallel)
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -xstarfromfile data/beam_hex_dof459_np2/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 1 > solvers.out.511
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 2 > solvers.out.512
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 3 > solvers.out.513
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 4 > solvers.out.514
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 5 > solvers.out.515
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -xstarfromfile data/beam_hex_dof459_np2/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 6 > solvers.out.516
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -xstarfromfile data/beam_hex_dof459_np2/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 7 > solvers.out.517
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -xstarfromfile data/beam_hex_dof459_np2/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 8 > solvers.out.518
-mpirun -np 2 ./ij -fromfile data/beam_hex_dof459_np2/A.IJ \
-                  -fromrhsfile data/beam_hex_dof459_np2/b.IJ \
-                  -xstarfromfile data/beam_hex_dof459_np2/xstar.IJ \
-                  -tol 1e-3 -solver 3 -k 100 -funcsinterleaved -nf 3 -iout 9 > solvers.out.519
diff --git a/src/test/TEST_ij/solvers.saved b/src/test/TEST_ij/solvers.saved
index 1e202b387..f0bdd53af 100644
--- a/src/test/TEST_ij/solvers.saved
+++ b/src/test/TEST_ij/solvers.saved
@@ -325,742 +325,3 @@ Final Relative Residual Norm = 8.259159e-09
 Iterations = 24
 Final Relative Residual Norm = 6.793588e-09
 
-# Output file: solvers.out.501
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 1.471136e+04
-Initial L2 norm of e0: 2.314426e+03
-Initial L2 norm of e1: 1.027296e+04
-Initial L2 norm of e2: 1.027296e+04
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-Final L2 norm of error: 3.307042e-01
-Final L2 norm of e0: 4.718693e-02
-Final L2 norm of e1: 2.664438e-01
-Final L2 norm of e2: 1.901219e-01
-
-# Output file: solvers.out.502
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-Iters      resid.norm     conv.rate   rel.res.norm
------    ------------    ----------   ------------
-    1    2.117079e+01      0.988168   9.881677e-01
-    2    2.114539e+01      0.998800   9.869821e-01
-    3    2.097588e+01      0.991984   9.790703e-01
-    4    1.966030e+01      0.937281   9.176644e-01
-    5    1.362704e+01      0.693125   6.360558e-01
-    6    9.318218e+00      0.683804   4.349372e-01
-    7    6.892836e+00      0.739716   3.217300e-01
-    8    5.364011e+00      0.778201   2.503706e-01
-    9    4.492620e+00      0.837549   2.096976e-01
-   10    3.538349e+00      0.787591   1.651560e-01
-   11    2.964177e+00      0.837729   1.383559e-01
-   12    2.128979e+00      0.718236   9.937224e-02
-   13    1.032948e+00      0.485185   4.821389e-02
-   14    3.173177e-01      0.307196   1.481112e-02
-   15    2.468321e-01      0.777871   1.152114e-02
-   16    1.882400e-01      0.762624   8.786291e-03
-   17    8.293886e-02      0.440602   3.871254e-03
-   18    3.952778e-02      0.476589   1.844999e-03
-   19    9.122077e-03      0.230776   4.257821e-04
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-
-# Output file: solvers.out.503
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters             |r|_2           |r0|_2           |r1|_2           |r2|_2
- ------     -------------    -------------    -------------    -------------
-      1      2.117079e+01     1.221833e+01     1.225676e+01     1.219370e+01
-      2      2.114539e+01     1.221329e+01     1.224597e+01     1.216549e+01
-      3      2.097588e+01     1.212281e+01     1.214577e+01     1.206256e+01
-      4      1.966030e+01     1.146285e+01     1.146404e+01     1.112234e+01
-      5      1.362704e+01     7.527342e+00     8.627325e+00     7.389492e+00
-      6      9.318218e+00     4.475121e+00     5.817871e+00     5.740632e+00
-      7      6.892836e+00     2.927985e+00     4.503664e+00     4.319155e+00
-      8      5.364011e+00     2.011671e+00     3.296740e+00     3.722539e+00
-      9      4.492620e+00     1.548196e+00     2.992463e+00     2.971850e+00
-     10      3.538349e+00     1.184356e+00     2.306695e+00     2.407565e+00
-     11      2.964177e+00     1.083963e+00     1.775805e+00     2.111370e+00
-     12      2.128979e+00     8.408447e-01     1.348640e+00     1.416581e+00
-     13      1.032948e+00     4.928403e-01     5.216129e-01     7.429738e-01
-     14      3.173177e-01     1.745116e-01     1.944560e-01     1.800641e-01
-     15      2.468321e-01     1.468046e-01     1.480945e-01     1.320702e-01
-     16      1.882400e-01     1.093984e-01     1.161881e-01     9.983287e-02
-     17      8.293886e-02     4.072648e-02     4.896141e-02     5.313180e-02
-     18      3.952778e-02     2.078434e-02     2.410243e-02     2.344204e-02
-     19      9.122077e-03     4.194667e-03     5.693769e-03     5.761774e-03
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-
-# Output file: solvers.out.504
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters       |r|_2/|b|_2    |r0|_2/|b0|_2    |r1|_2/|b1|_2    |r2|_2/|b2|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.881677e-01     9.877935e-01     9.909005e-01     9.858026e-01
-      2      9.869821e-01     9.873857e-01     9.900283e-01     9.835214e-01
-      3      9.790703e-01     9.800713e-01     9.819269e-01     9.752002e-01
-      4      9.176644e-01     9.267169e-01     9.268124e-01     8.991876e-01
-      5      6.360558e-01     6.085496e-01     6.974779e-01     5.974050e-01
-      6      4.349372e-01     3.617921e-01     4.703470e-01     4.641026e-01
-      7      3.217300e-01     2.367135e-01     3.640996e-01     3.491830e-01
-      8      2.503706e-01     1.626340e-01     2.665257e-01     3.009495e-01
-      9      2.096976e-01     1.251642e-01     2.419263e-01     2.402599e-01
-     10      1.651560e-01     9.574953e-02     1.864852e-01     1.946401e-01
-     11      1.383559e-01     8.763322e-02     1.435654e-01     1.706942e-01
-     12      9.937224e-02     6.797827e-02     1.090311e-01     1.145238e-01
-     13      4.821389e-02     3.984378e-02     4.216991e-02     6.006587e-02
-     14      1.481112e-02     1.410843e-02     1.572083e-02     1.455732e-02
-     15      1.152114e-02     1.186845e-02     1.197273e-02     1.067724e-02
-     16      8.786291e-03     8.844338e-03     9.393253e-03     8.071009e-03
-     17      3.871254e-03     3.292541e-03     3.958296e-03     4.295451e-03
-     18      1.844999e-03     1.680314e-03     1.948566e-03     1.895177e-03
-     19      4.257821e-04     3.391187e-04     4.603139e-04     4.658118e-04
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-
-# Output file: solvers.out.505
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters       |r|_2/|b|_2     |r0|_2/|b|_2     |r1|_2/|b|_2     |r2|_2/|b|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.881677e-01     5.703028e-01     5.720967e-01     5.691534e-01
-      2      9.869821e-01     5.700674e-01     5.715931e-01     5.678363e-01
-      3      9.790703e-01     5.658445e-01     5.669158e-01     5.630321e-01
-      4      9.176644e-01     5.350402e-01     5.350954e-01     5.191462e-01
-      5      6.360558e-01     3.513463e-01     4.026891e-01     3.449120e-01
-      6      4.349372e-01     2.088808e-01     2.715550e-01     2.679498e-01
-      7      3.217300e-01     1.366666e-01     2.102130e-01     2.016009e-01
-      8      2.503706e-01     9.389678e-02     1.538787e-01     1.737532e-01
-      9      2.096976e-01     7.226359e-02     1.396762e-01     1.387141e-01
-     10      1.651560e-01     5.528102e-02     1.076673e-01     1.123755e-01
-     11      1.383559e-01     5.059506e-02     8.288750e-02     9.855033e-02
-     12      9.937224e-02     3.924727e-02     6.294914e-02     6.612034e-02
-     13      4.821389e-02     2.300382e-02     2.434681e-02     3.467905e-02
-     14      1.481112e-02     8.145504e-03     9.076427e-03     8.404674e-03
-     15      1.152114e-02     6.852252e-03     6.912459e-03     6.164507e-03
-     16      8.786291e-03     5.106281e-03     5.423197e-03     4.659799e-03
-     17      3.871254e-03     1.900949e-03     2.285323e-03     2.479980e-03
-     18      1.844999e-03     9.701298e-04     1.125005e-03     1.094181e-03
-     19      4.257821e-04     1.957903e-04     2.657624e-04     2.689366e-04
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-
-# Output file: solvers.out.506
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 1.471136e+04
-Initial L2 norm of e0: 2.314426e+03
-Initial L2 norm of e1: 1.027296e+04
-Initial L2 norm of e2: 1.027296e+04
-=============================================
-
-Iters      error.norm     conv.rate   rel.err.norm
------    ------------    ----------   ------------
-    1    1.466438e+04      684.474414   9.968064e-01
-    2    1.463625e+04      0.998082   9.948945e-01
-    3    1.442954e+04      0.985877   9.808433e-01
-    4    1.221520e+04      0.846541   8.303243e-01
-    5    5.094395e+03      0.417054   3.462899e-01
-    6    2.080738e+03      0.408437   1.414375e-01
-    7    1.391606e+03      0.668804   9.459400e-02
-    8    9.986826e+02      0.717647   6.788515e-02
-    9    7.989485e+02      0.800002   5.430828e-02
-   10    6.065046e+02      0.759128   4.122696e-02
-   11    5.650393e+02      0.931632   3.840837e-02
-   12    3.116541e+02      0.551562   2.118459e-02
-   13    2.012461e+01      0.064574   1.367964e-03
-   14    5.868421e+01      2.916043   3.989042e-03
-   15    5.336111e+01      0.909292   3.627205e-03
-   16    4.119659e+01      0.772034   2.800326e-03
-   17    7.368214e+00      0.178855   5.008521e-04
-   18    2.885672e+00      0.391638   1.961526e-04
-   19    3.307042e-01      0.114602   2.247952e-05
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-Final L2 norm of error: 3.307042e-01
-Final L2 norm of e0: 4.718693e-02
-Final L2 norm of e1: 2.664438e-01
-Final L2 norm of e2: 1.901219e-01
-
-# Output file: solvers.out.507
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 1.471136e+04
-Initial L2 norm of e0: 2.314426e+03
-Initial L2 norm of e1: 1.027296e+04
-Initial L2 norm of e2: 1.027296e+04
-=============================================
-
-  Iters             |e|_2           |e0|_2           |e1|_2           |e2|_2
- ------     -------------    -------------    -------------    -------------
-      1      1.466438e+04     2.308647e+03     1.024096e+04     1.023898e+04
-      2      1.463625e+04     2.304914e+03     1.022218e+04     1.021832e+04
-      3      1.442954e+04     2.275311e+03     1.008754e+04     1.006360e+04
-      4      1.221520e+04     1.931907e+03     8.671306e+03     8.383748e+03
-      5      5.094395e+03     8.085714e+02     4.088546e+03     2.929652e+03
-      6      2.080738e+03     3.422215e+02     1.981676e+03     5.341493e+02
-      7      1.391606e+03     2.420118e+02     1.353518e+03     2.144464e+02
-      8      9.986826e+02     1.771530e+02     9.511145e+02     2.477196e+02
-      9      7.989485e+02     1.364089e+02     7.829958e+02     8.141819e+01
-     10      6.065046e+02     1.019223e+02     5.654708e+02     1.941710e+02
-     11      5.650393e+02     9.612819e+01     4.770110e+02     2.872095e+02
-     12      3.116541e+02     5.510059e+01     2.413861e+02     1.892749e+02
-     13      2.012461e+01     2.395113e+00     1.036004e+01     1.708604e+01
-     14      5.868421e+01     1.118560e+01     3.604868e+01     4.493564e+01
-     15      5.336111e+01     1.039796e+01     3.089835e+01     4.224432e+01
-     16      4.119659e+01     7.979591e+00     2.296989e+01     3.325462e+01
-     17      7.368214e+00     1.605038e+00     4.094696e+00     5.911674e+00
-     18      2.885672e+00     5.753945e-01     9.771622e-01     2.653521e+00
-     19      3.307042e-01     4.718693e-02     2.664438e-01     1.901219e-01
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-Final L2 norm of error: 3.307042e-01
-Final L2 norm of e0: 4.718693e-02
-Final L2 norm of e1: 2.664438e-01
-Final L2 norm of e2: 1.901219e-01
-
-# Output file: solvers.out.508
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 1.471136e+04
-Initial L2 norm of e0: 2.314426e+03
-Initial L2 norm of e1: 1.027296e+04
-Initial L2 norm of e2: 1.027296e+04
-=============================================
-
-  Iters      |e|_2/|eI|_2   |e0|_2/|eI0|_2   |e1|_2/|eI1|_2   |e2|_2/|eI2|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.968064e-01     9.975028e-01     9.968848e-01     9.966927e-01
-      2      9.948945e-01     9.958900e-01     9.950570e-01     9.946813e-01
-      3      9.808433e-01     9.830993e-01     9.819502e-01     9.796203e-01
-      4      8.303243e-01     8.347239e-01     8.440902e-01     8.160985e-01
-      5      3.462899e-01     3.493615e-01     3.979910e-01     2.851809e-01
-      6      1.414375e-01     1.478645e-01     1.929021e-01     5.199565e-02
-      7      9.459400e-02     1.045667e-01     1.317554e-01     2.087484e-02
-      8      6.788515e-02     7.654293e-02     9.258426e-02     2.411375e-02
-      9      5.430828e-02     5.893852e-02     7.621910e-02     7.925484e-03
-     10      4.122696e-02     4.403783e-02     5.504458e-02     1.890117e-02
-     11      3.840837e-02     4.153435e-02     4.643364e-02     2.795781e-02
-     12      2.118459e-02     2.380745e-02     2.349722e-02     1.842457e-02
-     13      1.367964e-03     1.034862e-03     1.008476e-03     1.663205e-03
-     14      3.989042e-03     4.832990e-03     3.509084e-03     4.374167e-03
-     15      3.627205e-03     4.492672e-03     3.007736e-03     4.112186e-03
-     16      2.800326e-03     3.447762e-03     2.235956e-03     3.237101e-03
-     17      5.008521e-04     6.934927e-04     3.985897e-04     5.754596e-04
-     18      1.961526e-04     2.486122e-04     9.511982e-05     2.583015e-04
-     19      2.247952e-05     2.038818e-05     2.593642e-05     1.850702e-05
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-Final L2 norm of error: 3.307042e-01
-Final L2 norm of e0: 4.718693e-02
-Final L2 norm of e1: 2.664438e-01
-Final L2 norm of e2: 1.901219e-01
-
-# Output file: solvers.out.509
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 1.471136e+04
-Initial L2 norm of e0: 2.314426e+03
-Initial L2 norm of e1: 1.027296e+04
-Initial L2 norm of e2: 1.027296e+04
-=============================================
-
-  Iters      |e|_2/|eI|_2    |e0|_2/|eI|_2    |e1|_2/|eI|_2    |e2|_2/|eI|_2
- ------     -------------    -------------    -------------    -------------
-      1      4.328663e-03     1.078904e-03     2.886531e-03     3.039938e-03
-      2      3.672513e-04     5.630131e-05     2.414056e-04     2.709742e-04
-      3      1.297001e-04     5.241045e-05     9.224148e-05     7.461076e-05
-      4      1.303887e-04     4.622877e-05     1.027560e-04     6.561500e-05
-      5      5.210469e-04     7.338882e-05     3.616726e-04     3.678273e-04
-      6      5.732860e-04     1.057950e-04     2.828041e-04     4.873255e-04
-      7      5.196938e-04     1.270722e-04     6.456798e-05     4.997653e-04
-      8      4.402921e-04     1.023143e-04     3.450370e-04     2.536500e-04
-      9      2.725239e-04     4.075235e-05     1.882579e-04     1.927887e-04
-     10      2.942635e-04     5.418986e-05     1.518154e-04     2.461840e-04
-     11      4.367931e-04     9.328902e-05     8.961395e-05     4.171986e-04
-     12      5.108713e-04     9.918750e-05     2.265580e-04     4.470154e-04
-     13      1.406185e-04     4.744524e-05     9.046777e-05     9.663378e-05
-     14      4.264360e-04     6.103706e-05     2.701545e-04     3.242510e-04
-     15      7.551790e-04     1.389537e-04     4.120156e-04     6.174385e-04
-     16      3.948658e-04     1.012556e-04     1.435846e-04     3.536237e-04
-     17      3.127852e-04     6.876619e-05     1.100221e-04     2.846066e-04
-     18      2.784333e-04     4.893265e-05     2.202646e-04     1.631386e-04
-     19      1.684591e-04     4.448769e-05     3.491507e-05     1.586829e-04
-
-
-Final L2 norm of residual: 9.122077e-03
-Final L2 norm of r0: 4.194667e-03
-Final L2 norm of r1: 5.693769e-03
-Final L2 norm of r2: 5.761774e-03
-Final L2 norm of error: 3.307042e-01
-Final L2 norm of e0: 4.718693e-02
-Final L2 norm of e1: 2.664438e-01
-Final L2 norm of e2: 1.901219e-01
-
-# Output file: solvers.out.511
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 2.757284e+04
-Initial L2 norm of e0: 4.509783e+03
-Initial L2 norm of e1: 1.923439e+04
-Initial L2 norm of e2: 1.923439e+04
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-Final L2 norm of error: 9.197532e+00
-Final L2 norm of e0: 1.798116e+00
-Final L2 norm of e1: 5.728875e+00
-Final L2 norm of e2: 6.967164e+00
-
-# Output file: solvers.out.512
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-Iters      resid.norm     conv.rate   rel.res.norm
------    ------------    ----------   ------------
-    1    2.118016e+01      0.988605   9.886051e-01
-    2    2.113017e+01      0.997640   9.862719e-01
-    3    2.110448e+01      0.998784   9.850726e-01
-    4    2.110405e+01      0.999980   9.850525e-01
-    5    2.013188e+01      0.953935   9.396757e-01
-    6    1.498108e+01      0.744147   6.992567e-01
-    7    1.071151e+01      0.715003   4.999706e-01
-    8    5.919687e+00      0.552647   2.763073e-01
-    9    3.827418e+00      0.646557   1.786486e-01
-   10    3.232114e+00      0.844463   1.508621e-01
-   11    2.140954e+00      0.662400   9.993116e-02
-   12    1.802167e+00      0.841759   8.411796e-02
-   13    1.384705e+00      0.768356   6.463251e-02
-   14    1.018182e+00      0.735306   4.752468e-02
-   15    7.979794e-01      0.783729   3.724649e-02
-   16    4.275239e-01      0.535758   1.995511e-02
-   17    9.258116e-02      0.216552   4.321318e-03
-   18    4.085821e-02      0.441323   1.907098e-03
-   19    2.718413e-02      0.665328   1.268846e-03
-   20    2.011802e-02      0.740065   9.390287e-04
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-
-# Output file: solvers.out.513
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters             |r|_2           |r0|_2           |r1|_2           |r2|_2
- ------     -------------    -------------    -------------    -------------
-      1      2.118016e+01     1.207835e+01     1.228847e+01     1.231690e+01
-      2      2.113017e+01     1.204182e+01     1.227401e+01     1.228118e+01
-      3      2.110448e+01     1.204467e+01     1.224068e+01     1.226746e+01
-      4      2.110405e+01     1.204357e+01     1.223857e+01     1.226991e+01
-      5      2.013188e+01     1.132715e+01     1.170254e+01     1.183381e+01
-      6      1.498108e+01     7.845604e+00     8.861919e+00     9.183981e+00
-      7      1.071151e+01     5.096527e+00     7.444775e+00     5.773842e+00
-      8      5.919687e+00     3.181603e+00     4.213616e+00     2.676853e+00
-      9      3.827418e+00     2.133580e+00     2.798462e+00     1.505183e+00
-     10      3.232114e+00     1.732515e+00     2.335198e+00     1.411311e+00
-     11      2.140954e+00     1.076718e+00     1.374232e+00     1.239292e+00
-     12      1.802167e+00     7.730860e-01     1.092821e+00     1.206601e+00
-     13      1.384705e+00     6.547393e-01     8.317395e-01     8.927118e-01
-     14      1.018182e+00     4.653631e-01     6.436370e-01     6.370744e-01
-     15      7.979794e-01     4.215207e-01     4.737917e-01     4.843685e-01
-     16      4.275239e-01     2.002424e-01     2.603469e-01     2.736771e-01
-     17      9.258116e-02     4.008028e-02     6.414422e-02     5.338877e-02
-     18      4.085821e-02     1.309843e-02     2.725053e-02     2.748150e-02
-     19      2.718413e-02     1.048658e-02     1.778524e-02     1.768314e-02
-     20      2.011802e-02     7.250241e-03     1.335076e-02     1.318810e-02
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-
-# Output file: solvers.out.514
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters       |r|_2/|b|_2    |r0|_2/|b0|_2    |r1|_2/|b1|_2    |r2|_2/|b2|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.886051e-01     9.764765e-01     9.934641e-01     9.957626e-01
-      2      9.862719e-01     9.735235e-01     9.922948e-01     9.928746e-01
-      3      9.850726e-01     9.737537e-01     9.896005e-01     9.917653e-01
-      4      9.850525e-01     9.736646e-01     9.894298e-01     9.919633e-01
-      5      9.396757e-01     9.157458e-01     9.460939e-01     9.567065e-01
-      6      6.992567e-01     6.342795e-01     7.164437e-01     7.424809e-01
-      7      4.999706e-01     4.120298e-01     6.018744e-01     4.667874e-01
-      8      2.763073e-01     2.572173e-01     3.406506e-01     2.164107e-01
-      9      1.786486e-01     1.724897e-01     2.262422e-01     1.216869e-01
-     10      1.508621e-01     1.400656e-01     1.887896e-01     1.140978e-01
-     11      9.993116e-02     8.704752e-02     1.111001e-01     1.001908e-01
-     12      8.411796e-02     6.250030e-02     8.834932e-02     9.754795e-02
-     13      6.463251e-02     5.293254e-02     6.724216e-02     7.217148e-02
-     14      4.752468e-02     3.762238e-02     5.203497e-02     5.150441e-02
-     15      3.724649e-02     3.407793e-02     3.830379e-02     3.915887e-02
-     16      1.995511e-02     1.618864e-02     2.104780e-02     2.212548e-02
-     17      4.321318e-03     3.240298e-03     5.185753e-03     4.316226e-03
-     18      1.907098e-03     1.058945e-03     2.203075e-03     2.221747e-03
-     19      1.268846e-03     8.477901e-04     1.437852e-03     1.429597e-03
-     20      9.390287e-04     5.861472e-04     1.079345e-03     1.066194e-03
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-
-# Output file: solvers.out.515
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-=============================================
-
-  Iters       |r|_2/|b|_2     |r0|_2/|b|_2     |r1|_2/|b|_2     |r2|_2/|b|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.886051e-01     5.637690e-01     5.735767e-01     5.749038e-01
-      2      9.862719e-01     5.620641e-01     5.729017e-01     5.732364e-01
-      3      9.850726e-01     5.621969e-01     5.713461e-01     5.725960e-01
-      4      9.850525e-01     5.621455e-01     5.712475e-01     5.727103e-01
-      5      9.396757e-01     5.287061e-01     5.462276e-01     5.523548e-01
-      6      6.992567e-01     3.662014e-01     4.136390e-01     4.286715e-01
-      7      4.999706e-01     2.378855e-01     3.474923e-01     2.694998e-01
-      8      2.763073e-01     1.485045e-01     1.966747e-01     1.249448e-01
-      9      1.786486e-01     9.958698e-02     1.306210e-01     7.025595e-02
-     10      1.508621e-01     8.086689e-02     1.089977e-01     6.587437e-02
-     11      9.993116e-02     5.025691e-02     6.414367e-02     5.784521e-02
-     12      8.411796e-02     3.608457e-02     5.100850e-02     5.631933e-02
-     13      6.463251e-02     3.056061e-02     3.882228e-02     4.166822e-02
-     14      4.752468e-02     2.172129e-02     3.004240e-02     2.973609e-02
-     15      3.724649e-02     1.967490e-02     2.211470e-02     2.260839e-02
-     16      1.995511e-02     9.346516e-03     1.215195e-02     1.277415e-02
-     17      4.321318e-03     1.870787e-03     2.993996e-03     2.491974e-03
-     18      1.907098e-03     6.113824e-04     1.271946e-03     1.282726e-03
-     19      1.268846e-03     4.894719e-04     8.301440e-04     8.253783e-04
-     20      9.390287e-04     3.384123e-04     6.231601e-04     6.155676e-04
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-
-# Output file: solvers.out.516
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 2.757284e+04
-Initial L2 norm of e0: 4.509783e+03
-Initial L2 norm of e1: 1.923439e+04
-Initial L2 norm of e2: 1.923439e+04
-=============================================
-
-Iters      error.norm     conv.rate   rel.err.norm
------    ------------    ----------   ------------
-    1    2.752458e+04      1284.737289   9.982496e-01
-    2    2.748062e+04      0.998403   9.966553e-01
-    3    2.739819e+04      0.997000   9.936657e-01
-    4    2.741813e+04      1.000728   9.943889e-01
-    5    2.428282e+04      0.885648   8.806789e-01
-    6    1.107026e+04      0.455889   4.014916e-01
-    7    4.479193e+03      0.404615   1.624495e-01
-    8    9.774533e+02      0.218221   3.544986e-02
-    9    1.509749e+03      1.544574   5.475491e-02
-   10    1.463156e+03      0.969139   5.306510e-02
-   11    7.924513e+02      0.541604   2.874029e-02
-   12    5.447287e+02      0.687397   1.975599e-02
-   13    3.511095e+02      0.644559   1.273389e-02
-   14    2.591736e+02      0.738156   9.399598e-03
-   15    1.897744e+02      0.732229   6.882656e-03
-   16    5.857824e+01      0.308673   2.124491e-03
-   17    1.361109e+01      0.232357   4.936411e-04
-   18    9.631164e+00      0.707597   3.492989e-04
-   19    9.488938e+00      0.985233   3.441407e-04
-   20    9.197532e+00      0.969290   3.335722e-04
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-Final L2 norm of error: 9.197532e+00
-Final L2 norm of e0: 1.798116e+00
-Final L2 norm of e1: 5.728875e+00
-Final L2 norm of e2: 6.967164e+00
-
-# Output file: solvers.out.517
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 2.757284e+04
-Initial L2 norm of e0: 4.509783e+03
-Initial L2 norm of e1: 1.923439e+04
-Initial L2 norm of e2: 1.923439e+04
-=============================================
-
-  Iters             |e|_2           |e0|_2           |e1|_2           |e2|_2
- ------     -------------    -------------    -------------    -------------
-      1      2.752458e+04     4.504732e+03     1.920103e+04     1.919974e+04
-      2      2.748062e+04     4.499060e+03     1.916970e+04     1.916939e+04
-      3      2.739819e+04     4.487676e+03     1.911023e+04     1.911336e+04
-      4      2.741813e+04     4.490791e+03     1.912467e+04     1.912677e+04
-      5      2.428282e+04     3.983925e+03     1.685748e+04     1.701790e+04
-      6      1.107026e+04     1.806113e+03     7.297917e+03     8.125830e+03
-      7      4.479193e+03     7.067352e+02     2.508272e+03     3.643112e+03
-      8      9.774533e+02     2.160300e+02     7.536338e+02     5.837653e+02
-      9      1.509749e+03     3.267011e+02     1.458284e+03     2.145135e+02
-     10      1.463156e+03     3.077326e+02     1.402333e+03     2.821143e+02
-     11      7.924513e+02     1.636179e+02     7.714749e+02     7.768350e+01
-     12      5.447287e+02     1.110845e+02     5.313398e+02     4.547084e+01
-     13      3.511095e+02     6.879317e+01     3.354831e+02     7.743691e+01
-     14      2.591736e+02     4.849847e+01     2.468580e+02     6.228953e+01
-     15      1.897744e+02     3.506140e+01     1.752347e+02     6.385765e+01
-     16      5.857824e+01     1.085570e+01     5.611640e+01     1.282631e+01
-     17      1.361109e+01     2.865527e+00     9.461385e+00     9.355887e+00
-     18      9.631164e+00     2.098824e+00     5.892471e+00     7.323458e+00
-     19      9.488938e+00     1.937298e+00     5.546896e+00     7.451092e+00
-     20      9.197532e+00     1.798116e+00     5.728875e+00     6.967164e+00
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-Final L2 norm of error: 9.197532e+00
-Final L2 norm of e0: 1.798116e+00
-Final L2 norm of e1: 5.728875e+00
-Final L2 norm of e2: 6.967164e+00
-
-# Output file: solvers.out.518
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 2.757284e+04
-Initial L2 norm of e0: 4.509783e+03
-Initial L2 norm of e1: 1.923439e+04
-Initial L2 norm of e2: 1.923439e+04
-=============================================
-
-  Iters      |e|_2/|eI|_2   |e0|_2/|eI0|_2   |e1|_2/|eI1|_2   |e2|_2/|eI2|_2
- ------     -------------    -------------    -------------    -------------
-      1      9.982496e-01     9.988800e-01     9.982658e-01     9.981987e-01
-      2      9.966553e-01     9.976224e-01     9.966368e-01     9.966207e-01
-      3      9.936657e-01     9.950980e-01     9.935449e-01     9.937077e-01
-      4      9.943889e-01     9.957887e-01     9.942957e-01     9.944050e-01
-      5      8.806789e-01     8.833961e-01     8.764242e-01     8.847642e-01
-      6      4.014916e-01     4.004877e-01     3.794203e-01     4.224637e-01
-      7      1.624495e-01     1.567116e-01     1.304056e-01     1.894062e-01
-      8      3.544986e-02     4.790252e-02     3.918158e-02     3.035008e-02
-      9      5.475491e-02     7.244277e-02     7.581647e-02     1.115260e-02
-     10      5.306510e-02     6.823667e-02     7.290757e-02     1.466718e-02
-     11      2.874029e-02     3.628067e-02     4.010915e-02     4.038782e-03
-     12      1.975599e-02     2.463189e-02     2.762447e-02     2.364039e-03
-     13      1.273389e-02     1.525421e-02     1.744184e-02     4.025961e-03
-     14      9.399598e-03     1.075406e-02     1.283420e-02     3.238446e-03
-     15      6.882656e-03     7.774522e-03     9.110492e-03     3.319973e-03
-     16      2.124491e-03     2.407144e-03     2.917504e-03     6.668427e-04
-     17      4.936411e-04     6.354025e-04     4.918994e-04     4.864146e-04
-     18      3.492989e-04     4.653936e-04     3.063508e-04     3.807482e-04
-     19      3.441407e-04     4.295767e-04     2.883843e-04     3.873839e-04
-     20      3.335722e-04     3.987146e-04     2.978454e-04     3.622243e-04
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-Final L2 norm of error: 9.197532e+00
-Final L2 norm of e0: 1.798116e+00
-Final L2 norm of e1: 5.728875e+00
-Final L2 norm of e2: 6.967164e+00
-
-# Output file: solvers.out.519
-L2 norm of b: 2.142429e+01
-L2 norm of b0: 1.236932e+01
-L2 norm of b1: 1.236932e+01
-L2 norm of b2: 1.236932e+01
-Initial L2 norm of residual: 2.142429e+01
-Initial L2 norm of r0: 1.236932e+01
-Initial L2 norm of r1: 1.236932e+01
-Initial L2 norm of r2: 1.236932e+01
-Initial L2 norm of error: 2.757284e+04
-Initial L2 norm of e0: 4.509783e+03
-Initial L2 norm of e1: 1.923439e+04
-Initial L2 norm of e2: 1.923439e+04
-=============================================
-
-  Iters      |e|_2/|eI|_2    |e0|_2/|eI|_2    |e1|_2/|eI|_2    |e2|_2/|eI|_2
- ------     -------------    -------------    -------------    -------------
-      1      2.112976e-03     5.271559e-04     1.416736e-03     1.476358e-03
-      2      1.954837e-04     3.560260e-05     1.420309e-04     1.295127e-04
-      3      4.925172e-05     2.435953e-05     3.234018e-05     2.804386e-05
-      4      1.170844e-04     4.128431e-05     7.835252e-05     7.658490e-05
-      5      2.655068e-04     5.093461e-05     1.864191e-04     1.820645e-04
-      6      2.512624e-04     4.329967e-05     1.790191e-04     1.709095e-04
-      7      4.363340e-04     6.709457e-05     3.226708e-04     2.859533e-04
-      8      2.455112e-04     4.297379e-05     2.117013e-04     1.166686e-04
-      9      3.409068e-04     7.906241e-05     3.183554e-04     9.282447e-05
-     10      4.200346e-04     1.004658e-04     3.953593e-04     1.001336e-04
-     11      2.813048e-04     8.384996e-05     2.453229e-04     1.091709e-04
-     12      1.115537e-04     2.851720e-05     8.820746e-05     6.205199e-05
-     13      1.371040e-04     4.939233e-05     5.527400e-05     1.153373e-04
-     14      8.529134e-05     4.643457e-05     2.821716e-05     6.574371e-05
-     15      1.187796e-04     1.889452e-05     1.131880e-04     3.066049e-05
-     16      6.833072e-05     3.178128e-05     4.548867e-05     3.987253e-05
-     17      5.313359e-05     3.244291e-05     3.066429e-05     2.881558e-05
-     18      9.743422e-05     4.713025e-05     5.961876e-05     6.097352e-05
-     19      1.516876e-04     6.287155e-05     9.048952e-05     1.042494e-04
-     20      2.846084e-04     5.033586e-05     1.675666e-04     2.244764e-04
-
-
-Final L2 norm of residual: 2.011802e-02
-Final L2 norm of r0: 7.250241e-03
-Final L2 norm of r1: 1.335076e-02
-Final L2 norm of r2: 1.318810e-02
-Final L2 norm of error: 9.197532e+00
-Final L2 norm of e0: 1.798116e+00
-Final L2 norm of e1: 5.728875e+00
-Final L2 norm of e2: 6.967164e+00
diff --git a/src/test/TEST_ij/solvers.sh b/src/test/TEST_ij/solvers.sh
index ecdf3b399..661a06098 100755
--- a/src/test/TEST_ij/solvers.sh
+++ b/src/test/TEST_ij/solvers.sh
@@ -188,58 +188,6 @@ if [ "$OUTCOUNT" != "$RUNCOUNT" ]; then
    echo "Incorrect number of runs in ${TNAME}.out" >&2
 fi
 
-FILES="\
- ${TNAME}.out.501\
- ${TNAME}.out.502\
- ${TNAME}.out.503\
- ${TNAME}.out.504\
- ${TNAME}.out.505\
- ${TNAME}.out.506\
- ${TNAME}.out.507\
- ${TNAME}.out.508\
- ${TNAME}.out.509\
- ${TNAME}.out.511\
- ${TNAME}.out.512\
- ${TNAME}.out.513\
- ${TNAME}.out.514\
- ${TNAME}.out.515\
- ${TNAME}.out.516\
- ${TNAME}.out.517\
- ${TNAME}.out.518\
- ${TNAME}.out.519\
-"
-
-# Process each output file to extract the solver convergence history
-# We capture all lines between the first and last occurrence of "L2 norm of"
-# This includes initial norms, iteration history, and final convergence results
-for i in $FILES
-do
-  echo "# Output file: $i"
-  awk '
-    BEGIN { found=0; last=0 }
-    /L2 norm of/ {
-      if (!found) { found=1; start=NR }
-      last=NR
-    }
-    END {
-      if (found) {
-        for (i=start; i<=last; i++) {
-          print lines[i]
-        }
-      }
-    }
-    { lines[NR]=$0 }
-  ' $i
-  echo ""  # Add a newline after each file
-done > ${TNAME}.out.f
-
-# Make sure that the output file is reasonable
-RUNCOUNT=`echo $FILES | wc -w`
-OUTCOUNT=`grep "L2 norm of b:" ${TNAME}.out.f | wc -l`
-if [ "$OUTCOUNT" != "$RUNCOUNT" ]; then
-   echo "Incorrect number of runs in ${TNAME}.out" >&2
-fi
-
 # put all of the output files together
 cat ${TNAME}.out.[a-z] > ${TNAME}.out
 
diff --git a/src/test/TEST_sstruct/.psrc b/src/test/TEST_sstruct/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_sstruct/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/TEST_struct/.psrc b/src/test/TEST_struct/.psrc
new file mode 100644
index 000000000..ccb09fc3a
--- /dev/null
+++ b/src/test/TEST_struct/.psrc
@@ -0,0 +1,4 @@
+insure++.report_file insure.log
+insure++.report_overwrite false
+insure++.summarize leaks outstanding
+insure++.suppress EXPR_NULL,PARM_NULL
diff --git a/src/test/ij.c b/src/test/ij.c
index 3f45c96e5..9e97c8b2c 100644
--- a/src/test/ij.c
+++ b/src/test/ij.c
@@ -45,7 +45,7 @@
 /* max dt */
 #define DT_INF 1.0e30
 HYPRE_Int
-BuildParIsoLaplacian( MPI_Comm comm, HYPRE_Int argc, char** argv, HYPRE_ParCSRMatrix *A_ptr );
+BuildParIsoLaplacian( HYPRE_Int argc, char** argv, HYPRE_ParCSRMatrix *A_ptr );
 
 /* end lobpcg */
 
@@ -53,43 +53,38 @@ BuildParIsoLaplacian( MPI_Comm comm, HYPRE_Int argc, char** argv, HYPRE_ParCSRMa
 extern "C" {
 #endif
 
-HYPRE_Int BuildParFromFile (MPI_Comm comm, HYPRE_Int argc, char *argv [],
-                            HYPRE_Int arg_index, HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int ReadParVectorFromFile (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParFromFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+                            HYPRE_ParCSRMatrix *A_ptr );
+HYPRE_Int ReadParVectorFromFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                  HYPRE_ParVector *b_ptr );
-HYPRE_Int BuildParLaplacian (MPI_Comm comm, HYPRE_Int argc, char *argv [],
-                             HYPRE_Int arg_index, HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildParDifConv (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+
+HYPRE_Int BuildParLaplacian (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+                             HYPRE_ParCSRMatrix *A_ptr );
+HYPRE_Int BuildParSysLaplacian (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+                                HYPRE_ParCSRMatrix *A_ptr );
+HYPRE_Int BuildParDifConv (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                            HYPRE_ParCSRMatrix *A_ptr);
-HYPRE_Int BuildParFromOneFile (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParFromOneFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                HYPRE_Int num_functions, HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildFuncTagsFromFiles (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
-                                  HYPRE_ParCSRMatrix A, HYPRE_Int **dof_func_ptr );
-HYPRE_Int BuildFuncTagsFromOneFile (MPI_Comm comm, HYPRE_Int argc, char *argv [],
-                                    HYPRE_Int arg_index,
-                                    HYPRE_ParCSRMatrix A, HYPRE_Int **dof_func_ptr );
-HYPRE_Int BuildFuncTagsInterleaved (HYPRE_Int local_size, HYPRE_Int num_functions,
-                                    HYPRE_MemoryLocation memory_location,
-                                    HYPRE_Int **dof_func_ptr );
-HYPRE_Int BuildFuncTagsContiguous (HYPRE_Int local_size, HYPRE_Int num_functions,
-                                   HYPRE_MemoryLocation memory_location,
-                                   HYPRE_Int **dof_func_ptr );
-HYPRE_Int BuildRhsParFromOneFile (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildFuncsFromFiles (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+                               HYPRE_ParCSRMatrix A, HYPRE_Int **dof_func_ptr );
+HYPRE_Int BuildFuncsFromOneFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+                                 HYPRE_ParCSRMatrix A, HYPRE_Int **dof_func_ptr );
+HYPRE_Int BuildRhsParFromOneFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                   HYPRE_ParCSRMatrix A, HYPRE_ParVector *b_ptr );
-HYPRE_Int BuildSolParFromOneFile (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildSolParFromOneFile (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                   HYPRE_ParCSRMatrix A, HYPRE_ParVector *x_ptr );
-HYPRE_Int BuildBigArrayFromOneFile (MPI_Comm comm, HYPRE_Int argc, char *argv [],
-                                    const char *array_name,
+HYPRE_Int BuildBigArrayFromOneFile (HYPRE_Int argc, char *argv [], const char *array_name,
                                     HYPRE_Int arg_index, HYPRE_BigInt *partitioning, HYPRE_Int *size, HYPRE_BigInt **array_ptr);
-HYPRE_Int BuildParLaplacian9pt (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParLaplacian9pt (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                 HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildParLaplacian27pt (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParLaplacian27pt (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                  HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildParLaplacian125pt (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParLaplacian125pt (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                   HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildParRotate7pt (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParRotate7pt (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                              HYPRE_ParCSRMatrix *A_ptr );
-HYPRE_Int BuildParVarDifConv (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+HYPRE_Int BuildParVarDifConv (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                               HYPRE_ParCSRMatrix *A_ptr, HYPRE_ParVector *rhs_ptr );
 HYPRE_ParCSRMatrix GenerateSysLaplacian (MPI_Comm comm, HYPRE_BigInt nx, HYPRE_BigInt ny,
                                          HYPRE_BigInt nz,
@@ -101,7 +96,8 @@ HYPRE_ParCSRMatrix GenerateSysLaplacianVCoef (MPI_Comm comm, HYPRE_BigInt nx, HY
                                               HYPRE_Int num_fun, HYPRE_Real *mtrx, HYPRE_Real *value);
 HYPRE_Int SetSysVcoefValues(HYPRE_Int num_fun, HYPRE_BigInt nx, HYPRE_BigInt ny, HYPRE_BigInt nz,
                             HYPRE_Real vcx, HYPRE_Real vcy, HYPRE_Real vcz, HYPRE_Int mtx_entry, HYPRE_Real *values);
-HYPRE_Int BuildParCoordinates (MPI_Comm comm, HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
+
+HYPRE_Int BuildParCoordinates (HYPRE_Int argc, char *argv [], HYPRE_Int arg_index,
                                HYPRE_Int *coorddim_ptr, float **coord_ptr );
 
 extern HYPRE_Int hypre_FlexGMRESModifyPCAMGExample(void *precond_data, HYPRE_Int iterations,
@@ -117,8 +113,6 @@ hypre_int
 main( hypre_int argc,
       char *argv[] )
 {
-   MPI_Comm            comm = hypre_MPI_COMM_WORLD;
-
    HYPRE_Int           arg_index;
    HYPRE_Int           print_usage;
    HYPRE_Int           log_level = 0;
@@ -138,8 +132,6 @@ main( hypre_int argc,
    HYPRE_Int           build_src_arg_index;
    HYPRE_Int           build_x0_type;
    HYPRE_Int           build_x0_arg_index;
-   HYPRE_Int           build_xstar_type;
-   HYPRE_Int           build_xstar_arg_index;
    HYPRE_Int           build_funcs_type;
    HYPRE_Int           build_funcs_arg_index;
    HYPRE_Int           build_fpt_arg_index;
@@ -174,14 +166,12 @@ main( hypre_int argc,
    HYPRE_IJMatrix      ij_M = NULL;
    HYPRE_IJVector      ij_b = NULL;
    HYPRE_IJVector      ij_x = NULL;
-   HYPRE_IJVector      ij_xstar = NULL;
-   HYPRE_IJVector      *ij_rbm  = NULL;
+   HYPRE_IJVector      *ij_rbm = NULL;
 
    HYPRE_ParCSRMatrix  parcsr_A = NULL;
    HYPRE_ParCSRMatrix  parcsr_M = NULL;
    HYPRE_ParVector     b = NULL;
    HYPRE_ParVector     x = NULL;
-   HYPRE_ParVector     xstar = NULL;
    HYPRE_ParVector     *interp_vecs = NULL;
    HYPRE_ParVector     residual = NULL;
    HYPRE_ParVector     x0_save = NULL;
@@ -211,6 +201,7 @@ main( hypre_int argc,
    HYPRE_Int           ns_coarse = 1, ns_down = -1, ns_up = -1;
 
    HYPRE_Int           time_index;
+   MPI_Comm            comm = hypre_MPI_COMM_WORLD;
    HYPRE_BigInt        M, N, big_i;
    HYPRE_Int           local_num_rows, local_num_cols;
    HYPRE_BigInt        first_local_row, last_local_row;
@@ -228,14 +219,6 @@ main( hypre_int argc,
    HYPRE_Int           Q_max = 0;
    HYPRE_Real          Q_trunc = 0;
 
-   /* Linear system scaling data */
-   HYPRE_IJVector      ij_ld  = NULL;
-   HYPRE_IJVector      ij_rd  = NULL;
-   HYPRE_ParVector     par_ld = NULL;
-   HYPRE_ParVector     par_rd = NULL;
-   HYPRE_Complex      *d_data = NULL;
-   HYPRE_Int           scaling_type;
-
    /* Specific tests */
    HYPRE_Int           test_init = 0;
    HYPRE_Int           lazy_device_init = 0;
@@ -532,8 +515,8 @@ main( hypre_int argc,
    /* Initialize MPI */
    hypre_MPI_Init(&argc, &argv);
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /* Should we test library initialization? */
    for (arg_index = 1; arg_index < argc; arg_index ++)
@@ -556,7 +539,7 @@ main( hypre_int argc,
     * GPU Device binding
     * Must be done before HYPRE_Initialize() and should not be changed after
     *-----------------------------------------------------------------*/
-   hypre_bind_device_id(device_id, myid, num_procs, comm);
+   hypre_bind_device_id(device_id, myid, num_procs, hypre_MPI_COMM_WORLD);
 
    /*-----------------------------------------------------------
     * Initialize : must be the first HYPRE function to call
@@ -567,7 +550,7 @@ main( hypre_int argc,
       /* The library should not be initialized or finalized */
       if (!HYPRE_Initialized() && !HYPRE_Finalized())
       {
-         hypre_ParPrintf(comm, "hypre library has not been initialized or finalized yet\n");
+         hypre_ParPrintf(hypre_MPI_COMM_WORLD, "hypre library has not been initialized or finalized yet\n");
       }
 
       HYPRE_Initialize();
@@ -575,7 +558,7 @@ main( hypre_int argc,
       /* Check if the library is in initialized state */
       if (HYPRE_Initialized() && !HYPRE_Finalized())
       {
-         hypre_ParPrintf(comm, "hypre library has been initialized\n");
+         hypre_ParPrintf(hypre_MPI_COMM_WORLD, "hypre library has been initialized\n");
       }
 
       HYPRE_Finalize();
@@ -583,7 +566,7 @@ main( hypre_int argc,
       /* Check if the library is in finalized state */
       if (!HYPRE_Initialized() && HYPRE_Finalized())
       {
-         hypre_ParPrintf(comm, "hypre library has been finalized\n");
+         hypre_ParPrintf(hypre_MPI_COMM_WORLD, "hypre library has been finalized\n");
       }
 
       HYPRE_Initialize();
@@ -591,7 +574,7 @@ main( hypre_int argc,
       /* Check if the library is in initialized state */
       if (HYPRE_Initialized() && !HYPRE_Finalized())
       {
-         hypre_ParPrintf(comm, "hypre library has been re-initialized\n");
+         hypre_ParPrintf(hypre_MPI_COMM_WORLD, "hypre library has been re-initialized\n");
       }
 
       HYPRE_Finalize();
@@ -599,7 +582,7 @@ main( hypre_int argc,
       /* Check if the library is in finalized state */
       if (!HYPRE_Initialized() && HYPRE_Finalized())
       {
-         hypre_ParPrintf(comm, "hypre library has been finalized\n");
+         hypre_ParPrintf(hypre_MPI_COMM_WORLD, "hypre library has been finalized\n");
       }
 
       hypre_MPI_Finalize();
@@ -618,7 +601,7 @@ main( hypre_int argc,
    }
 
    hypre_EndTiming(time_index);
-   hypre_PrintTiming("Hypre init times", comm);
+   hypre_PrintTiming("Hypre init times", hypre_MPI_COMM_WORLD);
    hypre_FinalizeTiming(time_index);
    hypre_ClearTiming();
 
@@ -695,8 +678,6 @@ main( hypre_int argc,
    build_src_arg_index = argc;
    build_x0_type = -1;
    build_x0_arg_index = argc;
-   build_xstar_type = -1;
-   build_xstar_arg_index = argc;
    build_funcs_type = 0;
    build_funcs_arg_index = argc;
    build_fpt_arg_index = 0;
@@ -705,7 +686,7 @@ main( hypre_int argc,
    IS_type = 1;
    debug_flag = 0;
    solver_id = 0;
-   ioutdat = 2;
+   ioutdat = 3;
    poutdat = 1;
    hypre_sprintf (plot_file_name, "AMGgrids.CF.dat");
 
@@ -827,16 +808,6 @@ main( hypre_int argc,
          build_funcs_type      = 2;
          build_funcs_arg_index = arg_index;
       }
-      else if ( strcmp(argv[arg_index], "-funcsinterleaved") == 0 )
-      {
-         arg_index++;
-         build_funcs_type = 3;
-      }
-      else if ( strcmp(argv[arg_index], "-funcscontiguous") == 0 )
-      {
-         arg_index++;
-         build_funcs_type = 4;
-      }
       else if ( strcmp(argv[arg_index], "-mat-info") == 0 )
       {
          arg_index++;
@@ -1009,18 +980,6 @@ main( hypre_int argc,
          build_x0_type       = 0;
          build_x0_arg_index  = arg_index;
       }
-      else if ( strcmp(argv[arg_index], "-xstarfromfile") == 0 )
-      {
-         arg_index++;
-         build_xstar_type       = 0;
-         build_xstar_arg_index  = arg_index;
-      }
-      else if ( strcmp(argv[arg_index], "-xstarfrombinfile") == 0 )
-      {
-         arg_index++;
-         build_xstar_type       = -2;
-         build_xstar_arg_index  = arg_index;
-      }
       else if ( strcmp(argv[arg_index], "-x0parcsrfile") == 0 )
       {
          arg_index++;
@@ -2403,13 +2362,6 @@ main( hypre_int argc,
          hypre_printf("           0=Forward (default)       1=Backward\n");
          hypre_printf("           2=Centered                3=Upwind\n");
          hypre_printf("\n");
-         hypre_printf("  -test_scaling          : scale the system matrix (A = D_left * A * D_right) \n");
-         hypre_printf("           0 = No scaling  (default)\n");
-         hypre_printf("           1 = Left scaling using inv(diag(A))\n");
-         hypre_printf("           2 = Right scaling using inv(diag(A))\n");
-         hypre_printf("           3 = Left and right scaling using sqrt(inv(diag(A)))\n");
-         hypre_printf("           4 = Block/tagged scaling using block Frobenius norms (see dof_func)\n");
-         hypre_printf("\n");
          hypre_printf("  -exact_size            : inserts immediately into ParCSR structure\n");
          hypre_printf("  -storage_low           : allocates not enough storage for aux struct\n");
          hypre_printf("  -concrete_parcsr       : use parcsr matrix type as concrete type\n");
@@ -2446,12 +2398,8 @@ main( hypre_int argc,
          hypre_printf("backward Euler source is vector with unit coefficients (default)\n");
          hypre_printf("  -srczero               : ");
          hypre_printf("backward Euler source is zero-vector\n");
-         hypre_printf("  -x0fromfile            : ");
+         hypre_printf("  -x0fromfile           : ");
          hypre_printf("initial guess x0 read from multiple files (IJ format)\n");
-         hypre_printf("  -xstarfromfile         : ");
-         hypre_printf("reference solution xstar read from multiple files (IJ format)\n");
-         hypre_printf("  -xstarfrombinfile         : ");
-         hypre_printf("reference solution xstar read from multiple binary files (IJ format)\n");
          hypre_printf("\n");
          hypre_printf("  -solver <ID>           : solver ID\n");
          hypre_printf("       0=AMG               1=AMG-PCG        \n");
@@ -2617,16 +2565,8 @@ main( hypre_int argc,
          hypre_printf("  -nonzeros_to_keep <val>: number of nonzeros in each row to keep\n");
          hypre_printf("\n");
          hypre_printf("  -iout <val>            : set output flag\n");
-         hypre_printf("       0 = no output\n");
-         hypre_printf("       1 = matrix and basic solver stats\n");
-         hypre_printf("       2 = abs. and rel. residual norms\n");
-         hypre_printf("       3 = abs. residual norms for multi-tag vectors (GMRES only)\n");
-         hypre_printf("       4 = tagged rel. residual norms for multi-tag vectors (GMRES only)\n");
-         hypre_printf("       5 = rel. residual norms for multi-tag vectors (GMRES only)\n");
-         hypre_printf("       6 = abs. and rel. error norms (GMRES only)\n");
-         hypre_printf("       7 = abs. error norms for multi-tag vectors (GMRES only)\n");
-         hypre_printf("       8 = tagged rel. error norms for multi-tag vectors (GMRES only)\n");
-         hypre_printf("       9 = rel. error norms for multi-tag vectors (GMRES only)\n");
+         hypre_printf("       0=no output    1=matrix stats\n");
+         hypre_printf("       2=cycle stats  3=matrix & cycle stats\n");
          hypre_printf("\n");
          hypre_printf("  -dbg <val>             : set debug flag\n");
          hypre_printf("       0=no debugging\n       1=internal timing\n       2=interpolation truncation\n       3=more detailed timing in coarsening routine\n");
@@ -2911,24 +2851,24 @@ main( hypre_int argc,
    }
    else if ( build_matrix_type == 0 )
    {
-      BuildParFromFile(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParFromFile(argc, argv, build_matrix_arg_index, &parcsr_A);
    }
    else if ( build_matrix_type == 1 )
    {
-      BuildParFromOneFile(comm, argc, argv, build_matrix_arg_index, num_functions,
+      BuildParFromOneFile(argc, argv, build_matrix_arg_index, num_functions,
                           &parcsr_A);
    }
    else if ( build_matrix_type == 2 )
    {
-      BuildParLaplacian(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParLaplacian(argc, argv, build_matrix_arg_index, &parcsr_A);
    }
    else if ( build_matrix_type == 3 )
    {
-      BuildParLaplacian9pt(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParLaplacian9pt(argc, argv, build_matrix_arg_index, &parcsr_A);
    }
    else if ( build_matrix_type == 4 )
    {
-      BuildParLaplacian27pt(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParLaplacian27pt(argc, argv, build_matrix_arg_index, &parcsr_A);
 
 #if defined(HYPRE_USING_GPU)
       hypre_CSRMatrixSpMVAnalysisDevice(hypre_ParCSRMatrixDiag(parcsr_A));
@@ -2936,7 +2876,7 @@ main( hypre_int argc,
    }
    else if ( build_matrix_type == 5 )
    {
-      BuildParLaplacian125pt(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParLaplacian125pt(argc, argv, build_matrix_arg_index, &parcsr_A);
 
 #if defined(HYPRE_USING_GPU)
       hypre_CSRMatrixSpMVAnalysisDevice(hypre_ParCSRMatrixDiag(parcsr_A));
@@ -2944,17 +2884,17 @@ main( hypre_int argc,
    }
    else if ( build_matrix_type == 6 )
    {
-      BuildParDifConv(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParDifConv(argc, argv, build_matrix_arg_index, &parcsr_A);
    }
    else if ( build_matrix_type == 7 )
    {
-      BuildParVarDifConv(comm, argc, argv, build_matrix_arg_index, &parcsr_A, &b);
+      BuildParVarDifConv(argc, argv, build_matrix_arg_index, &parcsr_A, &b);
       build_rhs_type      = 6;
       build_src_type      = 5;
    }
    else if ( build_matrix_type == 8 )
    {
-      BuildParRotate7pt(comm, argc, argv, build_matrix_arg_index, &parcsr_A);
+      BuildParRotate7pt(argc, argv, build_matrix_arg_index, &parcsr_A);
    }
    else
    {
@@ -2968,7 +2908,7 @@ main( hypre_int argc,
    if (plot_grids)
    {
       if (build_matrix_type > 1 &&  build_matrix_type < 9)
-         BuildParCoordinates (comm, argc, argv, build_matrix_arg_index,
+         BuildParCoordinates (argc, argv, build_matrix_arg_index,
                               &coord_dim, &coordinates);
       else
       {
@@ -3001,7 +2941,7 @@ main( hypre_int argc,
       local_num_cols = (HYPRE_Int)(last_local_col - first_local_col + 1);
    }
    hypre_EndTiming(time_index);
-   hypre_PrintTiming("Generate Matrix", comm);
+   hypre_PrintTiming("Generate Matrix", hypre_MPI_COMM_WORLD);
    hypre_FinalizeTiming(time_index);
    hypre_ClearTiming();
 
@@ -3023,7 +2963,7 @@ main( hypre_int argc,
       parcsr_M = (HYPRE_ParCSRMatrix) object;
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Auxiliary Operator", comm);
+      hypre_PrintTiming("Auxiliary Operator", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
    }
@@ -3263,7 +3203,7 @@ main( hypre_int argc,
       ierr += HYPRE_IJMatrixAssemble( ij_A );
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("IJ Matrix Setup", comm);
+      hypre_PrintTiming("IJ Matrix Setup", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -3381,7 +3321,7 @@ main( hypre_int argc,
       for (i = 0; i < num_interp_vecs; i++)
       {
          hypre_sprintf(new_file_name, "%s.%d", argv[build_rbm_index], i);
-         ierr = HYPRE_IJVectorRead( new_file_name, comm,
+         ierr = HYPRE_IJVectorRead( new_file_name, hypre_MPI_COMM_WORLD,
                                     HYPRE_PARCSR, &ij_rbm[i] );
          ierr = HYPRE_IJVectorGetObject( ij_rbm[i], &object );
          interp_vecs[i] = (HYPRE_ParVector) object;
@@ -3402,19 +3342,19 @@ main( hypre_int argc,
 
       if (build_fpt_arg_index)
       {
-         BuildBigArrayFromOneFile(comm, argc, argv, "Fine points", build_fpt_arg_index,
+         BuildBigArrayFromOneFile(argc, argv, "Fine points", build_fpt_arg_index,
                                   partitioning, &num_fpt, &fpt_index);
       }
 
       if (build_sfpt_arg_index)
       {
-         BuildBigArrayFromOneFile(comm, argc, argv, "Isolated Fine points", build_sfpt_arg_index,
+         BuildBigArrayFromOneFile(argc, argv, "Isolated Fine points", build_sfpt_arg_index,
                                   partitioning, &num_isolated_fpt, &isolated_fpt_index);
       }
 
       if (build_cpt_arg_index)
       {
-         BuildBigArrayFromOneFile(comm, argc, argv, "Coarse points", build_cpt_arg_index,
+         BuildBigArrayFromOneFile(argc, argv, "Coarse points", build_cpt_arg_index,
                                   partitioning, &num_cpt, &cpt_index);
       }
 
@@ -3482,22 +3422,21 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector read from file %s\n", argv[build_rhs_arg_index]);
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       /* RHS */
       if (!build_rhs_type)
       {
          ierr = HYPRE_IJVectorRead(argv[build_rhs_arg_index],
-                                   comm, HYPRE_PARCSR, &ij_b);
+                                   hypre_MPI_COMM_WORLD,
+                                   HYPRE_PARCSR, &ij_b);
       }
       else
       {
          ierr = HYPRE_IJVectorReadBinary(argv[build_rhs_arg_index],
-                                         comm, HYPRE_PARCSR, &ij_b);
+                                         hypre_MPI_COMM_WORLD,
+                                         HYPRE_PARCSR, &ij_b);
       }
 
       if (ierr)
@@ -3505,15 +3444,16 @@ main( hypre_int argc,
          hypre_printf("ERROR: Problem reading in the right-hand-side!\n");
          exit(1);
       }
-      HYPRE_IJVectorGetObject( ij_b, &object );
+      ierr = HYPRE_IJVectorGetObject( ij_b, &object );
       b = (HYPRE_ParVector) object;
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
       HYPRE_IJVectorAssemble(ij_x);
-      HYPRE_IJVectorGetObject(ij_x, &object);
+
+      ierr = HYPRE_IJVectorGetObject( ij_x, &object );
       x = (HYPRE_ParVector) object;
    }
    else if (build_rhs_type == 1)
@@ -3521,17 +3461,14 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector read from file %s\n", argv[build_rhs_arg_index]);
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       ij_b = NULL;
-      BuildRhsParFromOneFile(comm, argc, argv, build_rhs_arg_index, parcsr_A, &b);
+      BuildRhsParFromOneFile(argc, argv, build_rhs_arg_index, parcsr_A, &b);
 
       /* initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
       HYPRE_IJVectorAssemble(ij_x);
@@ -3544,10 +3481,7 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector has unit coefficients\n");
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       HYPRE_Complex *values_h = hypre_CTAlloc(HYPRE_Real, local_num_rows, HYPRE_MEMORY_HOST);
@@ -3560,7 +3494,7 @@ main( hypre_int argc,
                     memory_location, HYPRE_MEMORY_HOST);
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_b, num_components);
       HYPRE_IJVectorInitialize_v2(ij_b, memory_location);
@@ -3575,7 +3509,7 @@ main( hypre_int argc,
 
       /* Initial guess */
       hypre_Memset(values_d, 0, local_num_rows * sizeof(HYPRE_Complex), memory_location);
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_x, num_components);
       HYPRE_IJVectorInitialize_v2(ij_x, memory_location);
@@ -3596,14 +3530,11 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector has random coefficients and unit 2-norm\n");
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_b, num_components);
       HYPRE_IJVectorInitialize(ij_b);
@@ -3621,7 +3552,7 @@ main( hypre_int argc,
       ierr = HYPRE_ParVectorScale(norm, b);
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetNumComponents(ij_x, num_components);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
@@ -3635,10 +3566,7 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector set for solution with unit coefficients\n");
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       HYPRE_Real *values_h = hypre_CTAlloc(HYPRE_Real, local_num_cols, HYPRE_MEMORY_HOST);
@@ -3651,7 +3579,7 @@ main( hypre_int argc,
                     memory_location, HYPRE_MEMORY_HOST);
 
       /* Temporary use of solution vector */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_x, num_components);
       HYPRE_IJVectorInitialize(ij_x);
@@ -3668,7 +3596,7 @@ main( hypre_int argc,
       hypre_TFree(values_d, memory_location);
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_b, num_components);
       HYPRE_IJVectorInitialize(ij_b);
@@ -3698,7 +3626,7 @@ main( hypre_int argc,
                     memory_location, HYPRE_MEMORY_HOST);
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorSetNumComponents(ij_b, num_components);
       HYPRE_IJVectorInitialize(ij_b);
@@ -3708,7 +3636,7 @@ main( hypre_int argc,
       b = (HYPRE_ParVector) object;
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetNumComponents(ij_x, num_components);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
@@ -3733,17 +3661,14 @@ main( hypre_int argc,
       if (myid == 0)
       {
          hypre_printf("  RHS vector read from file %s\n", argv[build_rhs_arg_index]);
-         if (build_x0_type == -1)
-         {
-            hypre_printf("  Initial guess is 0\n");
-         }
+         hypre_printf("  Initial guess is 0\n");
       }
 
       ij_b = NULL;
-      ReadParVectorFromFile(comm, argc, argv, build_rhs_arg_index, &b);
+      ReadParVectorFromFile(argc, argv, build_rhs_arg_index, &b);
 
       /* initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
       HYPRE_IJVectorAssemble(ij_x);
@@ -3771,7 +3696,7 @@ main( hypre_int argc,
          hypre_printf("  Initial unknown vector in evolution is 0\n");
       }
 
-      ierr = HYPRE_IJVectorRead( argv[build_src_arg_index], comm,
+      ierr = HYPRE_IJVectorRead( argv[build_src_arg_index], hypre_MPI_COMM_WORLD,
                                  HYPRE_PARCSR, &ij_b );
       if (ierr)
       {
@@ -3782,7 +3707,7 @@ main( hypre_int argc,
       b = (HYPRE_ParVector) object;
 
       /* Initial unknown vector */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
       HYPRE_IJVectorAssemble(ij_x);
@@ -3792,11 +3717,11 @@ main( hypre_int argc,
    }
    else if (build_src_type == 1)
    {
-      BuildRhsParFromOneFile(comm, argc, argv, build_src_arg_index, parcsr_A, &b);
+      BuildRhsParFromOneFile(argc, argv, build_src_arg_index, parcsr_A, &b);
       ij_b = NULL;
 
       /* Initial unknown vector */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
       HYPRE_IJVectorAssemble(ij_x);
@@ -3813,7 +3738,7 @@ main( hypre_int argc,
       }
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_b);
 
@@ -3835,7 +3760,7 @@ main( hypre_int argc,
       b = (HYPRE_ParVector) object;
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
 
@@ -3855,7 +3780,7 @@ main( hypre_int argc,
       }
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_b);
 
@@ -3877,7 +3802,7 @@ main( hypre_int argc,
       b = (HYPRE_ParVector) object;
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
 
@@ -3897,7 +3822,7 @@ main( hypre_int argc,
       }
 
       /* RHS */
-      HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_b);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_row, last_local_row, &ij_b);
       HYPRE_IJVectorSetObjectType(ij_b, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_b);
 
@@ -3919,7 +3844,7 @@ main( hypre_int argc,
       b = (HYPRE_ParVector) object;
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
 
@@ -3950,7 +3875,7 @@ main( hypre_int argc,
       }
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
 
@@ -3993,12 +3918,14 @@ main( hypre_int argc,
       if (!build_x0_type)
       {
          ierr = HYPRE_IJVectorRead(argv[build_x0_arg_index],
-                                   comm, HYPRE_PARCSR, &ij_x);
+                                   hypre_MPI_COMM_WORLD,
+                                   HYPRE_PARCSR, &ij_x);
       }
       else
       {
          ierr = HYPRE_IJVectorReadBinary(argv[build_x0_arg_index],
-                                         comm, HYPRE_PARCSR, &ij_x);
+                                         hypre_MPI_COMM_WORLD,
+                                         HYPRE_PARCSR, &ij_x);
       }
 
       if (ierr)
@@ -4013,7 +3940,7 @@ main( hypre_int argc,
    {
       if (myid == 0)
       {
-         hypre_printf("  Initial guess vector read from file %s\n", argv[build_x0_arg_index]);
+         hypre_printf("  Initial guess vector read from file %s\n", argv[build_rhs_arg_index]);
       }
 
       if (ij_x)
@@ -4022,7 +3949,7 @@ main( hypre_int argc,
       }
       ij_x = NULL;
 
-      BuildSolParFromOneFile(comm, argc, argv, build_x0_arg_index, parcsr_A, &x);
+      BuildSolParFromOneFile(argc, argv, build_x0_arg_index, parcsr_A, &x);
    }
    else if (build_x0_type == 7)
    {
@@ -4032,7 +3959,7 @@ main( hypre_int argc,
          hypre_printf("  Initial guess vector read from file %s\n", argv[build_x0_arg_index]);
       }
 
-      ReadParVectorFromFile(comm, argc, argv, build_x0_arg_index, &x);
+      ReadParVectorFromFile(argc, argv, build_x0_arg_index, &x);
    }
    else if (build_x0_type == 1)
    {
@@ -4048,7 +3975,7 @@ main( hypre_int argc,
       }
 
       /* Initial guess */
-      HYPRE_IJVectorCreate(comm, first_local_col, last_local_col, &ij_x);
+      HYPRE_IJVectorCreate(hypre_MPI_COMM_WORLD, first_local_col, last_local_col, &ij_x);
       HYPRE_IJVectorSetObjectType(ij_x, HYPRE_PARCSR);
       HYPRE_IJVectorInitialize(ij_x);
 
@@ -4072,39 +3999,15 @@ main( hypre_int argc,
       x = (HYPRE_ParVector) object;
    }
 
-   /* Reference solution */
-   if (build_xstar_type == 0 || build_xstar_type == -2)
-   {
-      /* from file */
-      hypre_ParPrintf(comm, "  Reference solution vector read from file %s\n",
-                      argv[build_xstar_arg_index]);
-
-      if (ij_xstar)
-      {
-         HYPRE_IJVectorDestroy(ij_xstar);
-      }
-
-      if (!build_xstar_type)
-      {
-         ierr = HYPRE_IJVectorRead(argv[build_xstar_arg_index],
-                                   comm, HYPRE_PARCSR, &ij_xstar);
-      }
-      else
-      {
-         ierr = HYPRE_IJVectorReadBinary(argv[build_xstar_arg_index],
-                                         comm, HYPRE_PARCSR, &ij_xstar);
-      }
+   /*-----------------------------------------------------------
+    * Finalize IJVector Setup timings
+    *-----------------------------------------------------------*/
 
-      if (ierr)
-      {
-         hypre_printf("ERROR: Problem reading in xstar!\n");
-         exit(1);
-      }
-      ierr = HYPRE_IJVectorGetObject(ij_xstar, &object);
-      xstar = (HYPRE_ParVector) object;
-   }
+   hypre_EndTiming(time_index);
+   hypre_PrintTiming("IJ Vector Setup", hypre_MPI_COMM_WORLD);
+   hypre_FinalizeTiming(time_index);
+   hypre_ClearTiming();
 
-   /* Setup dof_func array if needed */
    if (num_functions > 1)
    {
       dof_func = NULL;
@@ -4112,55 +4015,27 @@ main( hypre_int argc,
       {
          if (myid == 0)
          {
-            hypre_printf("  Calling BuildFuncTagsFromOneFile\n");
+            hypre_printf(" Calling BuildFuncsFromOneFile\n");
          }
-         BuildFuncTagsFromOneFile(comm, argc, argv, build_funcs_arg_index, parcsr_A, &dof_func);
+         BuildFuncsFromOneFile(argc, argv, build_funcs_arg_index, parcsr_A, &dof_func);
       }
       else if (build_funcs_type == 2)
       {
          if (myid == 0)
          {
-            hypre_printf("  Calling BuildFuncTagsFromFiles\n");
+            hypre_printf(" Calling BuildFuncsFromFiles\n");
          }
-         BuildFuncTagsFromFiles(argc, argv, build_funcs_arg_index, parcsr_A, &dof_func);
+         BuildFuncsFromFiles(argc, argv, build_funcs_arg_index, parcsr_A, &dof_func);
       }
-      else if (build_funcs_type == 3)
-      {
-         if (myid == 0)
-         {
-            hypre_printf("  Calling BuildFuncTagsInterleaved with num_functions = %d\n", num_functions);
-         }
-         BuildFuncTagsInterleaved(local_num_rows, num_functions, memory_location, &dof_func);
-      }
-      else if (build_funcs_type == 4)
+      else
       {
          if (myid == 0)
          {
-            hypre_printf("  Calling BuildFuncTagsContiguous with num_functions = %d\n", num_functions);
+            hypre_printf (" Number of functions = %d \n", num_functions);
          }
-         BuildFuncTagsContiguous(local_num_rows, num_functions, memory_location, &dof_func);
-      }
-      else
-      {
-         hypre_printf ("  Number of functions = %d \n", num_functions);
-      }
-
-      if (dof_func)
-      {
-         HYPRE_IJVectorSetTags(ij_x, 0, num_functions, dof_func);
-         HYPRE_IJVectorSetTags(ij_b, 0, num_functions, dof_func);
       }
    }
 
-   /*-----------------------------------------------------------
-    * Finalize IJVector Setup timings
-    *-----------------------------------------------------------*/
-
-   hypre_EndTiming(time_index);
-   hypre_PrintTiming("IJ Vector Setup", comm);
-   hypre_FinalizeTiming(time_index);
-   hypre_ClearTiming();
-
    /*-----------------------------------------------------------
     * Print out the system and initial guess
     *-----------------------------------------------------------*/
@@ -4212,15 +4087,6 @@ main( hypre_int argc,
          HYPRE_ParVectorPrint(b, "ParVec.out.b");
       }
       HYPRE_IJVectorPrint(ij_x, "IJ.out.x0");
-
-      if (ij_xstar)
-      {
-         HYPRE_IJVectorPrint(ij_xstar, "IJ.out.xstar");
-      }
-      else if (xstar)
-      {
-         HYPRE_ParVectorPrint(xstar, "IJ.out.xstar");
-      }
    }
 
    if (print_system_binary)
@@ -4251,15 +4117,6 @@ main( hypre_int argc,
       {
          HYPRE_ParVectorPrintBinaryIJ(x, "IJ.out.x0");
       }
-
-      if (ij_xstar)
-      {
-         HYPRE_IJVectorPrintBinary(ij_xstar, "IJ.out.xstar");
-      }
-      else if (xstar)
-      {
-         HYPRE_ParVectorPrintBinaryIJ(xstar, "IJ.out.xstar");
-      }
    }
 
    if (print_system_csr)
@@ -4294,7 +4151,6 @@ main( hypre_int argc,
    hypre_ParCSRMatrixMigrate(parcsr_A, hypre_HandleMemoryLocation(hypre_handle()));
    hypre_ParVectorMigrate(b, hypre_HandleMemoryLocation(hypre_handle()));
    hypre_ParVectorMigrate(x, hypre_HandleMemoryLocation(hypre_handle()));
-   hypre_ParVectorMigrate(xstar, hypre_HandleMemoryLocation(hypre_handle()));
    if (build_matrix_M == 1)
    {
       hypre_ParCSRMatrixMigrate(parcsr_M, hypre_HandleMemoryLocation(hypre_handle()));
@@ -4375,96 +4231,80 @@ main( hypre_int argc,
    }
 
    /*-----------------------------------------------------------
-    * Test linear system scaling:
-    *
-    * Solve B * y = z
-    *
-    *   B = diag(ld) * A * diag(rd)
-    *   x = diag(rd) * y
-    *   z = diag(ld) * b
+    * Test matrix scaling: B = diag(ld) * A * diag(rd)
     *-----------------------------------------------------------*/
 
    if (test_scaling)
    {
+      HYPRE_IJVector   ij_ld  = NULL;
+      HYPRE_IJVector   ij_rd  = NULL;
+      HYPRE_ParVector  par_ld = NULL;
+      HYPRE_ParVector  par_rd = NULL;
+      HYPRE_Complex   *d_data;
+      HYPRE_Int        scaling_type;
+
       time_index = hypre_InitializeTiming("ParCSR scaling");
       hypre_BeginTiming(time_index);
 
-      if (test_scaling < 4)
-      {
-         /* Allocate memory */
-         d_data = hypre_TAlloc(HYPRE_Complex, local_num_rows, memory_location);
-
-         /* Select scaling type:
-              left  OR right scaling: diag inverse (1 or 2)
-              left AND right scaling: diag inverse sqrt (3) */
-         scaling_type = (test_scaling == 1 || test_scaling == 2) ? 2 : 3;
+      /* Allocate memory */
+      d_data = hypre_TAlloc(HYPRE_Complex, local_num_rows, memory_location);
 
-         /* Compute scaling vector */
-         hypre_CSRMatrixExtractDiagonal(hypre_ParCSRMatrixDiag(parcsr_A), d_data, scaling_type);
+      /* Select scaling type:
+           left  OR right scaling: diag inverse (2)
+           left AND right scaling: diag inverse sqrt (3) */
+      scaling_type = (test_scaling == 1 || test_scaling == 2) ? 2 : 3;
 
-         /* Create diagonal scaling matrix diag(ld) */
-         if (test_scaling != 2)
-         {
-            HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_ld);
-            HYPRE_IJVectorSetObjectType(ij_ld, HYPRE_PARCSR);
-            HYPRE_IJVectorInitialize(ij_ld);
-            HYPRE_IJVectorSetValues(ij_ld, local_num_rows, NULL, d_data);
-            HYPRE_IJVectorAssemble(ij_ld);
-            HYPRE_IJVectorGetObject(ij_ld, &object);
-            par_ld = (HYPRE_ParVector) object;
-         }
+      /* Compute scaling vector */
+      hypre_CSRMatrixExtractDiagonal(hypre_ParCSRMatrixDiag(parcsr_A), d_data, scaling_type);
 
-         /* Create diagonal scaling matrix diag(rd) */
-         if (test_scaling != 1)
-         {
-            HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_rd);
-            HYPRE_IJVectorSetObjectType(ij_rd, HYPRE_PARCSR);
-            HYPRE_IJVectorInitialize(ij_rd);
-            HYPRE_IJVectorSetValues(ij_rd, local_num_rows, NULL, d_data);
-            HYPRE_IJVectorAssemble(ij_rd);
-            HYPRE_IJVectorGetObject(ij_rd, &object);
-            par_rd = (HYPRE_ParVector) object;
-         }
-      }
-      else if (test_scaling == 4 && dof_func)
+      /* Create diagonal scaling matrix diag(ld) */
+      if (test_scaling != 2)
       {
-         /* Compute scaling based on block matrix norms */
-         HYPRE_ParCSRMatrixCompScalingTagged(parcsr_A, 1, num_functions, dof_func, &par_ld);
-         par_rd = par_ld;
+         HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_ld);
+         HYPRE_IJVectorSetObjectType(ij_ld, HYPRE_PARCSR);
+         HYPRE_IJVectorInitialize(ij_ld);
+         HYPRE_IJVectorSetValues(ij_ld, local_num_rows, NULL, d_data);
+         HYPRE_IJVectorAssemble(ij_ld);
+         HYPRE_IJVectorGetObject(ij_ld, &object);
+         par_ld = (HYPRE_ParVector) object;
       }
-      else
+
+      /* Create diagonal scaling matrix diag(rd) */
+      if (test_scaling != 1)
       {
-         if (myid == 0)
-         {
-            hypre_printf("Error: invalid test_scaling option or missing dof_func array\n");
-         }
-         hypre_MPI_Abort(comm, 1);
+         HYPRE_IJVectorCreate(comm, first_local_row, last_local_row, &ij_rd);
+         HYPRE_IJVectorSetObjectType(ij_rd, HYPRE_PARCSR);
+         HYPRE_IJVectorInitialize(ij_rd);
+         HYPRE_IJVectorSetValues(ij_rd, local_num_rows, NULL, d_data);
+         HYPRE_IJVectorAssemble(ij_rd);
+         HYPRE_IJVectorGetObject(ij_rd, &object);
+         par_rd = (HYPRE_ParVector) object;
       }
 
       /* Compute A = diag(ld) * A * diag(rd) */
-      HYPRE_ParCSRMatrixDiagScale(parcsr_A, par_ld, par_rd);
+      hypre_ParCSRMatrixDiagScale(parcsr_A, par_ld, par_rd);
 
-      /* Print scaled system */
+      /* Print scaled matrix */
       if (print_system)
       {
-         hypre_ParCSRMatrixPrintIJ(parcsr_A, 0, 0, "IJ.out.A_scal");
-         HYPRE_ParVectorPrint(b, "IJ.out.b_scal");
+         hypre_ParCSRMatrixPrintIJ(parcsr_A, 0, 0, "IJ.out.Ascal");
          HYPRE_IJVectorPrint(ij_ld, "IJ.out.ld");
          HYPRE_IJVectorPrint(ij_rd, "IJ.out.rd");
       }
-      else if (print_system_binary)
-      {
-         hypre_ParCSRMatrixPrintBinaryIJ(parcsr_A, 0, 0, "IJ.out.A_scal");
-         HYPRE_ParVectorPrintBinaryIJ(b, "IJ.out.b_scal");
-         HYPRE_IJVectorPrintBinary(ij_ld, "IJ.out.ld");
-         HYPRE_IJVectorPrintBinary(ij_rd, "IJ.out.rd");
-      }
 
       /* Free memory */
       hypre_TFree(d_data, memory_location);
+      if (ij_rd)
+      {
+         HYPRE_IJVectorDestroy(ij_rd);
+      }
+      if (ij_ld)
+      {
+         HYPRE_IJVectorDestroy(ij_ld);
+      }
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("ParCSR scaling", comm);
+      hypre_PrintTiming("ParCSR scaling", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
    }
@@ -4495,7 +4335,7 @@ main( hypre_int argc,
       }
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("MatVec Test", comm);
+      hypre_PrintTiming("MatVec Test", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -4576,7 +4416,7 @@ main( hypre_int argc,
       HYPRE_ParCSRHybridSetup(amg_solver, parcsr_M, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -4586,7 +4426,7 @@ main( hypre_int argc,
       HYPRE_ParCSRHybridSolve(amg_solver, parcsr_A, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -4606,7 +4446,7 @@ main( hypre_int argc,
          HYPRE_ParCSRHybridSetup(amg_solver, parcsr_M, b, x);
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Setup phase times", comm);
+         hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -4616,7 +4456,7 @@ main( hypre_int argc,
          HYPRE_ParCSRHybridSolve(amg_solver, parcsr_A, b, x);
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Solve phase times", comm);
+         hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -4877,7 +4717,7 @@ main( hypre_int argc,
       hypre_GpuProfilingPopRange();
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -4905,7 +4745,7 @@ main( hypre_int argc,
       hypre_GpuProfilingPopRange();
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
       HYPRE_ANNOTATE_REGION_END("%s", "Run-1");
@@ -4943,7 +4783,7 @@ main( hypre_int argc,
          hypre_GpuProfilingPopRange();
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Setup phase times", comm);
+         hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -4964,7 +4804,7 @@ main( hypre_int argc,
          hypre_GpuProfilingPopRange();
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Solve phase times", comm);
+         hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -5158,7 +4998,7 @@ main( hypre_int argc,
       HYPRE_BoomerAMGSetup(amg_solver, parcsr_M, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -5168,7 +5008,7 @@ main( hypre_int argc,
       HYPRE_BoomerAMGSolve(amg_solver, parcsr_A, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -5197,7 +5037,7 @@ main( hypre_int argc,
 
       HYPRE_IJMatrixPrint(ij_A, "parasails.in");
 
-      HYPRE_ParaSailsCreate(comm, &pcg_precond);
+      HYPRE_ParaSailsCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
       HYPRE_ParaSailsSetParams(pcg_precond, 0., 0);
       HYPRE_ParaSailsSetFilter(pcg_precond, 0.);
       HYPRE_ParaSailsSetLogging(pcg_precond, ioutdat);
@@ -5227,7 +5067,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("PCG Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRPCGCreate(comm, &pcg_solver);
+      HYPRE_ParCSRPCGCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_PCGSetMaxIter(pcg_solver, max_iter);
       HYPRE_PCGSetTol(pcg_solver, tol);
       HYPRE_PCGSetTwoNorm(pcg_solver, 1);
@@ -5407,7 +5247,7 @@ main( hypre_int argc,
          /* use ParaSails preconditioner */
          if (myid == 0) { hypre_printf("Solver: ParaSails-PCG\n"); }
 
-         HYPRE_ParaSailsCreate(comm, &pcg_precond);
+         HYPRE_ParaSailsCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
          HYPRE_ParaSailsSetParams(pcg_precond, sai_threshold, max_levels);
          HYPRE_ParaSailsSetFilter(pcg_precond, sai_filter);
          HYPRE_ParaSailsSetLogging(pcg_precond, poutdat);
@@ -5616,7 +5456,7 @@ main( hypre_int argc,
          /* use Euclid preconditioning */
          if (myid == 0) { hypre_printf("Solver: Euclid-PCG\n"); }
 
-         HYPRE_EuclidCreate(comm, &pcg_precond);
+         HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
          /* note: There are three three methods of setting run-time
             parameters for Euclid: (see HYPRE_parcsr_ls.h); here
@@ -5763,7 +5603,7 @@ main( hypre_int argc,
                      (HYPRE_Vector) b, (HYPRE_Vector) x);
       hypre_GpuProfilingPopRange();
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -5774,7 +5614,7 @@ main( hypre_int argc,
                      (HYPRE_Vector)b, (HYPRE_Vector)x);
       hypre_GpuProfilingPopRange();
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
       HYPRE_ANNOTATE_REGION_END("%s", "Run-1");
@@ -5806,7 +5646,7 @@ main( hypre_int argc,
          hypre_GpuProfilingPopRange();
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Setup phase times", comm);
+         hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -5821,7 +5661,7 @@ main( hypre_int argc,
          hypre_GpuProfilingPopRange();
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Solve phase times", comm);
+         hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -5921,7 +5761,7 @@ main( hypre_int argc,
 
       if ( lobpcgGen )
       {
-         BuildParIsoLaplacian(comm, argc, argv, &parcsr_B);
+         BuildParIsoLaplacian(argc, argv, &parcsr_B);
 
          ierr = HYPRE_ParCSRMatrixGetLocalRange( parcsr_B,
                                                  &first_local_row, &last_local_row,
@@ -6051,7 +5891,7 @@ main( hypre_int argc,
          time_index = hypre_InitializeTiming("PCG Setup");
          hypre_BeginTiming(time_index);
 
-         HYPRE_ParCSRPCGCreate(comm, &pcg_solver);
+         HYPRE_ParCSRPCGCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
          HYPRE_PCGSetMaxIter(pcg_solver, pcgIterations);
          HYPRE_PCGSetTol(pcg_solver, pcgTol);
          HYPRE_PCGSetTwoNorm(pcg_solver, two_norm);
@@ -6145,7 +5985,7 @@ main( hypre_int argc,
             /* use ParaSails preconditioner */
             if (myid == 0) { hypre_printf("Solver: ParaSails-PCG\n"); }
 
-            HYPRE_ParaSailsCreate(comm, &pcg_precond);
+            HYPRE_ParaSailsCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
             HYPRE_ParaSailsSetParams(pcg_precond, sai_threshold, max_levels);
             HYPRE_ParaSailsSetFilter(pcg_precond, sai_filter);
             HYPRE_ParaSailsSetLogging(pcg_precond, poutdat);
@@ -6240,7 +6080,7 @@ main( hypre_int argc,
             /* use Euclid preconditioning */
             if (myid == 0) { hypre_printf("Solver: Euclid-PCG\n"); }
 
-            HYPRE_EuclidCreate(comm, &pcg_precond);
+            HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
             /* note: There are three three methods of setting run-time
              *               parameters for Euclid: (see HYPRE_parcsr_ls.h); here
@@ -6277,7 +6117,7 @@ main( hypre_int argc,
           *                     (HYPRE_Vector)b, (HYPRE_Vector)x); */
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Setup phase times", comm);
+         hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -6306,7 +6146,7 @@ main( hypre_int argc,
          if ( vFromFileFlag )
          {
             eigenvectors = mv_MultiVectorWrap( interpreter,
-                                               HYPRE_ParCSRMultiVectorRead(comm,
+                                               HYPRE_ParCSRMultiVectorRead(hypre_MPI_COMM_WORLD,
                                                                            interpreter,
                                                                            "vectors" ), 1);
             hypre_assert( eigenvectors != NULL );
@@ -6330,7 +6170,7 @@ main( hypre_int argc,
          if ( constrained )
          {
             constraints = mv_MultiVectorWrap( interpreter,
-                                              HYPRE_ParCSRMultiVectorRead(comm,
+                                              HYPRE_ParCSRMultiVectorRead(hypre_MPI_COMM_WORLD,
                                                                           interpreter,
                                                                           "vectors" ), 1);
             hypre_assert( constraints != NULL );
@@ -6344,7 +6184,7 @@ main( hypre_int argc,
          HYPRE_LOBPCGSolve(lobpcg_solver, constraints, eigenvectors, eigenvalues );
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Solve phase times", comm);
+         hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -6581,7 +6421,7 @@ main( hypre_int argc,
                hypre_printf("Solver: ParaSails-PCG\n");
             }
 
-            HYPRE_ParaSailsCreate(comm, &pcg_precond);
+            HYPRE_ParaSailsCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
             HYPRE_ParaSailsSetParams(pcg_precond, sai_threshold, max_levels);
             HYPRE_ParaSailsSetFilter(pcg_precond, sai_filter);
             HYPRE_ParaSailsSetLogging(pcg_precond, poutdat);
@@ -6683,7 +6523,7 @@ main( hypre_int argc,
                hypre_printf("Solver: Euclid-PCG\n");
             }
 
-            HYPRE_EuclidCreate(comm, &pcg_precond);
+            HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
             /* note: There are three three methods of setting run-time
              *       parameters for Euclid: (see HYPRE_parcsr_ls.h); here we'll
@@ -6723,14 +6563,14 @@ main( hypre_int argc,
                                (HYPRE_Vector)x);
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Setup phase times", comm);
+         hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
          if ( vFromFileFlag )
          {
             eigenvectors = mv_MultiVectorWrap( interpreter,
-                                               HYPRE_ParCSRMultiVectorRead(comm,
+                                               HYPRE_ParCSRMultiVectorRead(hypre_MPI_COMM_WORLD,
                                                                            interpreter,
                                                                            "vectors" ), 1);
             hypre_assert( eigenvectors != NULL );
@@ -6754,7 +6594,7 @@ main( hypre_int argc,
          if ( constrained )
          {
             constraints = mv_MultiVectorWrap( interpreter,
-                                              HYPRE_ParCSRMultiVectorRead(comm,
+                                              HYPRE_ParCSRMultiVectorRead(hypre_MPI_COMM_WORLD,
                                                                           interpreter,
                                                                           "vectors" ), 1);
             hypre_assert( constraints != NULL );
@@ -6768,7 +6608,7 @@ main( hypre_int argc,
          HYPRE_LOBPCGSolve(pcg_solver, constraints, eigenvectors, eigenvalues);
 
          hypre_EndTiming(time_index);
-         hypre_PrintTiming("Solve phase times", comm);
+         hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
          hypre_FinalizeTiming(time_index);
          hypre_ClearTiming();
 
@@ -6929,7 +6769,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("GMRES Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRGMRESCreate(comm, &pcg_solver);
+      HYPRE_ParCSRGMRESCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_GMRESSetKDim(pcg_solver, k_dim);
       HYPRE_GMRESSetMaxIter(pcg_solver, max_iter);
       HYPRE_GMRESSetTol(pcg_solver, tol);
@@ -6937,10 +6777,6 @@ main( hypre_int argc,
       HYPRE_GMRESSetLogging(pcg_solver, 1);
       HYPRE_GMRESSetPrintLevel(pcg_solver, ioutdat);
       HYPRE_GMRESSetRelChange(pcg_solver, rel_change);
-      if (xstar)
-      {
-         HYPRE_GMRESSetRefSolution(pcg_solver, (HYPRE_Vector) xstar);
-      }
 
       if (solver_id == 3 || solver_id == 91)
       {
@@ -7163,7 +6999,7 @@ main( hypre_int argc,
          /* use PILUT as preconditioner */
          if (myid == 0) { hypre_printf("Solver: PILUT-GMRES\n"); }
 
-         ierr = HYPRE_ParCSRPilutCreate( comm, &pcg_precond );
+         ierr = HYPRE_ParCSRPilutCreate( hypre_MPI_COMM_WORLD, &pcg_precond );
          if (ierr)
          {
             hypre_printf("Error in ParPilutCreate\n");
@@ -7339,7 +7175,7 @@ main( hypre_int argc,
          /* use ParaSails preconditioner */
          if (myid == 0) { hypre_printf("Solver: ParaSails-GMRES\n"); }
 
-         HYPRE_ParaSailsCreate(comm, &pcg_precond);
+         HYPRE_ParaSailsCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
          HYPRE_ParaSailsSetParams(pcg_precond, sai_threshold, max_levels);
          HYPRE_ParaSailsSetFilter(pcg_precond, sai_filter);
          HYPRE_ParaSailsSetLogging(pcg_precond, poutdat);
@@ -7355,7 +7191,7 @@ main( hypre_int argc,
          /* use Euclid preconditioning */
          if (myid == 0) { hypre_printf("Solver: Euclid-GMRES\n"); }
 
-         HYPRE_EuclidCreate(comm, &pcg_precond);
+         HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
          if (eu_level > -1) { HYPRE_EuclidSetLevel(pcg_precond, eu_level); }
          if (eu_ilut) { HYPRE_EuclidSetILUT(pcg_precond, eu_ilut); }
@@ -7428,7 +7264,7 @@ main( hypre_int argc,
       HYPRE_GMRESSetup(pcg_solver, (HYPRE_Matrix)parcsr_M, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -7438,7 +7274,7 @@ main( hypre_int argc,
       HYPRE_GMRESSolve(pcg_solver, (HYPRE_Matrix)parcsr_A, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -7559,7 +7395,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("LGMRES Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRLGMRESCreate(comm, &pcg_solver);
+      HYPRE_ParCSRLGMRESCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_LGMRESSetKDim(pcg_solver, k_dim);
       HYPRE_LGMRESSetAugDim(pcg_solver, aug_dim);
       HYPRE_LGMRESSetMaxIter(pcg_solver, max_iter);
@@ -7741,7 +7577,7 @@ main( hypre_int argc,
       (pcg_solver, (HYPRE_Matrix)parcsr_M, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -7752,7 +7588,7 @@ main( hypre_int argc,
       (pcg_solver, (HYPRE_Matrix)parcsr_A, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -7786,7 +7622,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("FlexGMRES Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRFlexGMRESCreate(comm, &pcg_solver);
+      HYPRE_ParCSRFlexGMRESCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_FlexGMRESSetKDim(pcg_solver, k_dim);
       HYPRE_FlexGMRESSetMaxIter(pcg_solver, max_iter);
       HYPRE_FlexGMRESSetTol(pcg_solver, tol);
@@ -8052,7 +7888,7 @@ main( hypre_int argc,
          /* use Euclid preconditioning */
          if (myid == 0) { hypre_printf("Solver: Euclid-FlexGMRES\n"); }
 
-         HYPRE_EuclidCreate(comm, &pcg_precond);
+         HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
          if (eu_level > -1) { HYPRE_EuclidSetLevel(pcg_precond, eu_level); }
          if (eu_ilut) { HYPRE_EuclidSetILUT(pcg_precond, eu_ilut); }
@@ -8140,7 +7976,7 @@ main( hypre_int argc,
       (pcg_solver, (HYPRE_Matrix)parcsr_M, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -8151,7 +7987,7 @@ main( hypre_int argc,
       (pcg_solver, (HYPRE_Matrix)parcsr_A, (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -8223,7 +8059,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("BiCGSTAB Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRBiCGSTABCreate(comm, &pcg_solver);
+      HYPRE_ParCSRBiCGSTABCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_BiCGSTABSetMaxIter(pcg_solver, max_iter);
       HYPRE_BiCGSTABSetTol(pcg_solver, tol);
       HYPRE_BiCGSTABSetAbsoluteTol(pcg_solver, atol);
@@ -8393,7 +8229,7 @@ main( hypre_int argc,
          /* use PILUT as preconditioner */
          if (myid == 0) { hypre_printf("Solver: PILUT-BiCGSTAB\n"); }
 
-         ierr = HYPRE_ParCSRPilutCreate( comm, &pcg_precond );
+         ierr = HYPRE_ParCSRPilutCreate( hypre_MPI_COMM_WORLD, &pcg_precond );
          if (ierr)
          {
             hypre_printf("Error in ParPilutCreate\n");
@@ -8419,7 +8255,7 @@ main( hypre_int argc,
          /* use Euclid preconditioning */
          if (myid == 0) { hypre_printf("Solver: Euclid-BICGSTAB\n"); }
 
-         HYPRE_EuclidCreate(comm, &pcg_precond);
+         HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
          /* note: There are three three methods of setting run-time
             parameters for Euclid: (see HYPRE_parcsr_ls.h); here
@@ -8543,7 +8379,7 @@ main( hypre_int argc,
                           (HYPRE_Vector) b, (HYPRE_Vector) x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -8554,7 +8390,7 @@ main( hypre_int argc,
                           (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
       HYPRE_ANNOTATE_REGION_END("%s", "Run-1");
@@ -8647,7 +8483,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("COGMRES Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRCOGMRESCreate(comm, &pcg_solver);
+      HYPRE_ParCSRCOGMRESCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_COGMRESSetKDim(pcg_solver, k_dim);
       HYPRE_COGMRESSetUnroll(pcg_solver, unroll);
       HYPRE_COGMRESSetCGS(pcg_solver, cgs);
@@ -8820,7 +8656,7 @@ main( hypre_int argc,
          /* use Euclid preconditioning */
          if (myid == 0) { hypre_printf("Solver: Euclid-BICGSTAB\n"); }
 
-         HYPRE_EuclidCreate(comm, &pcg_precond);
+         HYPRE_EuclidCreate(hypre_MPI_COMM_WORLD, &pcg_precond);
 
          /* note: There are three three methods of setting run-time
             parameters for Euclid: (see HYPRE_parcsr_ls.h); here
@@ -8929,7 +8765,7 @@ main( hypre_int argc,
                          (HYPRE_Vector) b, (HYPRE_Vector) x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -8940,7 +8776,7 @@ main( hypre_int argc,
                          (HYPRE_Vector)b, (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
       HYPRE_ANNOTATE_REGION_END("%s", "Run-1");
@@ -9028,7 +8864,7 @@ main( hypre_int argc,
       time_index = hypre_InitializeTiming("CGNR Setup");
       hypre_BeginTiming(time_index);
 
-      HYPRE_ParCSRCGNRCreate(comm, &pcg_solver);
+      HYPRE_ParCSRCGNRCreate(hypre_MPI_COMM_WORLD, &pcg_solver);
       HYPRE_CGNRSetMaxIter(pcg_solver, max_iter);
       HYPRE_CGNRSetTol(pcg_solver, tol);
       HYPRE_CGNRSetLogging(pcg_solver, ioutdat);
@@ -9173,7 +9009,7 @@ main( hypre_int argc,
                       (HYPRE_Vector) b, (HYPRE_Vector) x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -9184,7 +9020,7 @@ main( hypre_int argc,
                       (HYPRE_Vector)x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
       HYPRE_ANNOTATE_REGION_END("%s", "Run-1");
@@ -9346,7 +9182,7 @@ main( hypre_int argc,
       HYPRE_MGRSetup(mgr_solver, parcsr_M, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -9357,7 +9193,7 @@ main( hypre_int argc,
       HYPRE_MGRSolve(mgr_solver, parcsr_A, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -9460,7 +9296,7 @@ main( hypre_int argc,
       HYPRE_ILUSetup(ilu_solver, parcsr_M, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Setup phase times", comm);
+      hypre_PrintTiming("Setup phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -9471,7 +9307,7 @@ main( hypre_int argc,
       HYPRE_ILUSolve(ilu_solver, parcsr_A, b, x);
 
       hypre_EndTiming(time_index);
-      hypre_PrintTiming("Solve phase times", comm);
+      hypre_PrintTiming("Solve phase times", hypre_MPI_COMM_WORLD);
       hypre_FinalizeTiming(time_index);
       hypre_ClearTiming();
 
@@ -9549,31 +9385,6 @@ final:
       HYPRE_IJMatrixDestroy(ij_M);
    }
 
-   /* Free right scaling vector */
-   if (ij_rd)
-   {
-      HYPRE_IJVectorDestroy(ij_rd);
-   }
-   else if (par_rd)
-   {
-      if (par_ld && par_ld == par_rd)
-      {
-         par_ld = NULL;
-      }
-      HYPRE_ParVectorDestroy(par_rd);
-   }
-
-   /* Free left scaling vector */
-   if (ij_ld)
-   {
-      HYPRE_IJVectorDestroy(ij_ld);
-      par_ld = NULL;
-   }
-   else if (par_ld)
-   {
-      HYPRE_ParVectorDestroy(par_ld);
-   }
-
    /* for build_rhs_type = 1, 6 or 7, we did not create ij_b  - just b*/
    if (build_rhs_type == 1 || build_rhs_type == 6 || build_rhs_type == 7)
    {
@@ -9687,11 +9498,10 @@ final:
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParFromFile( MPI_Comm             comm,
-                  HYPRE_Int            argc,
+BuildParFromFile( HYPRE_Int                  argc,
                   char                *argv[],
-                  HYPRE_Int            arg_index,
-                  HYPRE_ParCSRMatrix  *A_ptr )
+                  HYPRE_Int                  arg_index,
+                  HYPRE_ParCSRMatrix  *A_ptr     )
 {
    char               *filename;
 
@@ -9703,7 +9513,7 @@ BuildParFromFile( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Parse command line
@@ -9732,7 +9542,7 @@ BuildParFromFile( MPI_Comm             comm,
     * Generate the matrix
     *-----------------------------------------------------------*/
 
-   HYPRE_ParCSRMatrixRead(comm, filename, &A);
+   HYPRE_ParCSRMatrixRead(hypre_MPI_COMM_WORLD, filename, &A);
 
    *A_ptr = A;
 
@@ -9748,21 +9558,22 @@ BuildParFromFile( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-ReadParVectorFromFile( MPI_Comm             comm,
-                       HYPRE_Int            argc,
+ReadParVectorFromFile( HYPRE_Int            argc,
                        char                *argv[],
                        HYPRE_Int            arg_index,
-                       HYPRE_ParVector      *b_ptr )
+                       HYPRE_ParVector      *b_ptr     )
 {
-   char           *filename;
+   char               *filename;
+
    HYPRE_ParVector b;
-   HYPRE_Int       myid;
+
+   HYPRE_Int                 myid;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Parse command line
@@ -9791,50 +9602,52 @@ ReadParVectorFromFile( MPI_Comm             comm,
     * Generate the matrix
     *-----------------------------------------------------------*/
 
-   HYPRE_ParVectorRead(comm, filename, &b);
+   HYPRE_ParVectorRead(hypre_MPI_COMM_WORLD, filename, &b);
 
    *b_ptr = b;
 
    return (0);
 }
 
+
+
+
 /*----------------------------------------------------------------------
  * Build standard 7-point laplacian in 3D with grid and anisotropy.
  * Parameters given in command line.
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParLaplacian( MPI_Comm             comm,
-                   HYPRE_Int            argc,
+BuildParLaplacian( HYPRE_Int                  argc,
                    char                *argv[],
-                   HYPRE_Int            arg_index,
+                   HYPRE_Int                  arg_index,
                    HYPRE_ParCSRMatrix  *A_ptr     )
 {
-   HYPRE_BigInt        nx, ny, nz;
-   HYPRE_Int           P, Q, R;
+   HYPRE_BigInt              nx, ny, nz;
+   HYPRE_Int                 P, Q, R;
    HYPRE_Real          cx, cy, cz;
 
    HYPRE_ParCSRMatrix  A;
 
-   HYPRE_Int           num_procs, myid;
-   HYPRE_Int           p, q, r;
-   HYPRE_Int           num_fun = 1;
+   HYPRE_Int                 num_procs, myid;
+   HYPRE_Int                 p, q, r;
+   HYPRE_Int                 num_fun = 1;
    HYPRE_Real         *values;
    HYPRE_Real         *mtrx;
 
    HYPRE_Real          ep = .1;
 
-   HYPRE_Int           system_vcoef = 0;
-   HYPRE_Int           sys_opt = 0;
-   HYPRE_Int           vcoef_opt = 0;
+   HYPRE_Int                 system_vcoef = 0;
+   HYPRE_Int                 sys_opt = 0;
+   HYPRE_Int                 vcoef_opt = 0;
 
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -9967,7 +9780,7 @@ BuildParLaplacian( MPI_Comm             comm,
    }
 
    if (num_fun == 1)
-      A = (HYPRE_ParCSRMatrix) GenerateLaplacian(comm,
+      A = (HYPRE_ParCSRMatrix) GenerateLaplacian(hypre_MPI_COMM_WORLD,
                                                  nx, ny, nz, P, Q, R, p, q, r, values);
    else
    {
@@ -10112,7 +9925,7 @@ BuildParLaplacian( MPI_Comm             comm,
 
       if (!system_vcoef)
       {
-         A = (HYPRE_ParCSRMatrix) GenerateSysLaplacian(comm,
+         A = (HYPRE_ParCSRMatrix) GenerateSysLaplacian(hypre_MPI_COMM_WORLD,
                                                        nx, ny, nz, P, Q,
                                                        R, p, q, r, num_fun, mtrx, values);
       }
@@ -10248,7 +10061,7 @@ BuildParLaplacian( MPI_Comm             comm,
             SetSysVcoefValues(num_fun, nx, ny, nz, 1.5, .04, 1, 8, mtrx_values);
          }
 
-         A = (HYPRE_ParCSRMatrix) GenerateSysLaplacianVCoef(comm,
+         A = (HYPRE_ParCSRMatrix) GenerateSysLaplacianVCoef(hypre_MPI_COMM_WORLD,
                                                             nx, ny, nz, P, Q,
                                                             R, p, q, r, num_fun, mtrx, mtrx_values);
 
@@ -10286,10 +10099,9 @@ static inline HYPRE_Int sign_double(HYPRE_Real a)
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParDifConv( MPI_Comm             comm,
-                 HYPRE_Int            argc,
+BuildParDifConv( HYPRE_Int                  argc,
                  char                *argv[],
-                 HYPRE_Int            arg_index,
+                 HYPRE_Int                  arg_index,
                  HYPRE_ParCSRMatrix  *A_ptr)
 {
    HYPRE_BigInt        nx, ny, nz;
@@ -10309,8 +10121,8 @@ BuildParDifConv( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -10561,7 +10373,7 @@ BuildParDifConv( MPI_Comm             comm,
       }
    }
 
-   A = (HYPRE_ParCSRMatrix) GenerateDifConv(comm,
+   A = (HYPRE_ParCSRMatrix) GenerateDifConv(hypre_MPI_COMM_WORLD,
                                             nx, ny, nz, P, Q, R, p, q, r, values);
 
    hypre_TFree(values, HYPRE_MEMORY_HOST);
@@ -10579,28 +10391,27 @@ BuildParDifConv( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParFromOneFile( MPI_Comm             comm,
-                     HYPRE_Int            argc,
+BuildParFromOneFile( HYPRE_Int                  argc,
                      char                *argv[],
-                     HYPRE_Int            arg_index,
-                     HYPRE_Int            num_functions,
-                     HYPRE_ParCSRMatrix  *A_ptr )
+                     HYPRE_Int                  arg_index,
+                     HYPRE_Int                  num_functions,
+                     HYPRE_ParCSRMatrix  *A_ptr     )
 {
    char               *filename;
 
-   HYPRE_CSRMatrix     A_CSR = NULL;
+   HYPRE_CSRMatrix  A_CSR = NULL;
    HYPRE_BigInt       *row_part = NULL;
    HYPRE_BigInt       *col_part = NULL;
 
-   HYPRE_Int           myid, numprocs;
-   HYPRE_Int           i, rest, size, num_nodes, num_dofs;
+   HYPRE_Int          myid, numprocs;
+   HYPRE_Int          i, rest, size, num_nodes, num_dofs;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid);
-   hypre_MPI_Comm_size(comm, &numprocs);
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &numprocs );
 
    /*-----------------------------------------------------------
     * Parse command line
@@ -10655,7 +10466,7 @@ BuildParFromOneFile( MPI_Comm             comm,
       }
    }
 
-   HYPRE_CSRMatrixToParCSRMatrix(comm, A_CSR, row_part, col_part, A_ptr);
+   HYPRE_CSRMatrixToParCSRMatrix(hypre_MPI_COMM_WORLD, A_CSR, row_part, col_part, A_ptr);
 
    if (myid == 0)
    {
@@ -10671,10 +10482,9 @@ BuildParFromOneFile( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildSolParFromOneFile( MPI_Comm             comm,
-                        HYPRE_Int            argc,
+BuildSolParFromOneFile( HYPRE_Int                  argc,
                         char                *argv[],
-                        HYPRE_Int            arg_index,
+                        HYPRE_Int                  arg_index,
                         HYPRE_ParCSRMatrix   parcsr_A,
                         HYPRE_ParVector     *x_ptr     )
 {
@@ -10688,7 +10498,7 @@ BuildSolParFromOneFile( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
    partitioning = hypre_ParCSRMatrixColStarts(parcsr_A);
 
    /*-----------------------------------------------------------
@@ -10706,14 +10516,20 @@ BuildSolParFromOneFile( MPI_Comm             comm,
    }
 
    /*-----------------------------------------------------------
-    * Read the initial guess from file and create parallel vector
+    * Print driver parameters
     *-----------------------------------------------------------*/
 
    if (myid == 0)
    {
+      hypre_printf("  x0 FromFile: %s\n", filename);
+
+      /*-----------------------------------------------------------
+       * Generate the matrix
+       *-----------------------------------------------------------*/
+
       x_CSR = HYPRE_VectorRead(filename);
    }
-   HYPRE_VectorToParVector(comm, x_CSR, partitioning, &x);
+   HYPRE_VectorToParVector(hypre_MPI_COMM_WORLD, x_CSR, partitioning, &x);
 
    *x_ptr = x;
 
@@ -10722,16 +10538,18 @@ BuildSolParFromOneFile( MPI_Comm             comm,
    return (0);
 }
 
+
+
 /*----------------------------------------------------------------------
  * Build Function array from files on different processors
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildFuncTagsFromFiles( HYPRE_Int            argc,
-                        char                *argv[],
-                        HYPRE_Int            arg_index,
-                        HYPRE_ParCSRMatrix   parcsr_A,
-                        HYPRE_Int          **dof_func_ptr )
+BuildFuncsFromFiles( HYPRE_Int            argc,
+                     char                *argv[],
+                     HYPRE_Int            arg_index,
+                     HYPRE_ParCSRMatrix   parcsr_A,
+                     HYPRE_Int          **dof_func_ptr )
 {
    HYPRE_UNUSED_VAR(argc);
    HYPRE_UNUSED_VAR(argv);
@@ -10752,12 +10570,11 @@ BuildFuncTagsFromFiles( HYPRE_Int            argc,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildFuncTagsFromOneFile( MPI_Comm             comm,
-                          HYPRE_Int            argc,
-                          char                *argv[],
-                          HYPRE_Int            arg_index,
-                          HYPRE_ParCSRMatrix   parcsr_A,
-                          HYPRE_Int          **dof_func_ptr )
+BuildFuncsFromOneFile( HYPRE_Int            argc,
+                       char                *argv[],
+                       HYPRE_Int            arg_index,
+                       HYPRE_ParCSRMatrix   parcsr_A,
+                       HYPRE_Int          **dof_func_ptr )
 {
    char                 *filename;
 
@@ -10772,13 +10589,15 @@ BuildFuncTagsFromOneFile( MPI_Comm             comm,
    HYPRE_Int             global_size;
    hypre_MPI_Request    *requests;
    hypre_MPI_Status     *status, status0;
+   MPI_Comm              comm;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid);
-   hypre_MPI_Comm_size(comm, &num_procs);
+   comm = hypre_MPI_COMM_WORLD;
+   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_size(comm, &num_procs );
 
    /*-----------------------------------------------------------
     * Parse command line
@@ -10856,129 +10675,15 @@ BuildFuncTagsFromOneFile( MPI_Comm             comm,
    return (0);
 }
 
-/*----------------------------------------------------------------------
- * Build interleaved function array (0,1,2,0,1,2,...) for local data
- *----------------------------------------------------------------------*/
-
-HYPRE_Int
-BuildFuncTagsInterleaved( HYPRE_Int              local_size,
-                          HYPRE_Int              num_functions,
-                          HYPRE_MemoryLocation   memory_location,
-                          HYPRE_Int            **dof_func_ptr )
-{
-   HYPRE_Int *dof_func_h, *dof_func;
-   HYPRE_Int  i;
-
-   /* Allocate array */
-   dof_func_h = hypre_CTAlloc(HYPRE_Int, local_size, HYPRE_MEMORY_HOST);
-
-   /* Fill array with interleaved function numbers (0,1,2,...,0,1,2,...) */
-   for (i = 0; i < local_size; i++)
-   {
-      dof_func_h[i] = i % num_functions;
-   }
-
-   /* Copy to device */
-   if (memory_location == HYPRE_MEMORY_DEVICE)
-   {
-      dof_func = hypre_CTAlloc(HYPRE_Int, local_size, memory_location);
-      hypre_TMemcpy(dof_func, dof_func_h, HYPRE_Int, local_size,
-                    memory_location, HYPRE_MEMORY_HOST);
-
-      /* Free host memory */
-      hypre_TFree(dof_func_h, HYPRE_MEMORY_HOST);
-   }
-   else
-   {
-      dof_func = dof_func_h;
-   }
-
-   *dof_func_ptr = dof_func;
-
-   return (0);
-}
-
-/*----------------------------------------------------------------------
- * Build contiguous function array (0,0,0,...,1,1,1,...) for local data
- *----------------------------------------------------------------------*/
-
-HYPRE_Int
-BuildFuncTagsContiguous( HYPRE_Int              local_size,
-                         HYPRE_Int              num_functions,
-                         HYPRE_MemoryLocation   memory_location,
-                         HYPRE_Int            **dof_func_ptr )
-{
-   HYPRE_Int *dof_func_h, *dof_func;
-   HYPRE_Int  i;
-   HYPRE_Int  block_size, remainder;
-   HYPRE_Int  current_func, count;
-
-   /* Allocate array on host initially */
-   dof_func_h = hypre_CTAlloc(HYPRE_Int, local_size, HYPRE_MEMORY_HOST);
-
-   /* Calculate block size for each function */
-   block_size = local_size / num_functions;
-   remainder  = local_size % num_functions;
-
-   /* Fill array with contiguous function numbers (0,0,0,...,1,1,1,...) */
-   current_func = 0;
-   count = 0;
-
-   for (i = 0; i < local_size; i++)
-   {
-      dof_func_h[i] = current_func;
-      count++;
-
-      /* Move to next function when we've filled the current block */
-      if (current_func < remainder)
-      {
-         /* First 'remainder' functions get one extra element */
-         if (count >= block_size + 1)
-         {
-            current_func++;
-            count = 0;
-         }
-      }
-      else
-      {
-         if (count >= block_size)
-         {
-            current_func++;
-            count = 0;
-         }
-      }
-   }
-
-   /* Copy to device if needed */
-   if (memory_location == HYPRE_MEMORY_DEVICE)
-   {
-      dof_func = hypre_CTAlloc(HYPRE_Int, local_size, memory_location);
-      hypre_TMemcpy(dof_func, dof_func_h, HYPRE_Int, local_size,
-                    memory_location, HYPRE_MEMORY_HOST);
-
-      /* Free host memory */
-      hypre_TFree(dof_func_h, HYPRE_MEMORY_HOST);
-   }
-   else
-   {
-      dof_func = dof_func_h;
-   }
-
-   *dof_func_ptr = dof_func;
-
-   return (0);
-}
-
 /*----------------------------------------------------------------------
  * Build Rhs from one file on Proc. 0. Distributes vector across processors
  * giving each about using the distribution of the matrix A.
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildRhsParFromOneFile( MPI_Comm             comm,
-                        HYPRE_Int            argc,
+BuildRhsParFromOneFile( HYPRE_Int                  argc,
                         char                *argv[],
-                        HYPRE_Int            arg_index,
+                        HYPRE_Int                  arg_index,
                         HYPRE_ParCSRMatrix   parcsr_A,
                         HYPRE_ParVector     *b_ptr     )
 {
@@ -10992,7 +10697,7 @@ BuildRhsParFromOneFile( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
    partitioning = hypre_ParCSRMatrixRowStarts(parcsr_A);
 
    /*-----------------------------------------------------------
@@ -11010,14 +10715,20 @@ BuildRhsParFromOneFile( MPI_Comm             comm,
    }
 
    /*-----------------------------------------------------------
-    * Read the vector from file and create parallel vector
+    * Print driver parameters
     *-----------------------------------------------------------*/
 
    if (myid == 0)
    {
+      hypre_printf("  Rhs FromFile: %s\n", filename);
+
+      /*-----------------------------------------------------------
+       * Generate the matrix
+       *-----------------------------------------------------------*/
+
       b_CSR = HYPRE_VectorRead(filename);
    }
-   HYPRE_VectorToParVector(comm, b_CSR, partitioning, &b);
+   HYPRE_VectorToParVector(hypre_MPI_COMM_WORLD, b_CSR, partitioning, &b);
 
    *b_ptr = b;
 
@@ -11032,8 +10743,7 @@ BuildRhsParFromOneFile( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildBigArrayFromOneFile( MPI_Comm             comm,
-                          HYPRE_Int            argc,
+BuildBigArrayFromOneFile( HYPRE_Int            argc,
                           char                *argv[],
                           const char          *array_name,
                           HYPRE_Int            arg_index,
@@ -11041,6 +10751,7 @@ BuildBigArrayFromOneFile( MPI_Comm             comm,
                           HYPRE_Int           *size,
                           HYPRE_BigInt       **array_ptr )
 {
+   MPI_Comm        comm = hypre_MPI_COMM_WORLD;
    char           *filename = NULL;
    FILE           *fp;
    HYPRE_Int       myid;
@@ -11178,27 +10889,26 @@ BuildBigArrayFromOneFile( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParLaplacian9pt( MPI_Comm             comm,
-                      HYPRE_Int            argc,
+BuildParLaplacian9pt( HYPRE_Int            argc,
                       char                *argv[],
                       HYPRE_Int            arg_index,
                       HYPRE_ParCSRMatrix  *A_ptr     )
 {
-   HYPRE_BigInt        nx, ny;
-   HYPRE_Int           P, Q;
+   HYPRE_BigInt              nx, ny;
+   HYPRE_Int                 P, Q;
 
    HYPRE_ParCSRMatrix  A;
 
-   HYPRE_Int           num_procs, myid;
-   HYPRE_Int           p, q;
+   HYPRE_Int                 num_procs, myid;
+   HYPRE_Int                 p, q;
    HYPRE_Real         *values;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs );
-   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11285,7 +10995,7 @@ BuildParLaplacian9pt( MPI_Comm             comm,
       values[0] += 4.0;
    }
 
-   A = (HYPRE_ParCSRMatrix) GenerateLaplacian9pt(comm,
+   A = (HYPRE_ParCSRMatrix) GenerateLaplacian9pt(hypre_MPI_COMM_WORLD,
                                                  nx, ny, P, Q, p, q, values);
 
    hypre_TFree(values, HYPRE_MEMORY_HOST);
@@ -11301,27 +11011,26 @@ BuildParLaplacian9pt( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParLaplacian27pt( MPI_Comm             comm,
-                       HYPRE_Int            argc,
+BuildParLaplacian27pt( HYPRE_Int            argc,
                        char                *argv[],
                        HYPRE_Int            arg_index,
                        HYPRE_ParCSRMatrix  *A_ptr     )
 {
-   HYPRE_BigInt        nx, ny, nz;
-   HYPRE_Int           P, Q, R;
+   HYPRE_BigInt              nx, ny, nz;
+   HYPRE_Int                 P, Q, R;
 
    HYPRE_ParCSRMatrix  A;
 
-   HYPRE_Int           num_procs, myid;
-   HYPRE_Int           p, q, r;
+   HYPRE_Int                 num_procs, myid;
+   HYPRE_Int                 p, q, r;
    HYPRE_Real         *values;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs );
-   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11408,7 +11117,7 @@ BuildParLaplacian27pt( MPI_Comm             comm,
    }
    values[1] = -1.;
 
-   A = (HYPRE_ParCSRMatrix) GenerateLaplacian27pt(comm,
+   A = (HYPRE_ParCSRMatrix) GenerateLaplacian27pt(hypre_MPI_COMM_WORLD,
                                                   nx, ny, nz, P, Q, R, p, q, r, values);
 
    hypre_TFree(values, HYPRE_MEMORY_HOST);
@@ -11424,8 +11133,7 @@ BuildParLaplacian27pt( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParLaplacian125pt( MPI_Comm             comm,
-                        HYPRE_Int            argc,
+BuildParLaplacian125pt( HYPRE_Int            argc,
                         char                *argv[],
                         HYPRE_Int            arg_index,
                         HYPRE_ParCSRMatrix  *A_ptr     )
@@ -11443,8 +11151,8 @@ BuildParLaplacian125pt( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs );
-   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11531,7 +11239,7 @@ BuildParLaplacian125pt( MPI_Comm             comm,
    }
    values[1] = -1.;
 
-   B = (HYPRE_ParCSRMatrix) GenerateLaplacian27pt(comm,
+   B = (HYPRE_ParCSRMatrix) GenerateLaplacian27pt(hypre_MPI_COMM_WORLD,
                                                   nx, ny, nz, P, Q, R, p, q, r, values);
    A = (HYPRE_ParCSRMatrix) hypre_ParCSRMatMat(B, B);
 
@@ -11549,8 +11257,7 @@ BuildParLaplacian125pt( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParRotate7pt( MPI_Comm             comm,
-                   HYPRE_Int            argc,
+BuildParRotate7pt( HYPRE_Int            argc,
                    char                *argv[],
                    HYPRE_Int            arg_index,
                    HYPRE_ParCSRMatrix  *A_ptr     )
@@ -11568,8 +11275,8 @@ BuildParRotate7pt( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs );
-   hypre_MPI_Comm_rank(comm, &myid );
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11649,7 +11356,7 @@ BuildParRotate7pt( MPI_Comm             comm,
     * Generate the matrix
     *-----------------------------------------------------------*/
 
-   A = (HYPRE_ParCSRMatrix) GenerateRotate7pt(comm,
+   A = (HYPRE_ParCSRMatrix) GenerateRotate7pt(hypre_MPI_COMM_WORLD,
                                               nx, ny, P, Q, p, q, alpha, eps);
 
    *A_ptr = A;
@@ -11664,21 +11371,21 @@ BuildParRotate7pt( MPI_Comm             comm,
  *  d(x,y,z) ux + e(x,y,z) uy + f(x,y,z) uz + g(x,y,z) u
  *
  *  functions a,b,c,d,e,f,g need to be defined inside par_vardifconv.c
+ *
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParVarDifConv( MPI_Comm             comm,
-                    HYPRE_Int            argc,
+BuildParVarDifConv( HYPRE_Int            argc,
                     char                *argv[],
                     HYPRE_Int            arg_index,
                     HYPRE_ParCSRMatrix  *A_ptr,
-                    HYPRE_ParVector     *rhs_ptr )
+                    HYPRE_ParVector     *rhs_ptr     )
 {
-   HYPRE_BigInt        nx, ny, nz;
-   HYPRE_Int           P, Q, R;
+   HYPRE_BigInt              nx, ny, nz;
+   HYPRE_Int                 P, Q, R;
 
    HYPRE_ParCSRMatrix  A;
-   HYPRE_ParVector     rhs;
+   HYPRE_ParVector  rhs;
 
    HYPRE_Int           num_procs, myid;
    HYPRE_Int           p, q, r;
@@ -11689,8 +11396,8 @@ BuildParVarDifConv( MPI_Comm             comm,
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11780,12 +11487,12 @@ BuildParVarDifConv( MPI_Comm             comm,
 
    if (0 == type)
    {
-      A = (HYPRE_ParCSRMatrix) GenerateVarDifConv(comm,
+      A = (HYPRE_ParCSRMatrix) GenerateVarDifConv(hypre_MPI_COMM_WORLD,
                                                   nx, ny, nz, P, Q, R, p, q, r, eps, &rhs);
    }
    else
    {
-      A = (HYPRE_ParCSRMatrix) GenerateRSVarDifConv(comm,
+      A = (HYPRE_ParCSRMatrix) GenerateRSVarDifConv(hypre_MPI_COMM_WORLD,
                                                     nx, ny, nz, P, Q, R, p, q, r, eps, &rhs,
                                                     type);
    }
@@ -11833,12 +11540,11 @@ HYPRE_Int SetSysVcoefValues(HYPRE_Int num_fun, HYPRE_BigInt nx, HYPRE_BigInt ny,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParCoordinates( MPI_Comm             comm,
-                     HYPRE_Int            argc,
+BuildParCoordinates( HYPRE_Int            argc,
                      char                *argv[],
                      HYPRE_Int            arg_index,
                      HYPRE_Int           *coorddim_ptr,
-                     float              **coord_ptr )
+                     float              **coord_ptr     )
 {
    HYPRE_BigInt              nx, ny, nz;
    HYPRE_Int                 P, Q, R;
@@ -11847,14 +11553,14 @@ BuildParCoordinates( MPI_Comm             comm,
    HYPRE_Int                 p, q, r;
 
    HYPRE_Int                 coorddim;
-   float                    *coordinates;
+   float               *coordinates;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -11910,7 +11616,8 @@ BuildParCoordinates( MPI_Comm             comm,
 
    if (coorddim > 0)
    {
-      coordinates = hypre_GenerateCoordinates(comm, nx, ny, nz, P, Q, R, p, q, r, coorddim);
+      coordinates = hypre_GenerateCoordinates(hypre_MPI_COMM_WORLD,
+                                              nx, ny, nz, P, Q, R, p, q, r, coorddim);
    }
    else
    {
@@ -11930,31 +11637,28 @@ BuildParCoordinates( MPI_Comm             comm,
  *----------------------------------------------------------------------*/
 
 HYPRE_Int
-BuildParIsoLaplacian( MPI_Comm             comm,
-                      HYPRE_Int            argc,
-                      char               **argv,
-                      HYPRE_ParCSRMatrix  *A_ptr )
+BuildParIsoLaplacian( HYPRE_Int argc, char** argv, HYPRE_ParCSRMatrix *A_ptr )
 {
 
-   HYPRE_BigInt        nx, ny, nz;
+   HYPRE_BigInt              nx, ny, nz;
    HYPRE_Real          cx, cy, cz;
 
-   HYPRE_Int           P, Q, R;
+   HYPRE_Int                 P, Q, R;
 
    HYPRE_ParCSRMatrix  A;
 
-   HYPRE_Int           num_procs, myid;
-   HYPRE_Int           p, q, r;
+   HYPRE_Int                 num_procs, myid;
+   HYPRE_Int                 p, q, r;
    HYPRE_Real         *values;
 
-   HYPRE_Int           arg_index;
+   HYPRE_Int arg_index;
 
    /*-----------------------------------------------------------
     * Initialize some stuff
     *-----------------------------------------------------------*/
 
-   hypre_MPI_Comm_size(comm, &num_procs);
-   hypre_MPI_Comm_rank(comm, &myid);
+   hypre_MPI_Comm_size(hypre_MPI_COMM_WORLD, &num_procs );
+   hypre_MPI_Comm_rank(hypre_MPI_COMM_WORLD, &myid );
 
    /*-----------------------------------------------------------
     * Set defaults
@@ -12034,7 +11738,8 @@ BuildParIsoLaplacian( MPI_Comm             comm,
       values[0] += 2.0 * cz;
    }
 
-   A = (HYPRE_ParCSRMatrix) GenerateLaplacian(comm, nx, ny, nz, P, Q, R, p, q, r, values);
+   A = (HYPRE_ParCSRMatrix) GenerateLaplacian(hypre_MPI_COMM_WORLD,
+                                              nx, ny, nz, P, Q, R, p, q, r, values);
 
    hypre_TFree(values, HYPRE_MEMORY_HOST);
 
diff --git a/src/utilities/_hypre_utilities.h b/src/utilities/_hypre_utilities.h
index fc315117f..cdd9ee610 100644
--- a/src/utilities/_hypre_utilities.h
+++ b/src/utilities/_hypre_utilities.h
@@ -241,9 +241,9 @@ typedef double                 hypre_double;
 /* Macro for marking fallthrough in switch statements */
 #if (defined(__GNUC__) && __GNUC__ >= 7) ||\
     (defined(__clang__) && __clang_major__ >= 10)
-#define HYPRE_FALLTHROUGH __attribute__ ((fallthrough))
+ #define HYPRE_FALLTHROUGH __attribute__ ((fallthrough))
 #else
-#define HYPRE_FALLTHROUGH ((void)0)
+ #define HYPRE_FALLTHROUGH ((void)0)
 #endif
 
 /* Macro for silencing unused variable warning */
diff --git a/src/utilities/_hypre_utilities.hpp b/src/utilities/_hypre_utilities.hpp
index 47740e01c..9fc8d5acf 100644
--- a/src/utilities/_hypre_utilities.hpp
+++ b/src/utilities/_hypre_utilities.hpp
@@ -1151,42 +1151,6 @@ hypre_mask hypre_mask_flip_at(hypre_mask bitmask, hypre_int n)
 
 #if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
 
-/* return the thread identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_threadIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return threadIdx.x; }
-   if constexpr (dim == 1) { return threadIdx.y; }
-   if constexpr (dim == 2) { return threadIdx.z; }
-
-   return -1;
-}
-
-/* return the block identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return blockIdx.x; }
-   if constexpr (dim == 1) { return blockIdx.y; }
-   if constexpr (dim == 2) { return blockIdx.z; }
-
-   return -1;
-}
-
-/* return the block dimension in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockDim(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return blockDim.x; }
-   if constexpr (dim == 1) { return blockDim.y; }
-   if constexpr (dim == 2) { return blockDim.z; }
-
-   return -1;
-}
-
 /* return the number of threads in block */
 template <hypre_int dim>
 static __device__ __forceinline__
@@ -1341,14 +1305,6 @@ hypre_double atomicAdd(hypre_double* address, hypre_double val)
 }
 #endif
 
-/* Perform atomic add operation */
-template <typename T>
-static __device__ __forceinline__
-void hypre_gpu_atomicAdd(hypre_int pos, T* address, T val)
-{
-   atomicAdd((T*)(address + pos), val);
-}
-
 // There are no *_sync functions in HIP
 #if defined(HYPRE_USING_HIP) || (CUDA_VERSION < 9000)
 
@@ -1799,42 +1755,6 @@ struct print_functor
 
 #if defined(HYPRE_USING_SYCL)
 
-/* return the thread identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_threadIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_local_id(2); }
-   if constexpr (dim == 1) { return item.get_local_id(1); }
-   if constexpr (dim == 2) { return item.get_local_id(0); }
-
-   return -1;
-}
-
-/* return the block identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_group(2); }
-   if constexpr (dim == 1) { return item.get_group(1); }
-   if constexpr (dim == 2) { return item.get_group(0); }
-
-   return -1;
-}
-
-/* return the block dimension in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockDim(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_local_range(2); }
-   if constexpr (dim == 1) { return item.get_local_range(1); }
-   if constexpr (dim == 2) { return item.get_local_range(0); }
-
-   return -1;
-}
-
 /* return the number of threads in block */
 template <hypre_int dim>
 static __device__ __forceinline__
@@ -1925,19 +1845,6 @@ hypre_int hypre_gpu_get_grid_warp_id(hypre_DeviceItem &item)
           hypre_gpu_get_warp_id<bdim>(item);
 }
 
-/* Perform atomic add operation */
-template <typename T>
-static __device__ __forceinline__
-void hypre_gpu_atomicAdd(hypre_int pos, T* address, T val)
-{
-   auto atomic_val =
-      sycl::atomic_ref<T, sycl::memory_order::relaxed,
-      sycl::memory_scope::device, sycl::access::address_space::local_space>
-      (address[pos]);
-   auto curr = atomic_val.load(sycl::memory_order::relaxed);
-   while (!atomic_val.compare_exchange_strong(curr, curr + val, sycl::memory_order::relaxed)) {}
-}
-
 /* sync the thread block */
 static __device__ __forceinline__
 void block_sync(hypre_DeviceItem &item)
diff --git a/src/utilities/device_utils.h b/src/utilities/device_utils.h
index 48bd247b6..b4a494767 100644
--- a/src/utilities/device_utils.h
+++ b/src/utilities/device_utils.h
@@ -955,42 +955,6 @@ hypre_mask hypre_mask_flip_at(hypre_mask bitmask, hypre_int n)
 
 #if defined(HYPRE_USING_CUDA) || defined(HYPRE_USING_HIP)
 
-/* return the thread identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_threadIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return threadIdx.x; }
-   if constexpr (dim == 1) { return threadIdx.y; }
-   if constexpr (dim == 2) { return threadIdx.z; }
-
-   return -1;
-}
-
-/* return the block identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return blockIdx.x; }
-   if constexpr (dim == 1) { return blockIdx.y; }
-   if constexpr (dim == 2) { return blockIdx.z; }
-
-   return -1;
-}
-
-/* return the block dimension in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockDim(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return blockDim.x; }
-   if constexpr (dim == 1) { return blockDim.y; }
-   if constexpr (dim == 2) { return blockDim.z; }
-
-   return -1;
-}
-
 /* return the number of threads in block */
 template <hypre_int dim>
 static __device__ __forceinline__
@@ -1145,14 +1109,6 @@ hypre_double atomicAdd(hypre_double* address, hypre_double val)
 }
 #endif
 
-/* Perform atomic add operation */
-template <typename T>
-static __device__ __forceinline__
-void hypre_gpu_atomicAdd(hypre_int pos, T* address, T val)
-{
-   atomicAdd((T*)(address + pos), val);
-}
-
 // There are no *_sync functions in HIP
 #if defined(HYPRE_USING_HIP) || (CUDA_VERSION < 9000)
 
@@ -1603,42 +1559,6 @@ struct print_functor
 
 #if defined(HYPRE_USING_SYCL)
 
-/* return the thread identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_threadIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_local_id(2); }
-   if constexpr (dim == 1) { return item.get_local_id(1); }
-   if constexpr (dim == 2) { return item.get_local_id(0); }
-
-   return -1;
-}
-
-/* return the block identifier in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockIdx(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_group(2); }
-   if constexpr (dim == 1) { return item.get_group(1); }
-   if constexpr (dim == 2) { return item.get_group(0); }
-
-   return -1;
-}
-
-/* return the block dimension in direction dim */
-template <hypre_int dim>
-static __device__ __forceinline__
-hypre_int hypre_gpu_get_blockDim(hypre_DeviceItem &item)
-{
-   if constexpr (dim == 0) { return item.get_local_range(2); }
-   if constexpr (dim == 1) { return item.get_local_range(1); }
-   if constexpr (dim == 2) { return item.get_local_range(0); }
-
-   return -1;
-}
-
 /* return the number of threads in block */
 template <hypre_int dim>
 static __device__ __forceinline__
@@ -1729,19 +1649,6 @@ hypre_int hypre_gpu_get_grid_warp_id(hypre_DeviceItem &item)
           hypre_gpu_get_warp_id<bdim>(item);
 }
 
-/* Perform atomic add operation */
-template <typename T>
-static __device__ __forceinline__
-void hypre_gpu_atomicAdd(hypre_int pos, T* address, T val)
-{
-   auto atomic_val =
-      sycl::atomic_ref<T, sycl::memory_order::relaxed,
-      sycl::memory_scope::device, sycl::access::address_space::local_space>
-      (address[pos]);
-   auto curr = atomic_val.load(sycl::memory_order::relaxed);
-   while (!atomic_val.compare_exchange_strong(curr, curr + val, sycl::memory_order::relaxed)) {}
-}
-
 /* sync the thread block */
 static __device__ __forceinline__
 void block_sync(hypre_DeviceItem &item)
diff --git a/src/utilities/general.c b/src/utilities/general.c
index 64d98adcc..e6de9e480 100644
--- a/src/utilities/general.c
+++ b/src/utilities/general.c
@@ -8,13 +8,6 @@
 #include "_hypre_utilities.h"
 #include "_hypre_utilities.hpp"
 
-#if defined(__linux__) && defined(HYPRE_DEBUG)
-#ifndef __USE_GNU
-#define __USE_GNU
-#endif
-#include <fenv.h>
-#endif
-
 /* global variable _hypre_handle:
  * Outside this file, do NOT access it directly,
  * but use hypre_handle() instead (see handle.h) */
@@ -412,10 +405,6 @@ HYPRE_Initialize(void)
    hypre_MagmaInitialize();
 #endif
 
-#if defined(__linux__) && defined(HYPRE_DEBUG)
-   feenableexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW);
-#endif
-
    /* Update library state */
    hypre_SetInitialized();
 
diff --git a/src/utilities/general.h b/src/utilities/general.h
index 161289bd9..368cdbe87 100644
--- a/src/utilities/general.h
+++ b/src/utilities/general.h
@@ -53,9 +53,9 @@ typedef double                 hypre_double;
 /* Macro for marking fallthrough in switch statements */
 #if (defined(__GNUC__) && __GNUC__ >= 7) ||\
     (defined(__clang__) && __clang_major__ >= 10)
-#define HYPRE_FALLTHROUGH __attribute__ ((fallthrough))
+ #define HYPRE_FALLTHROUGH __attribute__ ((fallthrough))
 #else
-#define HYPRE_FALLTHROUGH ((void)0)
+ #define HYPRE_FALLTHROUGH ((void)0)
 #endif
 
 /* Macro for silencing unused variable warning */
diff --git a/src/utilities/memory_tracker.c b/src/utilities/memory_tracker.c
index 8b2a2e470..895611e3d 100644
--- a/src/utilities/memory_tracker.c
+++ b/src/utilities/memory_tracker.c
@@ -110,7 +110,7 @@ hypre_MemoryTrackerQueueCompSearch(const void *e1,
 hypre_MemoryTrackerEvent
 hypre_MemoryTrackerGetNext(hypre_MemoryTracker *tracker)
 {
-   HYPRE_Int                 i, k = HYPRE_MEMORY_NUM_EVENTS;
+   hypre_MemoryTrackerEvent i, k = HYPRE_MEMORY_NUM_EVENTS;
    hypre_MemoryTrackerQueue *q = tracker->queue;
 
    for (i = HYPRE_MEMORY_EVENT_ALLOC; i < HYPRE_MEMORY_NUM_EVENTS; i++)
@@ -126,7 +126,7 @@ hypre_MemoryTrackerGetNext(hypre_MemoryTracker *tracker)
       }
    }
 
-   return (hypre_MemoryTrackerEvent) k;
+   return k;
 }
 
 HYPRE_Int
@@ -330,7 +330,7 @@ hypre_PrintMemoryTracker( size_t     *totl_bytes_o,
    size_t curr_bytes[hypre_NUM_MEMORY_LOCATION] = {0};
    size_t copy_bytes[hypre_MEMCPY_NUM_TYPES] = {0};
    size_t j;
-   HYPRE_Int i;
+   hypre_MemoryTrackerEvent i;
    //HYPRE_Real t0 = hypre_MPI_Wtime();
 
    HYPRE_Int leakcheck = 1;
@@ -404,8 +404,7 @@ hypre_PrintMemoryTracker( size_t     *totl_bytes_o,
             hypre_MemoryTrackerEntry key = { .ptr = entry->ptr };
             hypre_MemoryTrackerEntry *key_ptr = &key;
 
-            hypre_MemoryTrackerEntry **result = (hypre_MemoryTrackerEntry **)
-                                                bsearch(&key_ptr,
+            hypre_MemoryTrackerEntry **result = bsearch(&key_ptr,
                                                         qf->sorted_data_compressed,
                                                         qf->sorted_data_compressed_len,
                                                         sizeof(hypre_MemoryTrackerEntry *),
@@ -609,14 +608,14 @@ hypre_PrintMemoryTracker( size_t     *totl_bytes_o,
 
    if (leakcheck)
    {
-      HYPRE_Int t;
+      hypre_MemoryLocation t;
 
       for (t = hypre_MEMORY_HOST; t <= hypre_MEMORY_UNIFIED; t++)
       {
          if (curr_bytes[t])
          {
             char memory_location[256];
-            hypre_GetMemoryLocationName((hypre_MemoryLocation) t, memory_location);
+            hypre_GetMemoryLocationName(t, memory_location);
             fprintf(stderr, "%zu bytes of %s memory may not be freed\n", curr_bytes[t], memory_location);
          }
 
diff --git a/src/utilities/nvtx.c b/src/utilities/nvtx.c
index 7bae7a4e0..0b06f9669 100644
--- a/src/utilities/nvtx.c
+++ b/src/utilities/nvtx.c
@@ -6,7 +6,6 @@
  ******************************************************************************/
 
 #include "_hypre_utilities.h"
-#include "_hypre_utilities.hpp"
 
 #if defined(HYPRE_USING_ROCTX)
 #include "hip/hip_runtime_api.h"
@@ -119,13 +118,13 @@ void hypre_GpuProfilingPopRange(void)
 {
 #if defined (HYPRE_USING_NVTX)
    hypre_GpuProfilingPushRangeColor("StreamSync0", Red);
-   HYPRE_CUDA_CALL( cudaStreamSynchronize(0) );
+   cudaStreamSynchronize(0);
    nvtxRangePop();
    nvtxRangePop();
 
 #elif defined (HYPRE_USING_ROCTX)
    roctxRangePush("StreamSync0");
-   HYPRE_HIP_CALL( hipStreamSynchronize(0) );
+   hipStreamSynchronize(0);
    roctxRangePop();
    roctxRangePop();
 #endif
